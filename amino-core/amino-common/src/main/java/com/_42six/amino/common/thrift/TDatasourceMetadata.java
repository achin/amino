/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com._42six.amino.common.thrift;

import java.util.*;

public class TDatasourceMetadata implements org.apache.thrift.TBase<TDatasourceMetadata, TDatasourceMetadata._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TDatasourceMetadata");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField FEATURE_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("featureIds", org.apache.thrift.protocol.TType.SET, (short)4);
  private static final org.apache.thrift.protocol.TField BUCKET_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("bucketIds", org.apache.thrift.protocol.TType.SET, (short)5);

  public String id;
  public String description;
  public String name;
  public Set<String> featureIds;
  public Set<String> bucketIds;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    DESCRIPTION((short)2, "description"),
    NAME((short)3, "name"),
    FEATURE_IDS((short)4, "featureIds"),
    BUCKET_IDS((short)5, "bucketIds");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // DESCRIPTION
          return DESCRIPTION;
        case 3: // NAME
          return NAME;
        case 4: // FEATURE_IDS
          return FEATURE_IDS;
        case 5: // BUCKET_IDS
          return BUCKET_IDS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FEATURE_IDS, new org.apache.thrift.meta_data.FieldMetaData("featureIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.BUCKET_IDS, new org.apache.thrift.meta_data.FieldMetaData("bucketIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TDatasourceMetadata.class, metaDataMap);
  }

  public TDatasourceMetadata() {
  }

  public TDatasourceMetadata(
    String id,
    String description,
    String name,
    Set<String> featureIds,
    Set<String> bucketIds)
  {
    this();
    this.id = id;
    this.description = description;
    this.name = name;
    this.featureIds = featureIds;
    this.bucketIds = bucketIds;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TDatasourceMetadata(TDatasourceMetadata other) {
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetDescription()) {
      this.description = other.description;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetFeatureIds()) {
      Set<String> __this__featureIds = new HashSet<String>();
      for (String other_element : other.featureIds) {
        __this__featureIds.add(other_element);
      }
      this.featureIds = __this__featureIds;
    }
    if (other.isSetBucketIds()) {
      Set<String> __this__bucketIds = new HashSet<String>();
      for (String other_element : other.bucketIds) {
        __this__bucketIds.add(other_element);
      }
      this.bucketIds = __this__bucketIds;
    }
  }

  public TDatasourceMetadata deepCopy() {
    return new TDatasourceMetadata(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.description = null;
    this.name = null;
    this.featureIds = null;
    this.bucketIds = null;
  }

  public String getId() {
    return this.id;
  }

  public TDatasourceMetadata setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public String getDescription() {
    return this.description;
  }

  public TDatasourceMetadata setDescription(String description) {
    this.description = description;
    return this;
  }

  public void unsetDescription() {
    this.description = null;
  }

  /** Returns true if field description is set (has been assigned a value) and false otherwise */
  public boolean isSetDescription() {
    return this.description != null;
  }

  public void setDescriptionIsSet(boolean value) {
    if (!value) {
      this.description = null;
    }
  }

  public String getName() {
    return this.name;
  }

  public TDatasourceMetadata setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public int getFeatureIdsSize() {
    return (this.featureIds == null) ? 0 : this.featureIds.size();
  }

  public java.util.Iterator<String> getFeatureIdsIterator() {
    return (this.featureIds == null) ? null : this.featureIds.iterator();
  }

  public void addToFeatureIds(String elem) {
    if (this.featureIds == null) {
      this.featureIds = new HashSet<String>();
    }
    this.featureIds.add(elem);
  }

  public Set<String> getFeatureIds() {
    return this.featureIds;
  }

  public TDatasourceMetadata setFeatureIds(Set<String> featureIds) {
    this.featureIds = featureIds;
    return this;
  }

  public void unsetFeatureIds() {
    this.featureIds = null;
  }

  /** Returns true if field featureIds is set (has been assigned a value) and false otherwise */
  public boolean isSetFeatureIds() {
    return this.featureIds != null;
  }

  public void setFeatureIdsIsSet(boolean value) {
    if (!value) {
      this.featureIds = null;
    }
  }

  public int getBucketIdsSize() {
    return (this.bucketIds == null) ? 0 : this.bucketIds.size();
  }

  public java.util.Iterator<String> getBucketIdsIterator() {
    return (this.bucketIds == null) ? null : this.bucketIds.iterator();
  }

  public void addToBucketIds(String elem) {
    if (this.bucketIds == null) {
      this.bucketIds = new HashSet<String>();
    }
    this.bucketIds.add(elem);
  }

  public Set<String> getBucketIds() {
    return this.bucketIds;
  }

  public TDatasourceMetadata setBucketIds(Set<String> bucketIds) {
    this.bucketIds = bucketIds;
    return this;
  }

  public void unsetBucketIds() {
    this.bucketIds = null;
  }

  /** Returns true if field bucketIds is set (has been assigned a value) and false otherwise */
  public boolean isSetBucketIds() {
    return this.bucketIds != null;
  }

  public void setBucketIdsIsSet(boolean value) {
    if (!value) {
      this.bucketIds = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case DESCRIPTION:
      if (value == null) {
        unsetDescription();
      } else {
        setDescription((String)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case FEATURE_IDS:
      if (value == null) {
        unsetFeatureIds();
      } else {
        setFeatureIds((Set<String>)value);
      }
      break;

    case BUCKET_IDS:
      if (value == null) {
        unsetBucketIds();
      } else {
        setBucketIds((Set<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case DESCRIPTION:
      return getDescription();

    case NAME:
      return getName();

    case FEATURE_IDS:
      return getFeatureIds();

    case BUCKET_IDS:
      return getBucketIds();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case DESCRIPTION:
      return isSetDescription();
    case NAME:
      return isSetName();
    case FEATURE_IDS:
      return isSetFeatureIds();
    case BUCKET_IDS:
      return isSetBucketIds();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TDatasourceMetadata)
      return this.equals((TDatasourceMetadata)that);
    return false;
  }

  public boolean equals(TDatasourceMetadata that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_description = true && this.isSetDescription();
    boolean that_present_description = true && that.isSetDescription();
    if (this_present_description || that_present_description) {
      if (!(this_present_description && that_present_description))
        return false;
      if (!this.description.equals(that.description))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_featureIds = true && this.isSetFeatureIds();
    boolean that_present_featureIds = true && that.isSetFeatureIds();
    if (this_present_featureIds || that_present_featureIds) {
      if (!(this_present_featureIds && that_present_featureIds))
        return false;
      if (!this.featureIds.equals(that.featureIds))
        return false;
    }

    boolean this_present_bucketIds = true && this.isSetBucketIds();
    boolean that_present_bucketIds = true && that.isSetBucketIds();
    if (this_present_bucketIds || that_present_bucketIds) {
      if (!(this_present_bucketIds && that_present_bucketIds))
        return false;
      if (!this.bucketIds.equals(that.bucketIds))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TDatasourceMetadata other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TDatasourceMetadata typedOther = (TDatasourceMetadata)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDescription()).compareTo(typedOther.isSetDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, typedOther.description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFeatureIds()).compareTo(typedOther.isSetFeatureIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFeatureIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.featureIds, typedOther.featureIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBucketIds()).compareTo(typedOther.isSetBucketIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBucketIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bucketIds, typedOther.bucketIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // ID
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.id = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // DESCRIPTION
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.description = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // NAME
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.name = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // FEATURE_IDS
          if (field.type == org.apache.thrift.protocol.TType.SET) {
            {
              org.apache.thrift.protocol.TSet _set36 = iprot.readSetBegin();
              this.featureIds = new HashSet<String>(2*_set36.size);
              for (int _i37 = 0; _i37 < _set36.size; ++_i37)
              {
                String _elem38;
                _elem38 = iprot.readString();
                this.featureIds.add(_elem38);
              }
              iprot.readSetEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // BUCKET_IDS
          if (field.type == org.apache.thrift.protocol.TType.SET) {
            {
              org.apache.thrift.protocol.TSet _set39 = iprot.readSetBegin();
              this.bucketIds = new HashSet<String>(2*_set39.size);
              for (int _i40 = 0; _i40 < _set39.size; ++_i40)
              {
                String _elem41;
                _elem41 = iprot.readString();
                this.bucketIds.add(_elem41);
              }
              iprot.readSetEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.id != null) {
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeString(this.id);
      oprot.writeFieldEnd();
    }
    if (this.description != null) {
      oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
      oprot.writeString(this.description);
      oprot.writeFieldEnd();
    }
    if (this.name != null) {
      oprot.writeFieldBegin(NAME_FIELD_DESC);
      oprot.writeString(this.name);
      oprot.writeFieldEnd();
    }
    if (this.featureIds != null) {
      oprot.writeFieldBegin(FEATURE_IDS_FIELD_DESC);
      {
        oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, this.featureIds.size()));
        for (String _iter42 : this.featureIds)
        {
          oprot.writeString(_iter42);
        }
        oprot.writeSetEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.bucketIds != null) {
      oprot.writeFieldBegin(BUCKET_IDS_FIELD_DESC);
      {
        oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, this.bucketIds.size()));
        for (String _iter43 : this.bucketIds)
        {
          oprot.writeString(_iter43);
        }
        oprot.writeSetEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TDatasourceMetadata(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("description:");
    if (this.description == null) {
      sb.append("null");
    } else {
      sb.append(this.description);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("featureIds:");
    if (this.featureIds == null) {
      sb.append("null");
    } else {
      sb.append(this.featureIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bucketIds:");
    if (this.bucketIds == null) {
      sb.append("null");
    } else {
      sb.append(this.bucketIds);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

