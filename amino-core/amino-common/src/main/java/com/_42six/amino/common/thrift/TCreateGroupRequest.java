/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com._42six.amino.common.thrift;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TCreateGroupRequest implements org.apache.thrift.TBase<TCreateGroupRequest, TCreateGroupRequest._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TCreateGroupRequest");

  private static final org.apache.thrift.protocol.TField GROUP_FIELD_DESC = new org.apache.thrift.protocol.TField("group", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField REQUESTER_FIELD_DESC = new org.apache.thrift.protocol.TField("requester", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField VISIBILITIES_FIELD_DESC = new org.apache.thrift.protocol.TField("visibilities", org.apache.thrift.protocol.TType.SET, (short)3);

  public TGroup group;
  public String requester;
  public Set<String> visibilities;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    GROUP((short)1, "group"),
    REQUESTER((short)2, "requester"),
    VISIBILITIES((short)3, "visibilities");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // GROUP
          return GROUP;
        case 2: // REQUESTER
          return REQUESTER;
        case 3: // VISIBILITIES
          return VISIBILITIES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.GROUP, new org.apache.thrift.meta_data.FieldMetaData("group", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TGroup.class)));
    tmpMap.put(_Fields.REQUESTER, new org.apache.thrift.meta_data.FieldMetaData("requester", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VISIBILITIES, new org.apache.thrift.meta_data.FieldMetaData("visibilities", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TCreateGroupRequest.class, metaDataMap);
  }

  public TCreateGroupRequest() {
  }

  public TCreateGroupRequest(
    TGroup group,
    String requester,
    Set<String> visibilities)
  {
    this();
    this.group = group;
    this.requester = requester;
    this.visibilities = visibilities;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TCreateGroupRequest(TCreateGroupRequest other) {
    if (other.isSetGroup()) {
      this.group = new TGroup(other.group);
    }
    if (other.isSetRequester()) {
      this.requester = other.requester;
    }
    if (other.isSetVisibilities()) {
      Set<String> __this__visibilities = new HashSet<String>();
      for (String other_element : other.visibilities) {
        __this__visibilities.add(other_element);
      }
      this.visibilities = __this__visibilities;
    }
  }

  public TCreateGroupRequest deepCopy() {
    return new TCreateGroupRequest(this);
  }

  @Override
  public void clear() {
    this.group = null;
    this.requester = null;
    this.visibilities = null;
  }

  public TGroup getGroup() {
    return this.group;
  }

  public TCreateGroupRequest setGroup(TGroup group) {
    this.group = group;
    return this;
  }

  public void unsetGroup() {
    this.group = null;
  }

  /** Returns true if field group is set (has been assigned a value) and false otherwise */
  public boolean isSetGroup() {
    return this.group != null;
  }

  public void setGroupIsSet(boolean value) {
    if (!value) {
      this.group = null;
    }
  }

  public String getRequester() {
    return this.requester;
  }

  public TCreateGroupRequest setRequester(String requester) {
    this.requester = requester;
    return this;
  }

  public void unsetRequester() {
    this.requester = null;
  }

  /** Returns true if field requester is set (has been assigned a value) and false otherwise */
  public boolean isSetRequester() {
    return this.requester != null;
  }

  public void setRequesterIsSet(boolean value) {
    if (!value) {
      this.requester = null;
    }
  }

  public int getVisibilitiesSize() {
    return (this.visibilities == null) ? 0 : this.visibilities.size();
  }

  public java.util.Iterator<String> getVisibilitiesIterator() {
    return (this.visibilities == null) ? null : this.visibilities.iterator();
  }

  public void addToVisibilities(String elem) {
    if (this.visibilities == null) {
      this.visibilities = new HashSet<String>();
    }
    this.visibilities.add(elem);
  }

  public Set<String> getVisibilities() {
    return this.visibilities;
  }

  public TCreateGroupRequest setVisibilities(Set<String> visibilities) {
    this.visibilities = visibilities;
    return this;
  }

  public void unsetVisibilities() {
    this.visibilities = null;
  }

  /** Returns true if field visibilities is set (has been assigned a value) and false otherwise */
  public boolean isSetVisibilities() {
    return this.visibilities != null;
  }

  public void setVisibilitiesIsSet(boolean value) {
    if (!value) {
      this.visibilities = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case GROUP:
      if (value == null) {
        unsetGroup();
      } else {
        setGroup((TGroup)value);
      }
      break;

    case REQUESTER:
      if (value == null) {
        unsetRequester();
      } else {
        setRequester((String)value);
      }
      break;

    case VISIBILITIES:
      if (value == null) {
        unsetVisibilities();
      } else {
        setVisibilities((Set<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case GROUP:
      return getGroup();

    case REQUESTER:
      return getRequester();

    case VISIBILITIES:
      return getVisibilities();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case GROUP:
      return isSetGroup();
    case REQUESTER:
      return isSetRequester();
    case VISIBILITIES:
      return isSetVisibilities();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TCreateGroupRequest)
      return this.equals((TCreateGroupRequest)that);
    return false;
  }

  public boolean equals(TCreateGroupRequest that) {
    if (that == null)
      return false;

    boolean this_present_group = true && this.isSetGroup();
    boolean that_present_group = true && that.isSetGroup();
    if (this_present_group || that_present_group) {
      if (!(this_present_group && that_present_group))
        return false;
      if (!this.group.equals(that.group))
        return false;
    }

    boolean this_present_requester = true && this.isSetRequester();
    boolean that_present_requester = true && that.isSetRequester();
    if (this_present_requester || that_present_requester) {
      if (!(this_present_requester && that_present_requester))
        return false;
      if (!this.requester.equals(that.requester))
        return false;
    }

    boolean this_present_visibilities = true && this.isSetVisibilities();
    boolean that_present_visibilities = true && that.isSetVisibilities();
    if (this_present_visibilities || that_present_visibilities) {
      if (!(this_present_visibilities && that_present_visibilities))
        return false;
      if (!this.visibilities.equals(that.visibilities))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TCreateGroupRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TCreateGroupRequest typedOther = (TCreateGroupRequest)other;

    lastComparison = Boolean.valueOf(isSetGroup()).compareTo(typedOther.isSetGroup());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroup()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.group, typedOther.group);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequester()).compareTo(typedOther.isSetRequester());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequester()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requester, typedOther.requester);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVisibilities()).compareTo(typedOther.isSetVisibilities());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVisibilities()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.visibilities, typedOther.visibilities);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // GROUP
          if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
            this.group = new TGroup();
            this.group.read(iprot);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // REQUESTER
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.requester = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // VISIBILITIES
          if (field.type == org.apache.thrift.protocol.TType.SET) {
            {
              org.apache.thrift.protocol.TSet _set16 = iprot.readSetBegin();
              this.visibilities = new HashSet<String>(2*_set16.size);
              for (int _i17 = 0; _i17 < _set16.size; ++_i17)
              {
                String _elem18;
                _elem18 = iprot.readString();
                this.visibilities.add(_elem18);
              }
              iprot.readSetEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.group != null) {
      oprot.writeFieldBegin(GROUP_FIELD_DESC);
      this.group.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.requester != null) {
      oprot.writeFieldBegin(REQUESTER_FIELD_DESC);
      oprot.writeString(this.requester);
      oprot.writeFieldEnd();
    }
    if (this.visibilities != null) {
      oprot.writeFieldBegin(VISIBILITIES_FIELD_DESC);
      {
        oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, this.visibilities.size()));
        for (String _iter19 : this.visibilities)
        {
          oprot.writeString(_iter19);
        }
        oprot.writeSetEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TCreateGroupRequest(");
    boolean first = true;

    sb.append("group:");
    if (this.group == null) {
      sb.append("null");
    } else {
      sb.append(this.group);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("requester:");
    if (this.requester == null) {
      sb.append("null");
    } else {
      sb.append(this.requester);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("visibilities:");
    if (this.visibilities == null) {
      sb.append("null");
    } else {
      sb.append(this.visibilities);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

