/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com._42six.amino.common.thrift;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TByValuesRequest implements org.apache.thrift.TBase<TByValuesRequest, TByValuesRequest._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TByValuesRequest");

  private static final org.apache.thrift.protocol.TField REQUESTER_FIELD_DESC = new org.apache.thrift.protocol.TField("requester", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField VISIBILITIES_FIELD_DESC = new org.apache.thrift.protocol.TField("visibilities", org.apache.thrift.protocol.TType.SET, (short)2);
  private static final org.apache.thrift.protocol.TField DATASOURCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("datasourceId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField BUCKET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("bucketId", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField BUCKET_VALUES_FIELD_DESC = new org.apache.thrift.protocol.TField("bucketValues", org.apache.thrift.protocol.TType.SET, (short)5);
  private static final org.apache.thrift.protocol.TField HYPOTHESES_FIELD_DESC = new org.apache.thrift.protocol.TField("hypotheses", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField TIMEOUT_FIELD_DESC = new org.apache.thrift.protocol.TField("timeout", org.apache.thrift.protocol.TType.I64, (short)7);

  public String requester;
  public Set<String> visibilities;
  /**
   * The datasource the bucket values are associated with
   */
  public String datasourceId;
  /**
   * The bucket the bucket values are associated with
   */
  public String bucketId;
  /**
   * The values to intersect the Hypotheses with
   */
  public Set<String> bucketValues;
  /**
   * OPTIONAL - If provided then only searches these hypotheses
   */
  public List<THypothesis> hypotheses;
  public long timeout;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    REQUESTER((short)1, "requester"),
    VISIBILITIES((short)2, "visibilities"),
    /**
     * The datasource the bucket values are associated with
     */
    DATASOURCE_ID((short)3, "datasourceId"),
    /**
     * The bucket the bucket values are associated with
     */
    BUCKET_ID((short)4, "bucketId"),
    /**
     * The values to intersect the Hypotheses with
     */
    BUCKET_VALUES((short)5, "bucketValues"),
    /**
     * OPTIONAL - If provided then only searches these hypotheses
     */
    HYPOTHESES((short)6, "hypotheses"),
    TIMEOUT((short)7, "timeout");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // REQUESTER
          return REQUESTER;
        case 2: // VISIBILITIES
          return VISIBILITIES;
        case 3: // DATASOURCE_ID
          return DATASOURCE_ID;
        case 4: // BUCKET_ID
          return BUCKET_ID;
        case 5: // BUCKET_VALUES
          return BUCKET_VALUES;
        case 6: // HYPOTHESES
          return HYPOTHESES;
        case 7: // TIMEOUT
          return TIMEOUT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TIMEOUT_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.REQUESTER, new org.apache.thrift.meta_data.FieldMetaData("requester", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VISIBILITIES, new org.apache.thrift.meta_data.FieldMetaData("visibilities", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.DATASOURCE_ID, new org.apache.thrift.meta_data.FieldMetaData("datasourceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BUCKET_ID, new org.apache.thrift.meta_data.FieldMetaData("bucketId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BUCKET_VALUES, new org.apache.thrift.meta_data.FieldMetaData("bucketValues", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.HYPOTHESES, new org.apache.thrift.meta_data.FieldMetaData("hypotheses", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, THypothesis.class))));
    tmpMap.put(_Fields.TIMEOUT, new org.apache.thrift.meta_data.FieldMetaData("timeout", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TByValuesRequest.class, metaDataMap);
  }

  public TByValuesRequest() {
    this.timeout = -1L;

  }

  public TByValuesRequest(
    String requester,
    Set<String> visibilities,
    String datasourceId,
    String bucketId,
    Set<String> bucketValues)
  {
    this();
    this.requester = requester;
    this.visibilities = visibilities;
    this.datasourceId = datasourceId;
    this.bucketId = bucketId;
    this.bucketValues = bucketValues;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TByValuesRequest(TByValuesRequest other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetRequester()) {
      this.requester = other.requester;
    }
    if (other.isSetVisibilities()) {
      Set<String> __this__visibilities = new HashSet<String>();
      for (String other_element : other.visibilities) {
        __this__visibilities.add(other_element);
      }
      this.visibilities = __this__visibilities;
    }
    if (other.isSetDatasourceId()) {
      this.datasourceId = other.datasourceId;
    }
    if (other.isSetBucketId()) {
      this.bucketId = other.bucketId;
    }
    if (other.isSetBucketValues()) {
      Set<String> __this__bucketValues = new HashSet<String>();
      for (String other_element : other.bucketValues) {
        __this__bucketValues.add(other_element);
      }
      this.bucketValues = __this__bucketValues;
    }
    if (other.isSetHypotheses()) {
      List<THypothesis> __this__hypotheses = new ArrayList<THypothesis>();
      for (THypothesis other_element : other.hypotheses) {
        __this__hypotheses.add(new THypothesis(other_element));
      }
      this.hypotheses = __this__hypotheses;
    }
    this.timeout = other.timeout;
  }

  public TByValuesRequest deepCopy() {
    return new TByValuesRequest(this);
  }

  @Override
  public void clear() {
    this.requester = null;
    this.visibilities = null;
    this.datasourceId = null;
    this.bucketId = null;
    this.bucketValues = null;
    this.hypotheses = null;
    this.timeout = -1L;

  }

  public String getRequester() {
    return this.requester;
  }

  public TByValuesRequest setRequester(String requester) {
    this.requester = requester;
    return this;
  }

  public void unsetRequester() {
    this.requester = null;
  }

  /** Returns true if field requester is set (has been assigned a value) and false otherwise */
  public boolean isSetRequester() {
    return this.requester != null;
  }

  public void setRequesterIsSet(boolean value) {
    if (!value) {
      this.requester = null;
    }
  }

  public int getVisibilitiesSize() {
    return (this.visibilities == null) ? 0 : this.visibilities.size();
  }

  public java.util.Iterator<String> getVisibilitiesIterator() {
    return (this.visibilities == null) ? null : this.visibilities.iterator();
  }

  public void addToVisibilities(String elem) {
    if (this.visibilities == null) {
      this.visibilities = new HashSet<String>();
    }
    this.visibilities.add(elem);
  }

  public Set<String> getVisibilities() {
    return this.visibilities;
  }

  public TByValuesRequest setVisibilities(Set<String> visibilities) {
    this.visibilities = visibilities;
    return this;
  }

  public void unsetVisibilities() {
    this.visibilities = null;
  }

  /** Returns true if field visibilities is set (has been assigned a value) and false otherwise */
  public boolean isSetVisibilities() {
    return this.visibilities != null;
  }

  public void setVisibilitiesIsSet(boolean value) {
    if (!value) {
      this.visibilities = null;
    }
  }

  /**
   * The datasource the bucket values are associated with
   */
  public String getDatasourceId() {
    return this.datasourceId;
  }

  /**
   * The datasource the bucket values are associated with
   */
  public TByValuesRequest setDatasourceId(String datasourceId) {
    this.datasourceId = datasourceId;
    return this;
  }

  public void unsetDatasourceId() {
    this.datasourceId = null;
  }

  /** Returns true if field datasourceId is set (has been assigned a value) and false otherwise */
  public boolean isSetDatasourceId() {
    return this.datasourceId != null;
  }

  public void setDatasourceIdIsSet(boolean value) {
    if (!value) {
      this.datasourceId = null;
    }
  }

  /**
   * The bucket the bucket values are associated with
   */
  public String getBucketId() {
    return this.bucketId;
  }

  /**
   * The bucket the bucket values are associated with
   */
  public TByValuesRequest setBucketId(String bucketId) {
    this.bucketId = bucketId;
    return this;
  }

  public void unsetBucketId() {
    this.bucketId = null;
  }

  /** Returns true if field bucketId is set (has been assigned a value) and false otherwise */
  public boolean isSetBucketId() {
    return this.bucketId != null;
  }

  public void setBucketIdIsSet(boolean value) {
    if (!value) {
      this.bucketId = null;
    }
  }

  public int getBucketValuesSize() {
    return (this.bucketValues == null) ? 0 : this.bucketValues.size();
  }

  public java.util.Iterator<String> getBucketValuesIterator() {
    return (this.bucketValues == null) ? null : this.bucketValues.iterator();
  }

  public void addToBucketValues(String elem) {
    if (this.bucketValues == null) {
      this.bucketValues = new HashSet<String>();
    }
    this.bucketValues.add(elem);
  }

  /**
   * The values to intersect the Hypotheses with
   */
  public Set<String> getBucketValues() {
    return this.bucketValues;
  }

  /**
   * The values to intersect the Hypotheses with
   */
  public TByValuesRequest setBucketValues(Set<String> bucketValues) {
    this.bucketValues = bucketValues;
    return this;
  }

  public void unsetBucketValues() {
    this.bucketValues = null;
  }

  /** Returns true if field bucketValues is set (has been assigned a value) and false otherwise */
  public boolean isSetBucketValues() {
    return this.bucketValues != null;
  }

  public void setBucketValuesIsSet(boolean value) {
    if (!value) {
      this.bucketValues = null;
    }
  }

  public int getHypothesesSize() {
    return (this.hypotheses == null) ? 0 : this.hypotheses.size();
  }

  public java.util.Iterator<THypothesis> getHypothesesIterator() {
    return (this.hypotheses == null) ? null : this.hypotheses.iterator();
  }

  public void addToHypotheses(THypothesis elem) {
    if (this.hypotheses == null) {
      this.hypotheses = new ArrayList<THypothesis>();
    }
    this.hypotheses.add(elem);
  }

  /**
   * OPTIONAL - If provided then only searches these hypotheses
   */
  public List<THypothesis> getHypotheses() {
    return this.hypotheses;
  }

  /**
   * OPTIONAL - If provided then only searches these hypotheses
   */
  public TByValuesRequest setHypotheses(List<THypothesis> hypotheses) {
    this.hypotheses = hypotheses;
    return this;
  }

  public void unsetHypotheses() {
    this.hypotheses = null;
  }

  /** Returns true if field hypotheses is set (has been assigned a value) and false otherwise */
  public boolean isSetHypotheses() {
    return this.hypotheses != null;
  }

  public void setHypothesesIsSet(boolean value) {
    if (!value) {
      this.hypotheses = null;
    }
  }

  public long getTimeout() {
    return this.timeout;
  }

  public TByValuesRequest setTimeout(long timeout) {
    this.timeout = timeout;
    setTimeoutIsSet(true);
    return this;
  }

  public void unsetTimeout() {
    __isset_bit_vector.clear(__TIMEOUT_ISSET_ID);
  }

  /** Returns true if field timeout is set (has been assigned a value) and false otherwise */
  public boolean isSetTimeout() {
    return __isset_bit_vector.get(__TIMEOUT_ISSET_ID);
  }

  public void setTimeoutIsSet(boolean value) {
    __isset_bit_vector.set(__TIMEOUT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case REQUESTER:
      if (value == null) {
        unsetRequester();
      } else {
        setRequester((String)value);
      }
      break;

    case VISIBILITIES:
      if (value == null) {
        unsetVisibilities();
      } else {
        setVisibilities((Set<String>)value);
      }
      break;

    case DATASOURCE_ID:
      if (value == null) {
        unsetDatasourceId();
      } else {
        setDatasourceId((String)value);
      }
      break;

    case BUCKET_ID:
      if (value == null) {
        unsetBucketId();
      } else {
        setBucketId((String)value);
      }
      break;

    case BUCKET_VALUES:
      if (value == null) {
        unsetBucketValues();
      } else {
        setBucketValues((Set<String>)value);
      }
      break;

    case HYPOTHESES:
      if (value == null) {
        unsetHypotheses();
      } else {
        setHypotheses((List<THypothesis>)value);
      }
      break;

    case TIMEOUT:
      if (value == null) {
        unsetTimeout();
      } else {
        setTimeout((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case REQUESTER:
      return getRequester();

    case VISIBILITIES:
      return getVisibilities();

    case DATASOURCE_ID:
      return getDatasourceId();

    case BUCKET_ID:
      return getBucketId();

    case BUCKET_VALUES:
      return getBucketValues();

    case HYPOTHESES:
      return getHypotheses();

    case TIMEOUT:
      return new Long(getTimeout());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case REQUESTER:
      return isSetRequester();
    case VISIBILITIES:
      return isSetVisibilities();
    case DATASOURCE_ID:
      return isSetDatasourceId();
    case BUCKET_ID:
      return isSetBucketId();
    case BUCKET_VALUES:
      return isSetBucketValues();
    case HYPOTHESES:
      return isSetHypotheses();
    case TIMEOUT:
      return isSetTimeout();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TByValuesRequest)
      return this.equals((TByValuesRequest)that);
    return false;
  }

  public boolean equals(TByValuesRequest that) {
    if (that == null)
      return false;

    boolean this_present_requester = true && this.isSetRequester();
    boolean that_present_requester = true && that.isSetRequester();
    if (this_present_requester || that_present_requester) {
      if (!(this_present_requester && that_present_requester))
        return false;
      if (!this.requester.equals(that.requester))
        return false;
    }

    boolean this_present_visibilities = true && this.isSetVisibilities();
    boolean that_present_visibilities = true && that.isSetVisibilities();
    if (this_present_visibilities || that_present_visibilities) {
      if (!(this_present_visibilities && that_present_visibilities))
        return false;
      if (!this.visibilities.equals(that.visibilities))
        return false;
    }

    boolean this_present_datasourceId = true && this.isSetDatasourceId();
    boolean that_present_datasourceId = true && that.isSetDatasourceId();
    if (this_present_datasourceId || that_present_datasourceId) {
      if (!(this_present_datasourceId && that_present_datasourceId))
        return false;
      if (!this.datasourceId.equals(that.datasourceId))
        return false;
    }

    boolean this_present_bucketId = true && this.isSetBucketId();
    boolean that_present_bucketId = true && that.isSetBucketId();
    if (this_present_bucketId || that_present_bucketId) {
      if (!(this_present_bucketId && that_present_bucketId))
        return false;
      if (!this.bucketId.equals(that.bucketId))
        return false;
    }

    boolean this_present_bucketValues = true && this.isSetBucketValues();
    boolean that_present_bucketValues = true && that.isSetBucketValues();
    if (this_present_bucketValues || that_present_bucketValues) {
      if (!(this_present_bucketValues && that_present_bucketValues))
        return false;
      if (!this.bucketValues.equals(that.bucketValues))
        return false;
    }

    boolean this_present_hypotheses = true && this.isSetHypotheses();
    boolean that_present_hypotheses = true && that.isSetHypotheses();
    if (this_present_hypotheses || that_present_hypotheses) {
      if (!(this_present_hypotheses && that_present_hypotheses))
        return false;
      if (!this.hypotheses.equals(that.hypotheses))
        return false;
    }

    boolean this_present_timeout = true && this.isSetTimeout();
    boolean that_present_timeout = true && that.isSetTimeout();
    if (this_present_timeout || that_present_timeout) {
      if (!(this_present_timeout && that_present_timeout))
        return false;
      if (this.timeout != that.timeout)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TByValuesRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TByValuesRequest typedOther = (TByValuesRequest)other;

    lastComparison = Boolean.valueOf(isSetRequester()).compareTo(typedOther.isSetRequester());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequester()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requester, typedOther.requester);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVisibilities()).compareTo(typedOther.isSetVisibilities());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVisibilities()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.visibilities, typedOther.visibilities);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDatasourceId()).compareTo(typedOther.isSetDatasourceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDatasourceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datasourceId, typedOther.datasourceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBucketId()).compareTo(typedOther.isSetBucketId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBucketId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bucketId, typedOther.bucketId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBucketValues()).compareTo(typedOther.isSetBucketValues());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBucketValues()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bucketValues, typedOther.bucketValues);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHypotheses()).compareTo(typedOther.isSetHypotheses());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHypotheses()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hypotheses, typedOther.hypotheses);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimeout()).compareTo(typedOther.isSetTimeout());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimeout()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeout, typedOther.timeout);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // REQUESTER
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.requester = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // VISIBILITIES
          if (field.type == org.apache.thrift.protocol.TType.SET) {
            {
              org.apache.thrift.protocol.TSet _set36 = iprot.readSetBegin();
              this.visibilities = new HashSet<String>(2*_set36.size);
              for (int _i37 = 0; _i37 < _set36.size; ++_i37)
              {
                String _elem38;
                _elem38 = iprot.readString();
                this.visibilities.add(_elem38);
              }
              iprot.readSetEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // DATASOURCE_ID
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.datasourceId = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // BUCKET_ID
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.bucketId = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // BUCKET_VALUES
          if (field.type == org.apache.thrift.protocol.TType.SET) {
            {
              org.apache.thrift.protocol.TSet _set39 = iprot.readSetBegin();
              this.bucketValues = new HashSet<String>(2*_set39.size);
              for (int _i40 = 0; _i40 < _set39.size; ++_i40)
              {
                String _elem41;
                _elem41 = iprot.readString();
                this.bucketValues.add(_elem41);
              }
              iprot.readSetEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // HYPOTHESES
          if (field.type == org.apache.thrift.protocol.TType.LIST) {
            {
              org.apache.thrift.protocol.TList _list42 = iprot.readListBegin();
              this.hypotheses = new ArrayList<THypothesis>(_list42.size);
              for (int _i43 = 0; _i43 < _list42.size; ++_i43)
              {
                THypothesis _elem44;
                _elem44 = new THypothesis();
                _elem44.read(iprot);
                this.hypotheses.add(_elem44);
              }
              iprot.readListEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // TIMEOUT
          if (field.type == org.apache.thrift.protocol.TType.I64) {
            this.timeout = iprot.readI64();
            setTimeoutIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.requester != null) {
      oprot.writeFieldBegin(REQUESTER_FIELD_DESC);
      oprot.writeString(this.requester);
      oprot.writeFieldEnd();
    }
    if (this.visibilities != null) {
      oprot.writeFieldBegin(VISIBILITIES_FIELD_DESC);
      {
        oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, this.visibilities.size()));
        for (String _iter45 : this.visibilities)
        {
          oprot.writeString(_iter45);
        }
        oprot.writeSetEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.datasourceId != null) {
      oprot.writeFieldBegin(DATASOURCE_ID_FIELD_DESC);
      oprot.writeString(this.datasourceId);
      oprot.writeFieldEnd();
    }
    if (this.bucketId != null) {
      oprot.writeFieldBegin(BUCKET_ID_FIELD_DESC);
      oprot.writeString(this.bucketId);
      oprot.writeFieldEnd();
    }
    if (this.bucketValues != null) {
      oprot.writeFieldBegin(BUCKET_VALUES_FIELD_DESC);
      {
        oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, this.bucketValues.size()));
        for (String _iter46 : this.bucketValues)
        {
          oprot.writeString(_iter46);
        }
        oprot.writeSetEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.hypotheses != null) {
      if (isSetHypotheses()) {
        oprot.writeFieldBegin(HYPOTHESES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, this.hypotheses.size()));
          for (THypothesis _iter47 : this.hypotheses)
          {
            _iter47.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    if (isSetTimeout()) {
      oprot.writeFieldBegin(TIMEOUT_FIELD_DESC);
      oprot.writeI64(this.timeout);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TByValuesRequest(");
    boolean first = true;

    sb.append("requester:");
    if (this.requester == null) {
      sb.append("null");
    } else {
      sb.append(this.requester);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("visibilities:");
    if (this.visibilities == null) {
      sb.append("null");
    } else {
      sb.append(this.visibilities);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("datasourceId:");
    if (this.datasourceId == null) {
      sb.append("null");
    } else {
      sb.append(this.datasourceId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bucketId:");
    if (this.bucketId == null) {
      sb.append("null");
    } else {
      sb.append(this.bucketId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bucketValues:");
    if (this.bucketValues == null) {
      sb.append("null");
    } else {
      sb.append(this.bucketValues);
    }
    first = false;
    if (isSetHypotheses()) {
      if (!first) sb.append(", ");
      sb.append("hypotheses:");
      if (this.hypotheses == null) {
        sb.append("null");
      } else {
        sb.append(this.hypotheses);
      }
      first = false;
    }
    if (isSetTimeout()) {
      if (!first) sb.append(", ");
      sb.append("timeout:");
      sb.append(this.timeout);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

