/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com._42six.amino.common.thrift;

import java.util.*;

public class TFeatureMetadata implements org.apache.thrift.TBase<TFeatureMetadata, TFeatureMetadata._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TFeatureMetadata");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField VISIBILITY_FIELD_DESC = new org.apache.thrift.protocol.TField("visibility", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField BT_VISIBILITY_FIELD_DESC = new org.apache.thrift.protocol.TField("btVisibility", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField API_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("api_version", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField JOB_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("job_version", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField FM_NAMESPACE_FIELD_DESC = new org.apache.thrift.protocol.TField("fmNamespace", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField DATASOURCES_FIELD_DESC = new org.apache.thrift.protocol.TField("datasources", org.apache.thrift.protocol.TType.SET, (short)10);
  private static final org.apache.thrift.protocol.TField MIN_FIELD_DESC = new org.apache.thrift.protocol.TField("min", org.apache.thrift.protocol.TType.MAP, (short)11);
  private static final org.apache.thrift.protocol.TField MAX_FIELD_DESC = new org.apache.thrift.protocol.TField("max", org.apache.thrift.protocol.TType.MAP, (short)12);
  private static final org.apache.thrift.protocol.TField ALLOWED_VALUES_FIELD_DESC = new org.apache.thrift.protocol.TField("allowedValues", org.apache.thrift.protocol.TType.SET, (short)13);
  private static final org.apache.thrift.protocol.TField FEATURE_FACT_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("featureFactCount", org.apache.thrift.protocol.TType.MAP, (short)14);
  private static final org.apache.thrift.protocol.TField BUCKET_VALUE_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("bucketValueCount", org.apache.thrift.protocol.TType.MAP, (short)15);
  private static final org.apache.thrift.protocol.TField AVERAGES_FIELD_DESC = new org.apache.thrift.protocol.TField("averages", org.apache.thrift.protocol.TType.MAP, (short)16);
  private static final org.apache.thrift.protocol.TField STANDARD_DEVIATIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("standardDeviations", org.apache.thrift.protocol.TType.MAP, (short)17);
  private static final org.apache.thrift.protocol.TField RATIO_BINS_FIELD_DESC = new org.apache.thrift.protocol.TField("ratioBins", org.apache.thrift.protocol.TType.MAP, (short)18);
  private static final org.apache.thrift.protocol.TField TOP_N_FIELD_DESC = new org.apache.thrift.protocol.TField("topN", org.apache.thrift.protocol.TType.MAP, (short)19);

  public String id;
  /**
   * Name of feature
   */
  public String name;
  /**
   * Visibility of feature
   */
  public String visibility;
  /**
   * The Accumulo columnVisibility string
   */
  public String btVisibility;
  /**
   * API version
   */
  public String api_version;
  /**
   * Job version
   */
  public String job_version;
  /**
   * Description of feature
   */
  public String description;
  /**
   * Namespace
   */
  public String fmNamespace;
  /**
   * Feature type
   */
  public String type;
  /**
   * The Datasources that the feature is associated with
   */
  public Set<String> datasources;
  /**
   * Minimum value (for interval features)
   */
  public Map<String,Double> min;
  /**
   * Maximum value (for interval features)
   */
  public Map<String,Double> max;
  /**
   * Sorted set of allowed values (for nominal features)
   */
  public Set<String> allowedValues;
  /**
   * Total number of feature facts that were found in this feature
   */
  public Map<String,Long> featureFactCount;
  /**
   * Total number of bucket values that were found in this feature
   */
  public Map<String,Long> bucketValueCount;
  /**
   * Average ratio value for each bucket for this feature
   */
  public Map<String,Double> averages;
  /**
   * Standard deviation of the ratio values for each bucket for this feature
   */
  public Map<String,Double> standardDeviations;
  public Map<String,List<Map<String,Double>>> ratioBins;
  /**
   * The top N nominal features for each bucket for this feature, stored in the json array like "featureFact:count"
   */
  public Map<String,List<String>> topN;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    /**
     * Name of feature
     */
    NAME((short)2, "name"),
    /**
     * Visibility of feature
     */
    VISIBILITY((short)3, "visibility"),
    /**
     * The Accumulo columnVisibility string
     */
    BT_VISIBILITY((short)4, "btVisibility"),
    /**
     * API version
     */
    API_VERSION((short)5, "api_version"),
    /**
     * Job version
     */
    JOB_VERSION((short)6, "job_version"),
    /**
     * Description of feature
     */
    DESCRIPTION((short)7, "description"),
    /**
     * Namespace
     */
    FM_NAMESPACE((short)8, "fmNamespace"),
    /**
     * Feature type
     */
    TYPE((short)9, "type"),
    /**
     * The Datasources that the feature is associated with
     */
    DATASOURCES((short)10, "datasources"),
    /**
     * Minimum value (for interval features)
     */
    MIN((short)11, "min"),
    /**
     * Maximum value (for interval features)
     */
    MAX((short)12, "max"),
    /**
     * Sorted set of allowed values (for nominal features)
     */
    ALLOWED_VALUES((short)13, "allowedValues"),
    /**
     * Total number of feature facts that were found in this feature
     */
    FEATURE_FACT_COUNT((short)14, "featureFactCount"),
    /**
     * Total number of bucket values that were found in this feature
     */
    BUCKET_VALUE_COUNT((short)15, "bucketValueCount"),
    /**
     * Average ratio value for each bucket for this feature
     */
    AVERAGES((short)16, "averages"),
    /**
     * Standard deviation of the ratio values for each bucket for this feature
     */
    STANDARD_DEVIATIONS((short)17, "standardDeviations"),
    RATIO_BINS((short)18, "ratioBins"),
    /**
     * The top N nominal features for each bucket for this feature, stored in the json array like "featureFact:count"
     */
    TOP_N((short)19, "topN");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // NAME
          return NAME;
        case 3: // VISIBILITY
          return VISIBILITY;
        case 4: // BT_VISIBILITY
          return BT_VISIBILITY;
        case 5: // API_VERSION
          return API_VERSION;
        case 6: // JOB_VERSION
          return JOB_VERSION;
        case 7: // DESCRIPTION
          return DESCRIPTION;
        case 8: // FM_NAMESPACE
          return FM_NAMESPACE;
        case 9: // TYPE
          return TYPE;
        case 10: // DATASOURCES
          return DATASOURCES;
        case 11: // MIN
          return MIN;
        case 12: // MAX
          return MAX;
        case 13: // ALLOWED_VALUES
          return ALLOWED_VALUES;
        case 14: // FEATURE_FACT_COUNT
          return FEATURE_FACT_COUNT;
        case 15: // BUCKET_VALUE_COUNT
          return BUCKET_VALUE_COUNT;
        case 16: // AVERAGES
          return AVERAGES;
        case 17: // STANDARD_DEVIATIONS
          return STANDARD_DEVIATIONS;
        case 18: // RATIO_BINS
          return RATIO_BINS;
        case 19: // TOP_N
          return TOP_N;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VISIBILITY, new org.apache.thrift.meta_data.FieldMetaData("visibility", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BT_VISIBILITY, new org.apache.thrift.meta_data.FieldMetaData("btVisibility", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.API_VERSION, new org.apache.thrift.meta_data.FieldMetaData("api_version", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.JOB_VERSION, new org.apache.thrift.meta_data.FieldMetaData("job_version", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FM_NAMESPACE, new org.apache.thrift.meta_data.FieldMetaData("fmNamespace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATASOURCES, new org.apache.thrift.meta_data.FieldMetaData("datasources", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.MIN, new org.apache.thrift.meta_data.FieldMetaData("min", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.MAX, new org.apache.thrift.meta_data.FieldMetaData("max", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.ALLOWED_VALUES, new org.apache.thrift.meta_data.FieldMetaData("allowedValues", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.FEATURE_FACT_COUNT, new org.apache.thrift.meta_data.FieldMetaData("featureFactCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.BUCKET_VALUE_COUNT, new org.apache.thrift.meta_data.FieldMetaData("bucketValueCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.AVERAGES, new org.apache.thrift.meta_data.FieldMetaData("averages", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.STANDARD_DEVIATIONS, new org.apache.thrift.meta_data.FieldMetaData("standardDeviations", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.RATIO_BINS, new org.apache.thrift.meta_data.FieldMetaData("ratioBins", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))))));
    tmpMap.put(_Fields.TOP_N, new org.apache.thrift.meta_data.FieldMetaData("topN", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TFeatureMetadata.class, metaDataMap);
  }

  public TFeatureMetadata() {
    this.job_version = "0.2";

  }

  public TFeatureMetadata(
    String id,
    String name,
    String visibility,
    String btVisibility,
    String api_version,
    String job_version,
    String description,
    String fmNamespace,
    String type,
    Set<String> datasources,
    Map<String,Double> min,
    Map<String,Double> max,
    Set<String> allowedValues,
    Map<String,Long> featureFactCount,
    Map<String,Long> bucketValueCount,
    Map<String,Double> averages,
    Map<String,Double> standardDeviations,
    Map<String,List<Map<String,Double>>> ratioBins,
    Map<String,List<String>> topN)
  {
    this();
    this.id = id;
    this.name = name;
    this.visibility = visibility;
    this.btVisibility = btVisibility;
    this.api_version = api_version;
    this.job_version = job_version;
    this.description = description;
    this.fmNamespace = fmNamespace;
    this.type = type;
    this.datasources = datasources;
    this.min = min;
    this.max = max;
    this.allowedValues = allowedValues;
    this.featureFactCount = featureFactCount;
    this.bucketValueCount = bucketValueCount;
    this.averages = averages;
    this.standardDeviations = standardDeviations;
    this.ratioBins = ratioBins;
    this.topN = topN;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TFeatureMetadata(TFeatureMetadata other) {
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetVisibility()) {
      this.visibility = other.visibility;
    }
    if (other.isSetBtVisibility()) {
      this.btVisibility = other.btVisibility;
    }
    if (other.isSetApi_version()) {
      this.api_version = other.api_version;
    }
    if (other.isSetJob_version()) {
      this.job_version = other.job_version;
    }
    if (other.isSetDescription()) {
      this.description = other.description;
    }
    if (other.isSetFmNamespace()) {
      this.fmNamespace = other.fmNamespace;
    }
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetDatasources()) {
      Set<String> __this__datasources = new HashSet<String>();
      for (String other_element : other.datasources) {
        __this__datasources.add(other_element);
      }
      this.datasources = __this__datasources;
    }
    if (other.isSetMin()) {
      Map<String,Double> __this__min = new HashMap<String,Double>();
      for (Map.Entry<String, Double> other_element : other.min.entrySet()) {

        String other_element_key = other_element.getKey();
        Double other_element_value = other_element.getValue();

        String __this__min_copy_key = other_element_key;

        Double __this__min_copy_value = other_element_value;

        __this__min.put(__this__min_copy_key, __this__min_copy_value);
      }
      this.min = __this__min;
    }
    if (other.isSetMax()) {
      Map<String,Double> __this__max = new HashMap<String,Double>();
      for (Map.Entry<String, Double> other_element : other.max.entrySet()) {

        String other_element_key = other_element.getKey();
        Double other_element_value = other_element.getValue();

        String __this__max_copy_key = other_element_key;

        Double __this__max_copy_value = other_element_value;

        __this__max.put(__this__max_copy_key, __this__max_copy_value);
      }
      this.max = __this__max;
    }
    if (other.isSetAllowedValues()) {
      Set<String> __this__allowedValues = new HashSet<String>();
      for (String other_element : other.allowedValues) {
        __this__allowedValues.add(other_element);
      }
      this.allowedValues = __this__allowedValues;
    }
    if (other.isSetFeatureFactCount()) {
      Map<String,Long> __this__featureFactCount = new HashMap<String,Long>();
      for (Map.Entry<String, Long> other_element : other.featureFactCount.entrySet()) {

        String other_element_key = other_element.getKey();
        Long other_element_value = other_element.getValue();

        String __this__featureFactCount_copy_key = other_element_key;

        Long __this__featureFactCount_copy_value = other_element_value;

        __this__featureFactCount.put(__this__featureFactCount_copy_key, __this__featureFactCount_copy_value);
      }
      this.featureFactCount = __this__featureFactCount;
    }
    if (other.isSetBucketValueCount()) {
      Map<String,Long> __this__bucketValueCount = new HashMap<String,Long>();
      for (Map.Entry<String, Long> other_element : other.bucketValueCount.entrySet()) {

        String other_element_key = other_element.getKey();
        Long other_element_value = other_element.getValue();

        String __this__bucketValueCount_copy_key = other_element_key;

        Long __this__bucketValueCount_copy_value = other_element_value;

        __this__bucketValueCount.put(__this__bucketValueCount_copy_key, __this__bucketValueCount_copy_value);
      }
      this.bucketValueCount = __this__bucketValueCount;
    }
    if (other.isSetAverages()) {
      Map<String,Double> __this__averages = new HashMap<String,Double>();
      for (Map.Entry<String, Double> other_element : other.averages.entrySet()) {

        String other_element_key = other_element.getKey();
        Double other_element_value = other_element.getValue();

        String __this__averages_copy_key = other_element_key;

        Double __this__averages_copy_value = other_element_value;

        __this__averages.put(__this__averages_copy_key, __this__averages_copy_value);
      }
      this.averages = __this__averages;
    }
    if (other.isSetStandardDeviations()) {
      Map<String,Double> __this__standardDeviations = new HashMap<String,Double>();
      for (Map.Entry<String, Double> other_element : other.standardDeviations.entrySet()) {

        String other_element_key = other_element.getKey();
        Double other_element_value = other_element.getValue();

        String __this__standardDeviations_copy_key = other_element_key;

        Double __this__standardDeviations_copy_value = other_element_value;

        __this__standardDeviations.put(__this__standardDeviations_copy_key, __this__standardDeviations_copy_value);
      }
      this.standardDeviations = __this__standardDeviations;
    }
    if (other.isSetRatioBins()) {
      Map<String,List<Map<String,Double>>> __this__ratioBins = new HashMap<String,List<Map<String,Double>>>();
      for (Map.Entry<String, List<Map<String,Double>>> other_element : other.ratioBins.entrySet()) {

        String other_element_key = other_element.getKey();
        List<Map<String,Double>> other_element_value = other_element.getValue();

        String __this__ratioBins_copy_key = other_element_key;

        List<Map<String,Double>> __this__ratioBins_copy_value = new ArrayList<Map<String,Double>>();
        for (Map<String,Double> other_element_value_element : other_element_value) {
          Map<String,Double> __this__ratioBins_copy_value_copy = new HashMap<String,Double>();
          for (Map.Entry<String, Double> other_element_value_element_element : other_element_value_element.entrySet()) {

            String other_element_value_element_element_key = other_element_value_element_element.getKey();
            Double other_element_value_element_element_value = other_element_value_element_element.getValue();

            String __this__ratioBins_copy_value_copy_copy_key = other_element_value_element_element_key;

            Double __this__ratioBins_copy_value_copy_copy_value = other_element_value_element_element_value;

            __this__ratioBins_copy_value_copy.put(__this__ratioBins_copy_value_copy_copy_key, __this__ratioBins_copy_value_copy_copy_value);
          }
          __this__ratioBins_copy_value.add(__this__ratioBins_copy_value_copy);
        }

        __this__ratioBins.put(__this__ratioBins_copy_key, __this__ratioBins_copy_value);
      }
      this.ratioBins = __this__ratioBins;
    }
    if (other.isSetTopN()) {
      Map<String,List<String>> __this__topN = new HashMap<String,List<String>>();
      for (Map.Entry<String, List<String>> other_element : other.topN.entrySet()) {

        String other_element_key = other_element.getKey();
        List<String> other_element_value = other_element.getValue();

        String __this__topN_copy_key = other_element_key;

        List<String> __this__topN_copy_value = new ArrayList<String>();
        for (String other_element_value_element : other_element_value) {
          __this__topN_copy_value.add(other_element_value_element);
        }

        __this__topN.put(__this__topN_copy_key, __this__topN_copy_value);
      }
      this.topN = __this__topN;
    }
  }

  public TFeatureMetadata deepCopy() {
    return new TFeatureMetadata(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.name = null;
    this.visibility = null;
    this.btVisibility = null;
    this.api_version = null;
    this.job_version = "0.2";

    this.description = null;
    this.fmNamespace = null;
    this.type = null;
    this.datasources = null;
    this.min = null;
    this.max = null;
    this.allowedValues = null;
    this.featureFactCount = null;
    this.bucketValueCount = null;
    this.averages = null;
    this.standardDeviations = null;
    this.ratioBins = null;
    this.topN = null;
  }

  public String getId() {
    return this.id;
  }

  public TFeatureMetadata setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  /**
   * Name of feature
   */
  public String getName() {
    return this.name;
  }

  /**
   * Name of feature
   */
  public TFeatureMetadata setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  /**
   * Visibility of feature
   */
  public String getVisibility() {
    return this.visibility;
  }

  /**
   * Visibility of feature
   */
  public TFeatureMetadata setVisibility(String visibility) {
    this.visibility = visibility;
    return this;
  }

  public void unsetVisibility() {
    this.visibility = null;
  }

  /** Returns true if field visibility is set (has been assigned a value) and false otherwise */
  public boolean isSetVisibility() {
    return this.visibility != null;
  }

  public void setVisibilityIsSet(boolean value) {
    if (!value) {
      this.visibility = null;
    }
  }

  /**
   * The Accumulo columnVisibility string
   */
  public String getBtVisibility() {
    return this.btVisibility;
  }

  /**
   * The Accumulo columnVisibility string
   */
  public TFeatureMetadata setBtVisibility(String btVisibility) {
    this.btVisibility = btVisibility;
    return this;
  }

  public void unsetBtVisibility() {
    this.btVisibility = null;
  }

  /** Returns true if field btVisibility is set (has been assigned a value) and false otherwise */
  public boolean isSetBtVisibility() {
    return this.btVisibility != null;
  }

  public void setBtVisibilityIsSet(boolean value) {
    if (!value) {
      this.btVisibility = null;
    }
  }

  /**
   * API version
   */
  public String getApi_version() {
    return this.api_version;
  }

  /**
   * API version
   */
  public TFeatureMetadata setApi_version(String api_version) {
    this.api_version = api_version;
    return this;
  }

  public void unsetApi_version() {
    this.api_version = null;
  }

  /** Returns true if field api_version is set (has been assigned a value) and false otherwise */
  public boolean isSetApi_version() {
    return this.api_version != null;
  }

  public void setApi_versionIsSet(boolean value) {
    if (!value) {
      this.api_version = null;
    }
  }

  /**
   * Job version
   */
  public String getJob_version() {
    return this.job_version;
  }

  /**
   * Job version
   */
  public TFeatureMetadata setJob_version(String job_version) {
    this.job_version = job_version;
    return this;
  }

  public void unsetJob_version() {
    this.job_version = null;
  }

  /** Returns true if field job_version is set (has been assigned a value) and false otherwise */
  public boolean isSetJob_version() {
    return this.job_version != null;
  }

  public void setJob_versionIsSet(boolean value) {
    if (!value) {
      this.job_version = null;
    }
  }

  /**
   * Description of feature
   */
  public String getDescription() {
    return this.description;
  }

  /**
   * Description of feature
   */
  public TFeatureMetadata setDescription(String description) {
    this.description = description;
    return this;
  }

  public void unsetDescription() {
    this.description = null;
  }

  /** Returns true if field description is set (has been assigned a value) and false otherwise */
  public boolean isSetDescription() {
    return this.description != null;
  }

  public void setDescriptionIsSet(boolean value) {
    if (!value) {
      this.description = null;
    }
  }

  /**
   * Namespace
   */
  public String getFmNamespace() {
    return this.fmNamespace;
  }

  /**
   * Namespace
   */
  public TFeatureMetadata setFmNamespace(String fmNamespace) {
    this.fmNamespace = fmNamespace;
    return this;
  }

  public void unsetFmNamespace() {
    this.fmNamespace = null;
  }

  /** Returns true if field fmNamespace is set (has been assigned a value) and false otherwise */
  public boolean isSetFmNamespace() {
    return this.fmNamespace != null;
  }

  public void setFmNamespaceIsSet(boolean value) {
    if (!value) {
      this.fmNamespace = null;
    }
  }

  /**
   * Feature type
   */
  public String getType() {
    return this.type;
  }

  /**
   * Feature type
   */
  public TFeatureMetadata setType(String type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public int getDatasourcesSize() {
    return (this.datasources == null) ? 0 : this.datasources.size();
  }

  public java.util.Iterator<String> getDatasourcesIterator() {
    return (this.datasources == null) ? null : this.datasources.iterator();
  }

  public void addToDatasources(String elem) {
    if (this.datasources == null) {
      this.datasources = new HashSet<String>();
    }
    this.datasources.add(elem);
  }

  /**
   * The Datasources that the feature is associated with
   */
  public Set<String> getDatasources() {
    return this.datasources;
  }

  /**
   * The Datasources that the feature is associated with
   */
  public TFeatureMetadata setDatasources(Set<String> datasources) {
    this.datasources = datasources;
    return this;
  }

  public void unsetDatasources() {
    this.datasources = null;
  }

  /** Returns true if field datasources is set (has been assigned a value) and false otherwise */
  public boolean isSetDatasources() {
    return this.datasources != null;
  }

  public void setDatasourcesIsSet(boolean value) {
    if (!value) {
      this.datasources = null;
    }
  }

  public int getMinSize() {
    return (this.min == null) ? 0 : this.min.size();
  }

  public void putToMin(String key, double val) {
    if (this.min == null) {
      this.min = new HashMap<String,Double>();
    }
    this.min.put(key, val);
  }

  /**
   * Minimum value (for interval features)
   */
  public Map<String,Double> getMin() {
    return this.min;
  }

  /**
   * Minimum value (for interval features)
   */
  public TFeatureMetadata setMin(Map<String,Double> min) {
    this.min = min;
    return this;
  }

  public void unsetMin() {
    this.min = null;
  }

  /** Returns true if field min is set (has been assigned a value) and false otherwise */
  public boolean isSetMin() {
    return this.min != null;
  }

  public void setMinIsSet(boolean value) {
    if (!value) {
      this.min = null;
    }
  }

  public int getMaxSize() {
    return (this.max == null) ? 0 : this.max.size();
  }

  public void putToMax(String key, double val) {
    if (this.max == null) {
      this.max = new HashMap<String,Double>();
    }
    this.max.put(key, val);
  }

  /**
   * Maximum value (for interval features)
   */
  public Map<String,Double> getMax() {
    return this.max;
  }

  /**
   * Maximum value (for interval features)
   */
  public TFeatureMetadata setMax(Map<String,Double> max) {
    this.max = max;
    return this;
  }

  public void unsetMax() {
    this.max = null;
  }

  /** Returns true if field max is set (has been assigned a value) and false otherwise */
  public boolean isSetMax() {
    return this.max != null;
  }

  public void setMaxIsSet(boolean value) {
    if (!value) {
      this.max = null;
    }
  }

  public int getAllowedValuesSize() {
    return (this.allowedValues == null) ? 0 : this.allowedValues.size();
  }

  public java.util.Iterator<String> getAllowedValuesIterator() {
    return (this.allowedValues == null) ? null : this.allowedValues.iterator();
  }

  public void addToAllowedValues(String elem) {
    if (this.allowedValues == null) {
      this.allowedValues = new HashSet<String>();
    }
    this.allowedValues.add(elem);
  }

  /**
   * Sorted set of allowed values (for nominal features)
   */
  public Set<String> getAllowedValues() {
    return this.allowedValues;
  }

  /**
   * Sorted set of allowed values (for nominal features)
   */
  public TFeatureMetadata setAllowedValues(Set<String> allowedValues) {
    this.allowedValues = allowedValues;
    return this;
  }

  public void unsetAllowedValues() {
    this.allowedValues = null;
  }

  /** Returns true if field allowedValues is set (has been assigned a value) and false otherwise */
  public boolean isSetAllowedValues() {
    return this.allowedValues != null;
  }

  public void setAllowedValuesIsSet(boolean value) {
    if (!value) {
      this.allowedValues = null;
    }
  }

  public int getFeatureFactCountSize() {
    return (this.featureFactCount == null) ? 0 : this.featureFactCount.size();
  }

  public void putToFeatureFactCount(String key, long val) {
    if (this.featureFactCount == null) {
      this.featureFactCount = new HashMap<String,Long>();
    }
    this.featureFactCount.put(key, val);
  }

  /**
   * Total number of feature facts that were found in this feature
   */
  public Map<String,Long> getFeatureFactCount() {
    return this.featureFactCount;
  }

  /**
   * Total number of feature facts that were found in this feature
   */
  public TFeatureMetadata setFeatureFactCount(Map<String,Long> featureFactCount) {
    this.featureFactCount = featureFactCount;
    return this;
  }

  public void unsetFeatureFactCount() {
    this.featureFactCount = null;
  }

  /** Returns true if field featureFactCount is set (has been assigned a value) and false otherwise */
  public boolean isSetFeatureFactCount() {
    return this.featureFactCount != null;
  }

  public void setFeatureFactCountIsSet(boolean value) {
    if (!value) {
      this.featureFactCount = null;
    }
  }

  public int getBucketValueCountSize() {
    return (this.bucketValueCount == null) ? 0 : this.bucketValueCount.size();
  }

  public void putToBucketValueCount(String key, long val) {
    if (this.bucketValueCount == null) {
      this.bucketValueCount = new HashMap<String,Long>();
    }
    this.bucketValueCount.put(key, val);
  }

  /**
   * Total number of bucket values that were found in this feature
   */
  public Map<String,Long> getBucketValueCount() {
    return this.bucketValueCount;
  }

  /**
   * Total number of bucket values that were found in this feature
   */
  public TFeatureMetadata setBucketValueCount(Map<String,Long> bucketValueCount) {
    this.bucketValueCount = bucketValueCount;
    return this;
  }

  public void unsetBucketValueCount() {
    this.bucketValueCount = null;
  }

  /** Returns true if field bucketValueCount is set (has been assigned a value) and false otherwise */
  public boolean isSetBucketValueCount() {
    return this.bucketValueCount != null;
  }

  public void setBucketValueCountIsSet(boolean value) {
    if (!value) {
      this.bucketValueCount = null;
    }
  }

  public int getAveragesSize() {
    return (this.averages == null) ? 0 : this.averages.size();
  }

  public void putToAverages(String key, double val) {
    if (this.averages == null) {
      this.averages = new HashMap<String,Double>();
    }
    this.averages.put(key, val);
  }

  /**
   * Average ratio value for each bucket for this feature
   */
  public Map<String,Double> getAverages() {
    return this.averages;
  }

  /**
   * Average ratio value for each bucket for this feature
   */
  public TFeatureMetadata setAverages(Map<String,Double> averages) {
    this.averages = averages;
    return this;
  }

  public void unsetAverages() {
    this.averages = null;
  }

  /** Returns true if field averages is set (has been assigned a value) and false otherwise */
  public boolean isSetAverages() {
    return this.averages != null;
  }

  public void setAveragesIsSet(boolean value) {
    if (!value) {
      this.averages = null;
    }
  }

  public int getStandardDeviationsSize() {
    return (this.standardDeviations == null) ? 0 : this.standardDeviations.size();
  }

  public void putToStandardDeviations(String key, double val) {
    if (this.standardDeviations == null) {
      this.standardDeviations = new HashMap<String,Double>();
    }
    this.standardDeviations.put(key, val);
  }

  /**
   * Standard deviation of the ratio values for each bucket for this feature
   */
  public Map<String,Double> getStandardDeviations() {
    return this.standardDeviations;
  }

  /**
   * Standard deviation of the ratio values for each bucket for this feature
   */
  public TFeatureMetadata setStandardDeviations(Map<String,Double> standardDeviations) {
    this.standardDeviations = standardDeviations;
    return this;
  }

  public void unsetStandardDeviations() {
    this.standardDeviations = null;
  }

  /** Returns true if field standardDeviations is set (has been assigned a value) and false otherwise */
  public boolean isSetStandardDeviations() {
    return this.standardDeviations != null;
  }

  public void setStandardDeviationsIsSet(boolean value) {
    if (!value) {
      this.standardDeviations = null;
    }
  }

  public int getRatioBinsSize() {
    return (this.ratioBins == null) ? 0 : this.ratioBins.size();
  }

  public void putToRatioBins(String key, List<Map<String,Double>> val) {
    if (this.ratioBins == null) {
      this.ratioBins = new HashMap<String,List<Map<String,Double>>>();
    }
    this.ratioBins.put(key, val);
  }

  public Map<String,List<Map<String,Double>>> getRatioBins() {
    return this.ratioBins;
  }

  public TFeatureMetadata setRatioBins(Map<String,List<Map<String,Double>>> ratioBins) {
    this.ratioBins = ratioBins;
    return this;
  }

  public void unsetRatioBins() {
    this.ratioBins = null;
  }

  /** Returns true if field ratioBins is set (has been assigned a value) and false otherwise */
  public boolean isSetRatioBins() {
    return this.ratioBins != null;
  }

  public void setRatioBinsIsSet(boolean value) {
    if (!value) {
      this.ratioBins = null;
    }
  }

  public int getTopNSize() {
    return (this.topN == null) ? 0 : this.topN.size();
  }

  public void putToTopN(String key, List<String> val) {
    if (this.topN == null) {
      this.topN = new HashMap<String,List<String>>();
    }
    this.topN.put(key, val);
  }

  /**
   * The top N nominal features for each bucket for this feature, stored in the json array like "featureFact:count"
   */
  public Map<String,List<String>> getTopN() {
    return this.topN;
  }

  /**
   * The top N nominal features for each bucket for this feature, stored in the json array like "featureFact:count"
   */
  public TFeatureMetadata setTopN(Map<String,List<String>> topN) {
    this.topN = topN;
    return this;
  }

  public void unsetTopN() {
    this.topN = null;
  }

  /** Returns true if field topN is set (has been assigned a value) and false otherwise */
  public boolean isSetTopN() {
    return this.topN != null;
  }

  public void setTopNIsSet(boolean value) {
    if (!value) {
      this.topN = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case VISIBILITY:
      if (value == null) {
        unsetVisibility();
      } else {
        setVisibility((String)value);
      }
      break;

    case BT_VISIBILITY:
      if (value == null) {
        unsetBtVisibility();
      } else {
        setBtVisibility((String)value);
      }
      break;

    case API_VERSION:
      if (value == null) {
        unsetApi_version();
      } else {
        setApi_version((String)value);
      }
      break;

    case JOB_VERSION:
      if (value == null) {
        unsetJob_version();
      } else {
        setJob_version((String)value);
      }
      break;

    case DESCRIPTION:
      if (value == null) {
        unsetDescription();
      } else {
        setDescription((String)value);
      }
      break;

    case FM_NAMESPACE:
      if (value == null) {
        unsetFmNamespace();
      } else {
        setFmNamespace((String)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((String)value);
      }
      break;

    case DATASOURCES:
      if (value == null) {
        unsetDatasources();
      } else {
        setDatasources((Set<String>)value);
      }
      break;

    case MIN:
      if (value == null) {
        unsetMin();
      } else {
        setMin((Map<String,Double>)value);
      }
      break;

    case MAX:
      if (value == null) {
        unsetMax();
      } else {
        setMax((Map<String,Double>)value);
      }
      break;

    case ALLOWED_VALUES:
      if (value == null) {
        unsetAllowedValues();
      } else {
        setAllowedValues((Set<String>)value);
      }
      break;

    case FEATURE_FACT_COUNT:
      if (value == null) {
        unsetFeatureFactCount();
      } else {
        setFeatureFactCount((Map<String,Long>)value);
      }
      break;

    case BUCKET_VALUE_COUNT:
      if (value == null) {
        unsetBucketValueCount();
      } else {
        setBucketValueCount((Map<String,Long>)value);
      }
      break;

    case AVERAGES:
      if (value == null) {
        unsetAverages();
      } else {
        setAverages((Map<String,Double>)value);
      }
      break;

    case STANDARD_DEVIATIONS:
      if (value == null) {
        unsetStandardDeviations();
      } else {
        setStandardDeviations((Map<String,Double>)value);
      }
      break;

    case RATIO_BINS:
      if (value == null) {
        unsetRatioBins();
      } else {
        setRatioBins((Map<String,List<Map<String,Double>>>)value);
      }
      break;

    case TOP_N:
      if (value == null) {
        unsetTopN();
      } else {
        setTopN((Map<String,List<String>>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case NAME:
      return getName();

    case VISIBILITY:
      return getVisibility();

    case BT_VISIBILITY:
      return getBtVisibility();

    case API_VERSION:
      return getApi_version();

    case JOB_VERSION:
      return getJob_version();

    case DESCRIPTION:
      return getDescription();

    case FM_NAMESPACE:
      return getFmNamespace();

    case TYPE:
      return getType();

    case DATASOURCES:
      return getDatasources();

    case MIN:
      return getMin();

    case MAX:
      return getMax();

    case ALLOWED_VALUES:
      return getAllowedValues();

    case FEATURE_FACT_COUNT:
      return getFeatureFactCount();

    case BUCKET_VALUE_COUNT:
      return getBucketValueCount();

    case AVERAGES:
      return getAverages();

    case STANDARD_DEVIATIONS:
      return getStandardDeviations();

    case RATIO_BINS:
      return getRatioBins();

    case TOP_N:
      return getTopN();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case NAME:
      return isSetName();
    case VISIBILITY:
      return isSetVisibility();
    case BT_VISIBILITY:
      return isSetBtVisibility();
    case API_VERSION:
      return isSetApi_version();
    case JOB_VERSION:
      return isSetJob_version();
    case DESCRIPTION:
      return isSetDescription();
    case FM_NAMESPACE:
      return isSetFmNamespace();
    case TYPE:
      return isSetType();
    case DATASOURCES:
      return isSetDatasources();
    case MIN:
      return isSetMin();
    case MAX:
      return isSetMax();
    case ALLOWED_VALUES:
      return isSetAllowedValues();
    case FEATURE_FACT_COUNT:
      return isSetFeatureFactCount();
    case BUCKET_VALUE_COUNT:
      return isSetBucketValueCount();
    case AVERAGES:
      return isSetAverages();
    case STANDARD_DEVIATIONS:
      return isSetStandardDeviations();
    case RATIO_BINS:
      return isSetRatioBins();
    case TOP_N:
      return isSetTopN();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TFeatureMetadata)
      return this.equals((TFeatureMetadata)that);
    return false;
  }

  public boolean equals(TFeatureMetadata that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_visibility = true && this.isSetVisibility();
    boolean that_present_visibility = true && that.isSetVisibility();
    if (this_present_visibility || that_present_visibility) {
      if (!(this_present_visibility && that_present_visibility))
        return false;
      if (!this.visibility.equals(that.visibility))
        return false;
    }

    boolean this_present_btVisibility = true && this.isSetBtVisibility();
    boolean that_present_btVisibility = true && that.isSetBtVisibility();
    if (this_present_btVisibility || that_present_btVisibility) {
      if (!(this_present_btVisibility && that_present_btVisibility))
        return false;
      if (!this.btVisibility.equals(that.btVisibility))
        return false;
    }

    boolean this_present_api_version = true && this.isSetApi_version();
    boolean that_present_api_version = true && that.isSetApi_version();
    if (this_present_api_version || that_present_api_version) {
      if (!(this_present_api_version && that_present_api_version))
        return false;
      if (!this.api_version.equals(that.api_version))
        return false;
    }

    boolean this_present_job_version = true && this.isSetJob_version();
    boolean that_present_job_version = true && that.isSetJob_version();
    if (this_present_job_version || that_present_job_version) {
      if (!(this_present_job_version && that_present_job_version))
        return false;
      if (!this.job_version.equals(that.job_version))
        return false;
    }

    boolean this_present_description = true && this.isSetDescription();
    boolean that_present_description = true && that.isSetDescription();
    if (this_present_description || that_present_description) {
      if (!(this_present_description && that_present_description))
        return false;
      if (!this.description.equals(that.description))
        return false;
    }

    boolean this_present_fmNamespace = true && this.isSetFmNamespace();
    boolean that_present_fmNamespace = true && that.isSetFmNamespace();
    if (this_present_fmNamespace || that_present_fmNamespace) {
      if (!(this_present_fmNamespace && that_present_fmNamespace))
        return false;
      if (!this.fmNamespace.equals(that.fmNamespace))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_datasources = true && this.isSetDatasources();
    boolean that_present_datasources = true && that.isSetDatasources();
    if (this_present_datasources || that_present_datasources) {
      if (!(this_present_datasources && that_present_datasources))
        return false;
      if (!this.datasources.equals(that.datasources))
        return false;
    }

    boolean this_present_min = true && this.isSetMin();
    boolean that_present_min = true && that.isSetMin();
    if (this_present_min || that_present_min) {
      if (!(this_present_min && that_present_min))
        return false;
      if (!this.min.equals(that.min))
        return false;
    }

    boolean this_present_max = true && this.isSetMax();
    boolean that_present_max = true && that.isSetMax();
    if (this_present_max || that_present_max) {
      if (!(this_present_max && that_present_max))
        return false;
      if (!this.max.equals(that.max))
        return false;
    }

    boolean this_present_allowedValues = true && this.isSetAllowedValues();
    boolean that_present_allowedValues = true && that.isSetAllowedValues();
    if (this_present_allowedValues || that_present_allowedValues) {
      if (!(this_present_allowedValues && that_present_allowedValues))
        return false;
      if (!this.allowedValues.equals(that.allowedValues))
        return false;
    }

    boolean this_present_featureFactCount = true && this.isSetFeatureFactCount();
    boolean that_present_featureFactCount = true && that.isSetFeatureFactCount();
    if (this_present_featureFactCount || that_present_featureFactCount) {
      if (!(this_present_featureFactCount && that_present_featureFactCount))
        return false;
      if (!this.featureFactCount.equals(that.featureFactCount))
        return false;
    }

    boolean this_present_bucketValueCount = true && this.isSetBucketValueCount();
    boolean that_present_bucketValueCount = true && that.isSetBucketValueCount();
    if (this_present_bucketValueCount || that_present_bucketValueCount) {
      if (!(this_present_bucketValueCount && that_present_bucketValueCount))
        return false;
      if (!this.bucketValueCount.equals(that.bucketValueCount))
        return false;
    }

    boolean this_present_averages = true && this.isSetAverages();
    boolean that_present_averages = true && that.isSetAverages();
    if (this_present_averages || that_present_averages) {
      if (!(this_present_averages && that_present_averages))
        return false;
      if (!this.averages.equals(that.averages))
        return false;
    }

    boolean this_present_standardDeviations = true && this.isSetStandardDeviations();
    boolean that_present_standardDeviations = true && that.isSetStandardDeviations();
    if (this_present_standardDeviations || that_present_standardDeviations) {
      if (!(this_present_standardDeviations && that_present_standardDeviations))
        return false;
      if (!this.standardDeviations.equals(that.standardDeviations))
        return false;
    }

    boolean this_present_ratioBins = true && this.isSetRatioBins();
    boolean that_present_ratioBins = true && that.isSetRatioBins();
    if (this_present_ratioBins || that_present_ratioBins) {
      if (!(this_present_ratioBins && that_present_ratioBins))
        return false;
      if (!this.ratioBins.equals(that.ratioBins))
        return false;
    }

    boolean this_present_topN = true && this.isSetTopN();
    boolean that_present_topN = true && that.isSetTopN();
    if (this_present_topN || that_present_topN) {
      if (!(this_present_topN && that_present_topN))
        return false;
      if (!this.topN.equals(that.topN))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TFeatureMetadata other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TFeatureMetadata typedOther = (TFeatureMetadata)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVisibility()).compareTo(typedOther.isSetVisibility());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVisibility()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.visibility, typedOther.visibility);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBtVisibility()).compareTo(typedOther.isSetBtVisibility());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBtVisibility()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.btVisibility, typedOther.btVisibility);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApi_version()).compareTo(typedOther.isSetApi_version());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApi_version()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.api_version, typedOther.api_version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJob_version()).compareTo(typedOther.isSetJob_version());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJob_version()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.job_version, typedOther.job_version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDescription()).compareTo(typedOther.isSetDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, typedOther.description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFmNamespace()).compareTo(typedOther.isSetFmNamespace());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFmNamespace()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fmNamespace, typedOther.fmNamespace);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(typedOther.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, typedOther.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDatasources()).compareTo(typedOther.isSetDatasources());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDatasources()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datasources, typedOther.datasources);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMin()).compareTo(typedOther.isSetMin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.min, typedOther.min);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMax()).compareTo(typedOther.isSetMax());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMax()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max, typedOther.max);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAllowedValues()).compareTo(typedOther.isSetAllowedValues());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAllowedValues()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.allowedValues, typedOther.allowedValues);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFeatureFactCount()).compareTo(typedOther.isSetFeatureFactCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFeatureFactCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.featureFactCount, typedOther.featureFactCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBucketValueCount()).compareTo(typedOther.isSetBucketValueCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBucketValueCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bucketValueCount, typedOther.bucketValueCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAverages()).compareTo(typedOther.isSetAverages());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAverages()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.averages, typedOther.averages);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStandardDeviations()).compareTo(typedOther.isSetStandardDeviations());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStandardDeviations()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.standardDeviations, typedOther.standardDeviations);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRatioBins()).compareTo(typedOther.isSetRatioBins());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRatioBins()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ratioBins, typedOther.ratioBins);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTopN()).compareTo(typedOther.isSetTopN());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTopN()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topN, typedOther.topN);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // ID
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.id = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // NAME
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.name = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // VISIBILITY
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.visibility = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // BT_VISIBILITY
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.btVisibility = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // API_VERSION
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.api_version = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // JOB_VERSION
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.job_version = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // DESCRIPTION
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.description = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 8: // FM_NAMESPACE
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.fmNamespace = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 9: // TYPE
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.type = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 10: // DATASOURCES
          if (field.type == org.apache.thrift.protocol.TType.SET) {
            {
              org.apache.thrift.protocol.TSet _set44 = iprot.readSetBegin();
              this.datasources = new HashSet<String>(2*_set44.size);
              for (int _i45 = 0; _i45 < _set44.size; ++_i45)
              {
                String _elem46;
                _elem46 = iprot.readString();
                this.datasources.add(_elem46);
              }
              iprot.readSetEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 11: // MIN
          if (field.type == org.apache.thrift.protocol.TType.MAP) {
            {
              org.apache.thrift.protocol.TMap _map47 = iprot.readMapBegin();
              this.min = new HashMap<String,Double>(2*_map47.size);
              for (int _i48 = 0; _i48 < _map47.size; ++_i48)
              {
                String _key49;
                double _val50;
                _key49 = iprot.readString();
                _val50 = iprot.readDouble();
                this.min.put(_key49, _val50);
              }
              iprot.readMapEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 12: // MAX
          if (field.type == org.apache.thrift.protocol.TType.MAP) {
            {
              org.apache.thrift.protocol.TMap _map51 = iprot.readMapBegin();
              this.max = new HashMap<String,Double>(2*_map51.size);
              for (int _i52 = 0; _i52 < _map51.size; ++_i52)
              {
                String _key53;
                double _val54;
                _key53 = iprot.readString();
                _val54 = iprot.readDouble();
                this.max.put(_key53, _val54);
              }
              iprot.readMapEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 13: // ALLOWED_VALUES
          if (field.type == org.apache.thrift.protocol.TType.SET) {
            {
              org.apache.thrift.protocol.TSet _set55 = iprot.readSetBegin();
              this.allowedValues = new HashSet<String>(2*_set55.size);
              for (int _i56 = 0; _i56 < _set55.size; ++_i56)
              {
                String _elem57;
                _elem57 = iprot.readString();
                this.allowedValues.add(_elem57);
              }
              iprot.readSetEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 14: // FEATURE_FACT_COUNT
          if (field.type == org.apache.thrift.protocol.TType.MAP) {
            {
              org.apache.thrift.protocol.TMap _map58 = iprot.readMapBegin();
              this.featureFactCount = new HashMap<String,Long>(2*_map58.size);
              for (int _i59 = 0; _i59 < _map58.size; ++_i59)
              {
                String _key60;
                long _val61;
                _key60 = iprot.readString();
                _val61 = iprot.readI64();
                this.featureFactCount.put(_key60, _val61);
              }
              iprot.readMapEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 15: // BUCKET_VALUE_COUNT
          if (field.type == org.apache.thrift.protocol.TType.MAP) {
            {
              org.apache.thrift.protocol.TMap _map62 = iprot.readMapBegin();
              this.bucketValueCount = new HashMap<String,Long>(2*_map62.size);
              for (int _i63 = 0; _i63 < _map62.size; ++_i63)
              {
                String _key64;
                long _val65;
                _key64 = iprot.readString();
                _val65 = iprot.readI64();
                this.bucketValueCount.put(_key64, _val65);
              }
              iprot.readMapEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 16: // AVERAGES
          if (field.type == org.apache.thrift.protocol.TType.MAP) {
            {
              org.apache.thrift.protocol.TMap _map66 = iprot.readMapBegin();
              this.averages = new HashMap<String,Double>(2*_map66.size);
              for (int _i67 = 0; _i67 < _map66.size; ++_i67)
              {
                String _key68;
                double _val69;
                _key68 = iprot.readString();
                _val69 = iprot.readDouble();
                this.averages.put(_key68, _val69);
              }
              iprot.readMapEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 17: // STANDARD_DEVIATIONS
          if (field.type == org.apache.thrift.protocol.TType.MAP) {
            {
              org.apache.thrift.protocol.TMap _map70 = iprot.readMapBegin();
              this.standardDeviations = new HashMap<String,Double>(2*_map70.size);
              for (int _i71 = 0; _i71 < _map70.size; ++_i71)
              {
                String _key72;
                double _val73;
                _key72 = iprot.readString();
                _val73 = iprot.readDouble();
                this.standardDeviations.put(_key72, _val73);
              }
              iprot.readMapEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 18: // RATIO_BINS
          if (field.type == org.apache.thrift.protocol.TType.MAP) {
            {
              org.apache.thrift.protocol.TMap _map74 = iprot.readMapBegin();
              this.ratioBins = new HashMap<String,List<Map<String,Double>>>(2*_map74.size);
              for (int _i75 = 0; _i75 < _map74.size; ++_i75)
              {
                String _key76;
                List<Map<String,Double>> _val77;
                _key76 = iprot.readString();
                {
                  org.apache.thrift.protocol.TList _list78 = iprot.readListBegin();
                  _val77 = new ArrayList<Map<String,Double>>(_list78.size);
                  for (int _i79 = 0; _i79 < _list78.size; ++_i79)
                  {
                    Map<String,Double> _elem80;
                    {
                      org.apache.thrift.protocol.TMap _map81 = iprot.readMapBegin();
                      _elem80 = new HashMap<String,Double>(2*_map81.size);
                      for (int _i82 = 0; _i82 < _map81.size; ++_i82)
                      {
                        String _key83;
                        double _val84;
                        _key83 = iprot.readString();
                        _val84 = iprot.readDouble();
                        _elem80.put(_key83, _val84);
                      }
                      iprot.readMapEnd();
                    }
                    _val77.add(_elem80);
                  }
                  iprot.readListEnd();
                }
                this.ratioBins.put(_key76, _val77);
              }
              iprot.readMapEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 19: // TOP_N
          if (field.type == org.apache.thrift.protocol.TType.MAP) {
            {
              org.apache.thrift.protocol.TMap _map85 = iprot.readMapBegin();
              this.topN = new HashMap<String,List<String>>(2*_map85.size);
              for (int _i86 = 0; _i86 < _map85.size; ++_i86)
              {
                String _key87;
                List<String> _val88;
                _key87 = iprot.readString();
                {
                  org.apache.thrift.protocol.TList _list89 = iprot.readListBegin();
                  _val88 = new ArrayList<String>(_list89.size);
                  for (int _i90 = 0; _i90 < _list89.size; ++_i90)
                  {
                    String _elem91;
                    _elem91 = iprot.readString();
                    _val88.add(_elem91);
                  }
                  iprot.readListEnd();
                }
                this.topN.put(_key87, _val88);
              }
              iprot.readMapEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.id != null) {
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeString(this.id);
      oprot.writeFieldEnd();
    }
    if (this.name != null) {
      oprot.writeFieldBegin(NAME_FIELD_DESC);
      oprot.writeString(this.name);
      oprot.writeFieldEnd();
    }
    if (this.visibility != null) {
      oprot.writeFieldBegin(VISIBILITY_FIELD_DESC);
      oprot.writeString(this.visibility);
      oprot.writeFieldEnd();
    }
    if (this.btVisibility != null) {
      oprot.writeFieldBegin(BT_VISIBILITY_FIELD_DESC);
      oprot.writeString(this.btVisibility);
      oprot.writeFieldEnd();
    }
    if (this.api_version != null) {
      oprot.writeFieldBegin(API_VERSION_FIELD_DESC);
      oprot.writeString(this.api_version);
      oprot.writeFieldEnd();
    }
    if (this.job_version != null) {
      oprot.writeFieldBegin(JOB_VERSION_FIELD_DESC);
      oprot.writeString(this.job_version);
      oprot.writeFieldEnd();
    }
    if (this.description != null) {
      oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
      oprot.writeString(this.description);
      oprot.writeFieldEnd();
    }
    if (this.fmNamespace != null) {
      oprot.writeFieldBegin(FM_NAMESPACE_FIELD_DESC);
      oprot.writeString(this.fmNamespace);
      oprot.writeFieldEnd();
    }
    if (this.type != null) {
      oprot.writeFieldBegin(TYPE_FIELD_DESC);
      oprot.writeString(this.type);
      oprot.writeFieldEnd();
    }
    if (this.datasources != null) {
      oprot.writeFieldBegin(DATASOURCES_FIELD_DESC);
      {
        oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, this.datasources.size()));
        for (String _iter92 : this.datasources)
        {
          oprot.writeString(_iter92);
        }
        oprot.writeSetEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.min != null) {
      oprot.writeFieldBegin(MIN_FIELD_DESC);
      {
        oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.DOUBLE, this.min.size()));
        for (Map.Entry<String, Double> _iter93 : this.min.entrySet())
        {
          oprot.writeString(_iter93.getKey());
          oprot.writeDouble(_iter93.getValue());
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.max != null) {
      oprot.writeFieldBegin(MAX_FIELD_DESC);
      {
        oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.DOUBLE, this.max.size()));
        for (Map.Entry<String, Double> _iter94 : this.max.entrySet())
        {
          oprot.writeString(_iter94.getKey());
          oprot.writeDouble(_iter94.getValue());
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.allowedValues != null) {
      oprot.writeFieldBegin(ALLOWED_VALUES_FIELD_DESC);
      {
        oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, this.allowedValues.size()));
        for (String _iter95 : this.allowedValues)
        {
          oprot.writeString(_iter95);
        }
        oprot.writeSetEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.featureFactCount != null) {
      oprot.writeFieldBegin(FEATURE_FACT_COUNT_FIELD_DESC);
      {
        oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I64, this.featureFactCount.size()));
        for (Map.Entry<String, Long> _iter96 : this.featureFactCount.entrySet())
        {
          oprot.writeString(_iter96.getKey());
          oprot.writeI64(_iter96.getValue());
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.bucketValueCount != null) {
      oprot.writeFieldBegin(BUCKET_VALUE_COUNT_FIELD_DESC);
      {
        oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I64, this.bucketValueCount.size()));
        for (Map.Entry<String, Long> _iter97 : this.bucketValueCount.entrySet())
        {
          oprot.writeString(_iter97.getKey());
          oprot.writeI64(_iter97.getValue());
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.averages != null) {
      oprot.writeFieldBegin(AVERAGES_FIELD_DESC);
      {
        oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.DOUBLE, this.averages.size()));
        for (Map.Entry<String, Double> _iter98 : this.averages.entrySet())
        {
          oprot.writeString(_iter98.getKey());
          oprot.writeDouble(_iter98.getValue());
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.standardDeviations != null) {
      oprot.writeFieldBegin(STANDARD_DEVIATIONS_FIELD_DESC);
      {
        oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.DOUBLE, this.standardDeviations.size()));
        for (Map.Entry<String, Double> _iter99 : this.standardDeviations.entrySet())
        {
          oprot.writeString(_iter99.getKey());
          oprot.writeDouble(_iter99.getValue());
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.ratioBins != null) {
      oprot.writeFieldBegin(RATIO_BINS_FIELD_DESC);
      {
        oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, this.ratioBins.size()));
        for (Map.Entry<String, List<Map<String,Double>>> _iter100 : this.ratioBins.entrySet())
        {
          oprot.writeString(_iter100.getKey());
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, _iter100.getValue().size()));
            for (Map<String,Double> _iter101 : _iter100.getValue())
            {
              {
                oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.DOUBLE, _iter101.size()));
                for (Map.Entry<String, Double> _iter102 : _iter101.entrySet())
                {
                  oprot.writeString(_iter102.getKey());
                  oprot.writeDouble(_iter102.getValue());
                }
                oprot.writeMapEnd();
              }
            }
            oprot.writeListEnd();
          }
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.topN != null) {
      oprot.writeFieldBegin(TOP_N_FIELD_DESC);
      {
        oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, this.topN.size()));
        for (Map.Entry<String, List<String>> _iter103 : this.topN.entrySet())
        {
          oprot.writeString(_iter103.getKey());
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, _iter103.getValue().size()));
            for (String _iter104 : _iter103.getValue())
            {
              oprot.writeString(_iter104);
            }
            oprot.writeListEnd();
          }
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TFeatureMetadata(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("visibility:");
    if (this.visibility == null) {
      sb.append("null");
    } else {
      sb.append(this.visibility);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("btVisibility:");
    if (this.btVisibility == null) {
      sb.append("null");
    } else {
      sb.append(this.btVisibility);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("api_version:");
    if (this.api_version == null) {
      sb.append("null");
    } else {
      sb.append(this.api_version);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("job_version:");
    if (this.job_version == null) {
      sb.append("null");
    } else {
      sb.append(this.job_version);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("description:");
    if (this.description == null) {
      sb.append("null");
    } else {
      sb.append(this.description);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fmNamespace:");
    if (this.fmNamespace == null) {
      sb.append("null");
    } else {
      sb.append(this.fmNamespace);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("datasources:");
    if (this.datasources == null) {
      sb.append("null");
    } else {
      sb.append(this.datasources);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("min:");
    if (this.min == null) {
      sb.append("null");
    } else {
      sb.append(this.min);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("max:");
    if (this.max == null) {
      sb.append("null");
    } else {
      sb.append(this.max);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("allowedValues:");
    if (this.allowedValues == null) {
      sb.append("null");
    } else {
      sb.append(this.allowedValues);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("featureFactCount:");
    if (this.featureFactCount == null) {
      sb.append("null");
    } else {
      sb.append(this.featureFactCount);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bucketValueCount:");
    if (this.bucketValueCount == null) {
      sb.append("null");
    } else {
      sb.append(this.bucketValueCount);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("averages:");
    if (this.averages == null) {
      sb.append("null");
    } else {
      sb.append(this.averages);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("standardDeviations:");
    if (this.standardDeviations == null) {
      sb.append("null");
    } else {
      sb.append(this.standardDeviations);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ratioBins:");
    if (this.ratioBins == null) {
      sb.append("null");
    } else {
      sb.append(this.ratioBins);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("topN:");
    if (this.topN == null) {
      sb.append("null");
    } else {
      sb.append(this.topN);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

