/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com._42six.amino.common.thrift;

import java.util.*;

public class THypothesis implements org.apache.thrift.TBase<THypothesis, THypothesis._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("THypothesis");

  private static final org.apache.thrift.protocol.TField OWNER_FIELD_DESC = new org.apache.thrift.protocol.TField("owner", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField BUCKETID_FIELD_DESC = new org.apache.thrift.protocol.TField("bucketid", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField CAN_EDIT_FIELD_DESC = new org.apache.thrift.protocol.TField("canEdit", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField CAN_VIEW_FIELD_DESC = new org.apache.thrift.protocol.TField("canView", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField DATASOURCEID_FIELD_DESC = new org.apache.thrift.protocol.TField("datasourceid", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField JUSTIFICATION_FIELD_DESC = new org.apache.thrift.protocol.TField("justification", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField BUCKET_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("bucketValue", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField BT_VISIBILITY_FIELD_DESC = new org.apache.thrift.protocol.TField("btVisibility", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField VISIBILITY_FIELD_DESC = new org.apache.thrift.protocol.TField("visibility", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField HYPOTHESIS_FEATURES_FIELD_DESC = new org.apache.thrift.protocol.TField("hypothesisFeatures", org.apache.thrift.protocol.TType.SET, (short)12);
  private static final org.apache.thrift.protocol.TField CREATED_FIELD_DESC = new org.apache.thrift.protocol.TField("created", org.apache.thrift.protocol.TType.I64, (short)13);
  private static final org.apache.thrift.protocol.TField UPDATED_FIELD_DESC = new org.apache.thrift.protocol.TField("updated", org.apache.thrift.protocol.TType.I64, (short)14);
  private static final org.apache.thrift.protocol.TField EXECUTED_FIELD_DESC = new org.apache.thrift.protocol.TField("executed", org.apache.thrift.protocol.TType.I64, (short)15);
  private static final org.apache.thrift.protocol.TField QUERIES_FIELD_DESC = new org.apache.thrift.protocol.TField("queries", org.apache.thrift.protocol.TType.SET, (short)16);

  /**
   * The person or group that has ownership of this hypothesis
   */
  public String owner;
  /**
   * The UUID representing the hypothesis
   */
  public String id;
  /**
   * The human readable name of the hypothesis
   */
  public String name;
  /**
   * Which bucket the Hypothesis relates to
   */
  public String bucketid;
  /**
   * A list of groups that can edit this hypothesis
   */
  public List<String> canEdit;
  /**
   * A list of groups that can view this hypothesis
   */
  public List<String> canView;
  /**
   * The datasource that the data comes from
   */
  public String datasourceid;
  /**
   * The justification as to why this Hypothesis was created
   */
  public String justification;
  /**
   * The value that was used to generate the Hypothesis
   */
  public String bucketValue;
  /**
   * The Big Table ColumnVisibility string
   */
  public String btVisibility;
  /**
   * The human readable visibility
   */
  public String visibility;
  /**
   * All of the features that relate to this Hypothesis
   */
  public Set<THypothesisFeature> hypothesisFeatures;
  /**
   * The time that the Hypothesis was created
   */
  public long created;
  /**
   * The time that the Hypothesis was updated
   */
  public long updated;
  /**
   * The time that the Hypothesis was executed
   */
  public long executed;
  /**
   * A sorted set of QueryResult ID's, sorted by time
   */
  public Set<String> queries;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * The person or group that has ownership of this hypothesis
     */
    OWNER((short)1, "owner"),
    /**
     * The UUID representing the hypothesis
     */
    ID((short)2, "id"),
    /**
     * The human readable name of the hypothesis
     */
    NAME((short)3, "name"),
    /**
     * Which bucket the Hypothesis relates to
     */
    BUCKETID((short)4, "bucketid"),
    /**
     * A list of groups that can edit this hypothesis
     */
    CAN_EDIT((short)5, "canEdit"),
    /**
     * A list of groups that can view this hypothesis
     */
    CAN_VIEW((short)6, "canView"),
    /**
     * The datasource that the data comes from
     */
    DATASOURCEID((short)7, "datasourceid"),
    /**
     * The justification as to why this Hypothesis was created
     */
    JUSTIFICATION((short)8, "justification"),
    /**
     * The value that was used to generate the Hypothesis
     */
    BUCKET_VALUE((short)9, "bucketValue"),
    /**
     * The Big Table ColumnVisibility string
     */
    BT_VISIBILITY((short)10, "btVisibility"),
    /**
     * The human readable visibility
     */
    VISIBILITY((short)11, "visibility"),
    /**
     * All of the features that relate to this Hypothesis
     */
    HYPOTHESIS_FEATURES((short)12, "hypothesisFeatures"),
    /**
     * The time that the Hypothesis was created
     */
    CREATED((short)13, "created"),
    /**
     * The time that the Hypothesis was updated
     */
    UPDATED((short)14, "updated"),
    /**
     * The time that the Hypothesis was executed
     */
    EXECUTED((short)15, "executed"),
    /**
     * A sorted set of QueryResult ID's, sorted by time
     */
    QUERIES((short)16, "queries");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // OWNER
          return OWNER;
        case 2: // ID
          return ID;
        case 3: // NAME
          return NAME;
        case 4: // BUCKETID
          return BUCKETID;
        case 5: // CAN_EDIT
          return CAN_EDIT;
        case 6: // CAN_VIEW
          return CAN_VIEW;
        case 7: // DATASOURCEID
          return DATASOURCEID;
        case 8: // JUSTIFICATION
          return JUSTIFICATION;
        case 9: // BUCKET_VALUE
          return BUCKET_VALUE;
        case 10: // BT_VISIBILITY
          return BT_VISIBILITY;
        case 11: // VISIBILITY
          return VISIBILITY;
        case 12: // HYPOTHESIS_FEATURES
          return HYPOTHESIS_FEATURES;
        case 13: // CREATED
          return CREATED;
        case 14: // UPDATED
          return UPDATED;
        case 15: // EXECUTED
          return EXECUTED;
        case 16: // QUERIES
          return QUERIES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CREATED_ISSET_ID = 0;
  private static final int __UPDATED_ISSET_ID = 1;
  private static final int __EXECUTED_ISSET_ID = 2;
  private BitSet __isset_bit_vector = new BitSet(3);

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.OWNER, new org.apache.thrift.meta_data.FieldMetaData("owner", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BUCKETID, new org.apache.thrift.meta_data.FieldMetaData("bucketid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CAN_EDIT, new org.apache.thrift.meta_data.FieldMetaData("canEdit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.CAN_VIEW, new org.apache.thrift.meta_data.FieldMetaData("canView", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.DATASOURCEID, new org.apache.thrift.meta_data.FieldMetaData("datasourceid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.JUSTIFICATION, new org.apache.thrift.meta_data.FieldMetaData("justification", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BUCKET_VALUE, new org.apache.thrift.meta_data.FieldMetaData("bucketValue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BT_VISIBILITY, new org.apache.thrift.meta_data.FieldMetaData("btVisibility", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VISIBILITY, new org.apache.thrift.meta_data.FieldMetaData("visibility", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HYPOTHESIS_FEATURES, new org.apache.thrift.meta_data.FieldMetaData("hypothesisFeatures", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, THypothesisFeature.class))));
    tmpMap.put(_Fields.CREATED, new org.apache.thrift.meta_data.FieldMetaData("created", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.UPDATED, new org.apache.thrift.meta_data.FieldMetaData("updated", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.EXECUTED, new org.apache.thrift.meta_data.FieldMetaData("executed", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.QUERIES, new org.apache.thrift.meta_data.FieldMetaData("queries", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(THypothesis.class, metaDataMap);
  }

  public THypothesis() {
  }

  public THypothesis(
    String owner,
    String id,
    String name,
    String bucketid,
    List<String> canEdit,
    List<String> canView,
    String datasourceid,
    String justification,
    String bucketValue,
    String btVisibility,
    String visibility,
    Set<THypothesisFeature> hypothesisFeatures,
    long created,
    long updated,
    long executed,
    Set<String> queries)
  {
    this();
    this.owner = owner;
    this.id = id;
    this.name = name;
    this.bucketid = bucketid;
    this.canEdit = canEdit;
    this.canView = canView;
    this.datasourceid = datasourceid;
    this.justification = justification;
    this.bucketValue = bucketValue;
    this.btVisibility = btVisibility;
    this.visibility = visibility;
    this.hypothesisFeatures = hypothesisFeatures;
    this.created = created;
    setCreatedIsSet(true);
    this.updated = updated;
    setUpdatedIsSet(true);
    this.executed = executed;
    setExecutedIsSet(true);
    this.queries = queries;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public THypothesis(THypothesis other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetOwner()) {
      this.owner = other.owner;
    }
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetBucketid()) {
      this.bucketid = other.bucketid;
    }
    if (other.isSetCanEdit()) {
      List<String> __this__canEdit = new ArrayList<String>();
      for (String other_element : other.canEdit) {
        __this__canEdit.add(other_element);
      }
      this.canEdit = __this__canEdit;
    }
    if (other.isSetCanView()) {
      List<String> __this__canView = new ArrayList<String>();
      for (String other_element : other.canView) {
        __this__canView.add(other_element);
      }
      this.canView = __this__canView;
    }
    if (other.isSetDatasourceid()) {
      this.datasourceid = other.datasourceid;
    }
    if (other.isSetJustification()) {
      this.justification = other.justification;
    }
    if (other.isSetBucketValue()) {
      this.bucketValue = other.bucketValue;
    }
    if (other.isSetBtVisibility()) {
      this.btVisibility = other.btVisibility;
    }
    if (other.isSetVisibility()) {
      this.visibility = other.visibility;
    }
    if (other.isSetHypothesisFeatures()) {
      Set<THypothesisFeature> __this__hypothesisFeatures = new HashSet<THypothesisFeature>();
      for (THypothesisFeature other_element : other.hypothesisFeatures) {
        __this__hypothesisFeatures.add(new THypothesisFeature(other_element));
      }
      this.hypothesisFeatures = __this__hypothesisFeatures;
    }
    this.created = other.created;
    this.updated = other.updated;
    this.executed = other.executed;
    if (other.isSetQueries()) {
      Set<String> __this__queries = new HashSet<String>();
      for (String other_element : other.queries) {
        __this__queries.add(other_element);
      }
      this.queries = __this__queries;
    }
  }

  public THypothesis deepCopy() {
    return new THypothesis(this);
  }

  @Override
  public void clear() {
    this.owner = null;
    this.id = null;
    this.name = null;
    this.bucketid = null;
    this.canEdit = null;
    this.canView = null;
    this.datasourceid = null;
    this.justification = null;
    this.bucketValue = null;
    this.btVisibility = null;
    this.visibility = null;
    this.hypothesisFeatures = null;
    setCreatedIsSet(false);
    this.created = 0;
    setUpdatedIsSet(false);
    this.updated = 0;
    setExecutedIsSet(false);
    this.executed = 0;
    this.queries = null;
  }

  /**
   * The person or group that has ownership of this hypothesis
   */
  public String getOwner() {
    return this.owner;
  }

  /**
   * The person or group that has ownership of this hypothesis
   */
  public THypothesis setOwner(String owner) {
    this.owner = owner;
    return this;
  }

  public void unsetOwner() {
    this.owner = null;
  }

  /** Returns true if field owner is set (has been assigned a value) and false otherwise */
  public boolean isSetOwner() {
    return this.owner != null;
  }

  public void setOwnerIsSet(boolean value) {
    if (!value) {
      this.owner = null;
    }
  }

  /**
   * The UUID representing the hypothesis
   */
  public String getId() {
    return this.id;
  }

  /**
   * The UUID representing the hypothesis
   */
  public THypothesis setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  /**
   * The human readable name of the hypothesis
   */
  public String getName() {
    return this.name;
  }

  /**
   * The human readable name of the hypothesis
   */
  public THypothesis setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  /**
   * Which bucket the Hypothesis relates to
   */
  public String getBucketid() {
    return this.bucketid;
  }

  /**
   * Which bucket the Hypothesis relates to
   */
  public THypothesis setBucketid(String bucketid) {
    this.bucketid = bucketid;
    return this;
  }

  public void unsetBucketid() {
    this.bucketid = null;
  }

  /** Returns true if field bucketid is set (has been assigned a value) and false otherwise */
  public boolean isSetBucketid() {
    return this.bucketid != null;
  }

  public void setBucketidIsSet(boolean value) {
    if (!value) {
      this.bucketid = null;
    }
  }

  public int getCanEditSize() {
    return (this.canEdit == null) ? 0 : this.canEdit.size();
  }

  public java.util.Iterator<String> getCanEditIterator() {
    return (this.canEdit == null) ? null : this.canEdit.iterator();
  }

  public void addToCanEdit(String elem) {
    if (this.canEdit == null) {
      this.canEdit = new ArrayList<String>();
    }
    this.canEdit.add(elem);
  }

  /**
   * A list of groups that can edit this hypothesis
   */
  public List<String> getCanEdit() {
    return this.canEdit;
  }

  /**
   * A list of groups that can edit this hypothesis
   */
  public THypothesis setCanEdit(List<String> canEdit) {
    this.canEdit = canEdit;
    return this;
  }

  public void unsetCanEdit() {
    this.canEdit = null;
  }

  /** Returns true if field canEdit is set (has been assigned a value) and false otherwise */
  public boolean isSetCanEdit() {
    return this.canEdit != null;
  }

  public void setCanEditIsSet(boolean value) {
    if (!value) {
      this.canEdit = null;
    }
  }

  public int getCanViewSize() {
    return (this.canView == null) ? 0 : this.canView.size();
  }

  public java.util.Iterator<String> getCanViewIterator() {
    return (this.canView == null) ? null : this.canView.iterator();
  }

  public void addToCanView(String elem) {
    if (this.canView == null) {
      this.canView = new ArrayList<String>();
    }
    this.canView.add(elem);
  }

  /**
   * A list of groups that can view this hypothesis
   */
  public List<String> getCanView() {
    return this.canView;
  }

  /**
   * A list of groups that can view this hypothesis
   */
  public THypothesis setCanView(List<String> canView) {
    this.canView = canView;
    return this;
  }

  public void unsetCanView() {
    this.canView = null;
  }

  /** Returns true if field canView is set (has been assigned a value) and false otherwise */
  public boolean isSetCanView() {
    return this.canView != null;
  }

  public void setCanViewIsSet(boolean value) {
    if (!value) {
      this.canView = null;
    }
  }

  /**
   * The datasource that the data comes from
   */
  public String getDatasourceid() {
    return this.datasourceid;
  }

  /**
   * The datasource that the data comes from
   */
  public THypothesis setDatasourceid(String datasourceid) {
    this.datasourceid = datasourceid;
    return this;
  }

  public void unsetDatasourceid() {
    this.datasourceid = null;
  }

  /** Returns true if field datasourceid is set (has been assigned a value) and false otherwise */
  public boolean isSetDatasourceid() {
    return this.datasourceid != null;
  }

  public void setDatasourceidIsSet(boolean value) {
    if (!value) {
      this.datasourceid = null;
    }
  }

  /**
   * The justification as to why this Hypothesis was created
   */
  public String getJustification() {
    return this.justification;
  }

  /**
   * The justification as to why this Hypothesis was created
   */
  public THypothesis setJustification(String justification) {
    this.justification = justification;
    return this;
  }

  public void unsetJustification() {
    this.justification = null;
  }

  /** Returns true if field justification is set (has been assigned a value) and false otherwise */
  public boolean isSetJustification() {
    return this.justification != null;
  }

  public void setJustificationIsSet(boolean value) {
    if (!value) {
      this.justification = null;
    }
  }

  /**
   * The value that was used to generate the Hypothesis
   */
  public String getBucketValue() {
    return this.bucketValue;
  }

  /**
   * The value that was used to generate the Hypothesis
   */
  public THypothesis setBucketValue(String bucketValue) {
    this.bucketValue = bucketValue;
    return this;
  }

  public void unsetBucketValue() {
    this.bucketValue = null;
  }

  /** Returns true if field bucketValue is set (has been assigned a value) and false otherwise */
  public boolean isSetBucketValue() {
    return this.bucketValue != null;
  }

  public void setBucketValueIsSet(boolean value) {
    if (!value) {
      this.bucketValue = null;
    }
  }

  /**
   * The Big Table ColumnVisibility string
   */
  public String getBtVisibility() {
    return this.btVisibility;
  }

  /**
   * The Big Table ColumnVisibility string
   */
  public THypothesis setBtVisibility(String btVisibility) {
    this.btVisibility = btVisibility;
    return this;
  }

  public void unsetBtVisibility() {
    this.btVisibility = null;
  }

  /** Returns true if field btVisibility is set (has been assigned a value) and false otherwise */
  public boolean isSetBtVisibility() {
    return this.btVisibility != null;
  }

  public void setBtVisibilityIsSet(boolean value) {
    if (!value) {
      this.btVisibility = null;
    }
  }

  /**
   * The human readable visibility
   */
  public String getVisibility() {
    return this.visibility;
  }

  /**
   * The human readable visibility
   */
  public THypothesis setVisibility(String visibility) {
    this.visibility = visibility;
    return this;
  }

  public void unsetVisibility() {
    this.visibility = null;
  }

  /** Returns true if field visibility is set (has been assigned a value) and false otherwise */
  public boolean isSetVisibility() {
    return this.visibility != null;
  }

  public void setVisibilityIsSet(boolean value) {
    if (!value) {
      this.visibility = null;
    }
  }

  public int getHypothesisFeaturesSize() {
    return (this.hypothesisFeatures == null) ? 0 : this.hypothesisFeatures.size();
  }

  public java.util.Iterator<THypothesisFeature> getHypothesisFeaturesIterator() {
    return (this.hypothesisFeatures == null) ? null : this.hypothesisFeatures.iterator();
  }

  public void addToHypothesisFeatures(THypothesisFeature elem) {
    if (this.hypothesisFeatures == null) {
      this.hypothesisFeatures = new HashSet<THypothesisFeature>();
    }
    this.hypothesisFeatures.add(elem);
  }

  /**
   * All of the features that relate to this Hypothesis
   */
  public Set<THypothesisFeature> getHypothesisFeatures() {
    return this.hypothesisFeatures;
  }

  /**
   * All of the features that relate to this Hypothesis
   */
  public THypothesis setHypothesisFeatures(Set<THypothesisFeature> hypothesisFeatures) {
    this.hypothesisFeatures = hypothesisFeatures;
    return this;
  }

  public void unsetHypothesisFeatures() {
    this.hypothesisFeatures = null;
  }

  /** Returns true if field hypothesisFeatures is set (has been assigned a value) and false otherwise */
  public boolean isSetHypothesisFeatures() {
    return this.hypothesisFeatures != null;
  }

  public void setHypothesisFeaturesIsSet(boolean value) {
    if (!value) {
      this.hypothesisFeatures = null;
    }
  }

  /**
   * The time that the Hypothesis was created
   */
  public long getCreated() {
    return this.created;
  }

  /**
   * The time that the Hypothesis was created
   */
  public THypothesis setCreated(long created) {
    this.created = created;
    setCreatedIsSet(true);
    return this;
  }

  public void unsetCreated() {
    __isset_bit_vector.clear(__CREATED_ISSET_ID);
  }

  /** Returns true if field created is set (has been assigned a value) and false otherwise */
  public boolean isSetCreated() {
    return __isset_bit_vector.get(__CREATED_ISSET_ID);
  }

  public void setCreatedIsSet(boolean value) {
    __isset_bit_vector.set(__CREATED_ISSET_ID, value);
  }

  /**
   * The time that the Hypothesis was updated
   */
  public long getUpdated() {
    return this.updated;
  }

  /**
   * The time that the Hypothesis was updated
   */
  public THypothesis setUpdated(long updated) {
    this.updated = updated;
    setUpdatedIsSet(true);
    return this;
  }

  public void unsetUpdated() {
    __isset_bit_vector.clear(__UPDATED_ISSET_ID);
  }

  /** Returns true if field updated is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdated() {
    return __isset_bit_vector.get(__UPDATED_ISSET_ID);
  }

  public void setUpdatedIsSet(boolean value) {
    __isset_bit_vector.set(__UPDATED_ISSET_ID, value);
  }

  /**
   * The time that the Hypothesis was executed
   */
  public long getExecuted() {
    return this.executed;
  }

  /**
   * The time that the Hypothesis was executed
   */
  public THypothesis setExecuted(long executed) {
    this.executed = executed;
    setExecutedIsSet(true);
    return this;
  }

  public void unsetExecuted() {
    __isset_bit_vector.clear(__EXECUTED_ISSET_ID);
  }

  /** Returns true if field executed is set (has been assigned a value) and false otherwise */
  public boolean isSetExecuted() {
    return __isset_bit_vector.get(__EXECUTED_ISSET_ID);
  }

  public void setExecutedIsSet(boolean value) {
    __isset_bit_vector.set(__EXECUTED_ISSET_ID, value);
  }

  public int getQueriesSize() {
    return (this.queries == null) ? 0 : this.queries.size();
  }

  public java.util.Iterator<String> getQueriesIterator() {
    return (this.queries == null) ? null : this.queries.iterator();
  }

  public void addToQueries(String elem) {
    if (this.queries == null) {
      this.queries = new HashSet<String>();
    }
    this.queries.add(elem);
  }

  /**
   * A sorted set of QueryResult ID's, sorted by time
   */
  public Set<String> getQueries() {
    return this.queries;
  }

  /**
   * A sorted set of QueryResult ID's, sorted by time
   */
  public THypothesis setQueries(Set<String> queries) {
    this.queries = queries;
    return this;
  }

  public void unsetQueries() {
    this.queries = null;
  }

  /** Returns true if field queries is set (has been assigned a value) and false otherwise */
  public boolean isSetQueries() {
    return this.queries != null;
  }

  public void setQueriesIsSet(boolean value) {
    if (!value) {
      this.queries = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case OWNER:
      if (value == null) {
        unsetOwner();
      } else {
        setOwner((String)value);
      }
      break;

    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case BUCKETID:
      if (value == null) {
        unsetBucketid();
      } else {
        setBucketid((String)value);
      }
      break;

    case CAN_EDIT:
      if (value == null) {
        unsetCanEdit();
      } else {
        setCanEdit((List<String>)value);
      }
      break;

    case CAN_VIEW:
      if (value == null) {
        unsetCanView();
      } else {
        setCanView((List<String>)value);
      }
      break;

    case DATASOURCEID:
      if (value == null) {
        unsetDatasourceid();
      } else {
        setDatasourceid((String)value);
      }
      break;

    case JUSTIFICATION:
      if (value == null) {
        unsetJustification();
      } else {
        setJustification((String)value);
      }
      break;

    case BUCKET_VALUE:
      if (value == null) {
        unsetBucketValue();
      } else {
        setBucketValue((String)value);
      }
      break;

    case BT_VISIBILITY:
      if (value == null) {
        unsetBtVisibility();
      } else {
        setBtVisibility((String)value);
      }
      break;

    case VISIBILITY:
      if (value == null) {
        unsetVisibility();
      } else {
        setVisibility((String)value);
      }
      break;

    case HYPOTHESIS_FEATURES:
      if (value == null) {
        unsetHypothesisFeatures();
      } else {
        setHypothesisFeatures((Set<THypothesisFeature>)value);
      }
      break;

    case CREATED:
      if (value == null) {
        unsetCreated();
      } else {
        setCreated((Long)value);
      }
      break;

    case UPDATED:
      if (value == null) {
        unsetUpdated();
      } else {
        setUpdated((Long)value);
      }
      break;

    case EXECUTED:
      if (value == null) {
        unsetExecuted();
      } else {
        setExecuted((Long)value);
      }
      break;

    case QUERIES:
      if (value == null) {
        unsetQueries();
      } else {
        setQueries((Set<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case OWNER:
      return getOwner();

    case ID:
      return getId();

    case NAME:
      return getName();

    case BUCKETID:
      return getBucketid();

    case CAN_EDIT:
      return getCanEdit();

    case CAN_VIEW:
      return getCanView();

    case DATASOURCEID:
      return getDatasourceid();

    case JUSTIFICATION:
      return getJustification();

    case BUCKET_VALUE:
      return getBucketValue();

    case BT_VISIBILITY:
      return getBtVisibility();

    case VISIBILITY:
      return getVisibility();

    case HYPOTHESIS_FEATURES:
      return getHypothesisFeatures();

    case CREATED:
      return new Long(getCreated());

    case UPDATED:
      return new Long(getUpdated());

    case EXECUTED:
      return new Long(getExecuted());

    case QUERIES:
      return getQueries();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case OWNER:
      return isSetOwner();
    case ID:
      return isSetId();
    case NAME:
      return isSetName();
    case BUCKETID:
      return isSetBucketid();
    case CAN_EDIT:
      return isSetCanEdit();
    case CAN_VIEW:
      return isSetCanView();
    case DATASOURCEID:
      return isSetDatasourceid();
    case JUSTIFICATION:
      return isSetJustification();
    case BUCKET_VALUE:
      return isSetBucketValue();
    case BT_VISIBILITY:
      return isSetBtVisibility();
    case VISIBILITY:
      return isSetVisibility();
    case HYPOTHESIS_FEATURES:
      return isSetHypothesisFeatures();
    case CREATED:
      return isSetCreated();
    case UPDATED:
      return isSetUpdated();
    case EXECUTED:
      return isSetExecuted();
    case QUERIES:
      return isSetQueries();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof THypothesis)
      return this.equals((THypothesis)that);
    return false;
  }

  public boolean equals(THypothesis that) {
    if (that == null)
      return false;

    boolean this_present_owner = true && this.isSetOwner();
    boolean that_present_owner = true && that.isSetOwner();
    if (this_present_owner || that_present_owner) {
      if (!(this_present_owner && that_present_owner))
        return false;
      if (!this.owner.equals(that.owner))
        return false;
    }

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_bucketid = true && this.isSetBucketid();
    boolean that_present_bucketid = true && that.isSetBucketid();
    if (this_present_bucketid || that_present_bucketid) {
      if (!(this_present_bucketid && that_present_bucketid))
        return false;
      if (!this.bucketid.equals(that.bucketid))
        return false;
    }

    boolean this_present_canEdit = true && this.isSetCanEdit();
    boolean that_present_canEdit = true && that.isSetCanEdit();
    if (this_present_canEdit || that_present_canEdit) {
      if (!(this_present_canEdit && that_present_canEdit))
        return false;
      if (!this.canEdit.equals(that.canEdit))
        return false;
    }

    boolean this_present_canView = true && this.isSetCanView();
    boolean that_present_canView = true && that.isSetCanView();
    if (this_present_canView || that_present_canView) {
      if (!(this_present_canView && that_present_canView))
        return false;
      if (!this.canView.equals(that.canView))
        return false;
    }

    boolean this_present_datasourceid = true && this.isSetDatasourceid();
    boolean that_present_datasourceid = true && that.isSetDatasourceid();
    if (this_present_datasourceid || that_present_datasourceid) {
      if (!(this_present_datasourceid && that_present_datasourceid))
        return false;
      if (!this.datasourceid.equals(that.datasourceid))
        return false;
    }

    boolean this_present_justification = true && this.isSetJustification();
    boolean that_present_justification = true && that.isSetJustification();
    if (this_present_justification || that_present_justification) {
      if (!(this_present_justification && that_present_justification))
        return false;
      if (!this.justification.equals(that.justification))
        return false;
    }

    boolean this_present_bucketValue = true && this.isSetBucketValue();
    boolean that_present_bucketValue = true && that.isSetBucketValue();
    if (this_present_bucketValue || that_present_bucketValue) {
      if (!(this_present_bucketValue && that_present_bucketValue))
        return false;
      if (!this.bucketValue.equals(that.bucketValue))
        return false;
    }

    boolean this_present_btVisibility = true && this.isSetBtVisibility();
    boolean that_present_btVisibility = true && that.isSetBtVisibility();
    if (this_present_btVisibility || that_present_btVisibility) {
      if (!(this_present_btVisibility && that_present_btVisibility))
        return false;
      if (!this.btVisibility.equals(that.btVisibility))
        return false;
    }

    boolean this_present_visibility = true && this.isSetVisibility();
    boolean that_present_visibility = true && that.isSetVisibility();
    if (this_present_visibility || that_present_visibility) {
      if (!(this_present_visibility && that_present_visibility))
        return false;
      if (!this.visibility.equals(that.visibility))
        return false;
    }

    boolean this_present_hypothesisFeatures = true && this.isSetHypothesisFeatures();
    boolean that_present_hypothesisFeatures = true && that.isSetHypothesisFeatures();
    if (this_present_hypothesisFeatures || that_present_hypothesisFeatures) {
      if (!(this_present_hypothesisFeatures && that_present_hypothesisFeatures))
        return false;
      if (!this.hypothesisFeatures.equals(that.hypothesisFeatures))
        return false;
    }

    boolean this_present_created = true;
    boolean that_present_created = true;
    if (this_present_created || that_present_created) {
      if (!(this_present_created && that_present_created))
        return false;
      if (this.created != that.created)
        return false;
    }

    boolean this_present_updated = true;
    boolean that_present_updated = true;
    if (this_present_updated || that_present_updated) {
      if (!(this_present_updated && that_present_updated))
        return false;
      if (this.updated != that.updated)
        return false;
    }

    boolean this_present_executed = true;
    boolean that_present_executed = true;
    if (this_present_executed || that_present_executed) {
      if (!(this_present_executed && that_present_executed))
        return false;
      if (this.executed != that.executed)
        return false;
    }

    boolean this_present_queries = true && this.isSetQueries();
    boolean that_present_queries = true && that.isSetQueries();
    if (this_present_queries || that_present_queries) {
      if (!(this_present_queries && that_present_queries))
        return false;
      if (!this.queries.equals(that.queries))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(THypothesis other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    THypothesis typedOther = (THypothesis)other;

    lastComparison = Boolean.valueOf(isSetOwner()).compareTo(typedOther.isSetOwner());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOwner()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.owner, typedOther.owner);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBucketid()).compareTo(typedOther.isSetBucketid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBucketid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bucketid, typedOther.bucketid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCanEdit()).compareTo(typedOther.isSetCanEdit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCanEdit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.canEdit, typedOther.canEdit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCanView()).compareTo(typedOther.isSetCanView());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCanView()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.canView, typedOther.canView);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDatasourceid()).compareTo(typedOther.isSetDatasourceid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDatasourceid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datasourceid, typedOther.datasourceid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJustification()).compareTo(typedOther.isSetJustification());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJustification()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.justification, typedOther.justification);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBucketValue()).compareTo(typedOther.isSetBucketValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBucketValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bucketValue, typedOther.bucketValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBtVisibility()).compareTo(typedOther.isSetBtVisibility());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBtVisibility()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.btVisibility, typedOther.btVisibility);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVisibility()).compareTo(typedOther.isSetVisibility());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVisibility()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.visibility, typedOther.visibility);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHypothesisFeatures()).compareTo(typedOther.isSetHypothesisFeatures());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHypothesisFeatures()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hypothesisFeatures, typedOther.hypothesisFeatures);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreated()).compareTo(typedOther.isSetCreated());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreated()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.created, typedOther.created);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdated()).compareTo(typedOther.isSetUpdated());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdated()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updated, typedOther.updated);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExecuted()).compareTo(typedOther.isSetExecuted());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExecuted()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.executed, typedOther.executed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQueries()).compareTo(typedOther.isSetQueries());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueries()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queries, typedOther.queries);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // OWNER
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.owner = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // ID
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.id = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // NAME
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.name = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // BUCKETID
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.bucketid = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // CAN_EDIT
          if (field.type == org.apache.thrift.protocol.TType.LIST) {
            {
              org.apache.thrift.protocol.TList _list20 = iprot.readListBegin();
              this.canEdit = new ArrayList<String>(_list20.size);
              for (int _i21 = 0; _i21 < _list20.size; ++_i21)
              {
                String _elem22;
                _elem22 = iprot.readString();
                this.canEdit.add(_elem22);
              }
              iprot.readListEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // CAN_VIEW
          if (field.type == org.apache.thrift.protocol.TType.LIST) {
            {
              org.apache.thrift.protocol.TList _list23 = iprot.readListBegin();
              this.canView = new ArrayList<String>(_list23.size);
              for (int _i24 = 0; _i24 < _list23.size; ++_i24)
              {
                String _elem25;
                _elem25 = iprot.readString();
                this.canView.add(_elem25);
              }
              iprot.readListEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // DATASOURCEID
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.datasourceid = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 8: // JUSTIFICATION
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.justification = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 9: // BUCKET_VALUE
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.bucketValue = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 10: // BT_VISIBILITY
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.btVisibility = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 11: // VISIBILITY
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.visibility = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 12: // HYPOTHESIS_FEATURES
          if (field.type == org.apache.thrift.protocol.TType.SET) {
            {
              org.apache.thrift.protocol.TSet _set26 = iprot.readSetBegin();
              this.hypothesisFeatures = new HashSet<THypothesisFeature>(2*_set26.size);
              for (int _i27 = 0; _i27 < _set26.size; ++_i27)
              {
                THypothesisFeature _elem28;
                _elem28 = new THypothesisFeature();
                _elem28.read(iprot);
                this.hypothesisFeatures.add(_elem28);
              }
              iprot.readSetEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 13: // CREATED
          if (field.type == org.apache.thrift.protocol.TType.I64) {
            this.created = iprot.readI64();
            setCreatedIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 14: // UPDATED
          if (field.type == org.apache.thrift.protocol.TType.I64) {
            this.updated = iprot.readI64();
            setUpdatedIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 15: // EXECUTED
          if (field.type == org.apache.thrift.protocol.TType.I64) {
            this.executed = iprot.readI64();
            setExecutedIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 16: // QUERIES
          if (field.type == org.apache.thrift.protocol.TType.SET) {
            {
              org.apache.thrift.protocol.TSet _set29 = iprot.readSetBegin();
              this.queries = new HashSet<String>(2*_set29.size);
              for (int _i30 = 0; _i30 < _set29.size; ++_i30)
              {
                String _elem31;
                _elem31 = iprot.readString();
                this.queries.add(_elem31);
              }
              iprot.readSetEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.owner != null) {
      oprot.writeFieldBegin(OWNER_FIELD_DESC);
      oprot.writeString(this.owner);
      oprot.writeFieldEnd();
    }
    if (this.id != null) {
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeString(this.id);
      oprot.writeFieldEnd();
    }
    if (this.name != null) {
      oprot.writeFieldBegin(NAME_FIELD_DESC);
      oprot.writeString(this.name);
      oprot.writeFieldEnd();
    }
    if (this.bucketid != null) {
      oprot.writeFieldBegin(BUCKETID_FIELD_DESC);
      oprot.writeString(this.bucketid);
      oprot.writeFieldEnd();
    }
    if (this.canEdit != null) {
      oprot.writeFieldBegin(CAN_EDIT_FIELD_DESC);
      {
        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, this.canEdit.size()));
        for (String _iter32 : this.canEdit)
        {
          oprot.writeString(_iter32);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.canView != null) {
      oprot.writeFieldBegin(CAN_VIEW_FIELD_DESC);
      {
        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, this.canView.size()));
        for (String _iter33 : this.canView)
        {
          oprot.writeString(_iter33);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.datasourceid != null) {
      oprot.writeFieldBegin(DATASOURCEID_FIELD_DESC);
      oprot.writeString(this.datasourceid);
      oprot.writeFieldEnd();
    }
    if (this.justification != null) {
      oprot.writeFieldBegin(JUSTIFICATION_FIELD_DESC);
      oprot.writeString(this.justification);
      oprot.writeFieldEnd();
    }
    if (this.bucketValue != null) {
      oprot.writeFieldBegin(BUCKET_VALUE_FIELD_DESC);
      oprot.writeString(this.bucketValue);
      oprot.writeFieldEnd();
    }
    if (this.btVisibility != null) {
      oprot.writeFieldBegin(BT_VISIBILITY_FIELD_DESC);
      oprot.writeString(this.btVisibility);
      oprot.writeFieldEnd();
    }
    if (this.visibility != null) {
      oprot.writeFieldBegin(VISIBILITY_FIELD_DESC);
      oprot.writeString(this.visibility);
      oprot.writeFieldEnd();
    }
    if (this.hypothesisFeatures != null) {
      oprot.writeFieldBegin(HYPOTHESIS_FEATURES_FIELD_DESC);
      {
        oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, this.hypothesisFeatures.size()));
        for (THypothesisFeature _iter34 : this.hypothesisFeatures)
        {
          _iter34.write(oprot);
        }
        oprot.writeSetEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(CREATED_FIELD_DESC);
    oprot.writeI64(this.created);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(UPDATED_FIELD_DESC);
    oprot.writeI64(this.updated);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(EXECUTED_FIELD_DESC);
    oprot.writeI64(this.executed);
    oprot.writeFieldEnd();
    if (this.queries != null) {
      oprot.writeFieldBegin(QUERIES_FIELD_DESC);
      {
        oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, this.queries.size()));
        for (String _iter35 : this.queries)
        {
          oprot.writeString(_iter35);
        }
        oprot.writeSetEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("THypothesis(");
    boolean first = true;

    sb.append("owner:");
    if (this.owner == null) {
      sb.append("null");
    } else {
      sb.append(this.owner);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bucketid:");
    if (this.bucketid == null) {
      sb.append("null");
    } else {
      sb.append(this.bucketid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("canEdit:");
    if (this.canEdit == null) {
      sb.append("null");
    } else {
      sb.append(this.canEdit);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("canView:");
    if (this.canView == null) {
      sb.append("null");
    } else {
      sb.append(this.canView);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("datasourceid:");
    if (this.datasourceid == null) {
      sb.append("null");
    } else {
      sb.append(this.datasourceid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("justification:");
    if (this.justification == null) {
      sb.append("null");
    } else {
      sb.append(this.justification);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bucketValue:");
    if (this.bucketValue == null) {
      sb.append("null");
    } else {
      sb.append(this.bucketValue);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("btVisibility:");
    if (this.btVisibility == null) {
      sb.append("null");
    } else {
      sb.append(this.btVisibility);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("visibility:");
    if (this.visibility == null) {
      sb.append("null");
    } else {
      sb.append(this.visibility);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("hypothesisFeatures:");
    if (this.hypothesisFeatures == null) {
      sb.append("null");
    } else {
      sb.append(this.hypothesisFeatures);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("created:");
    sb.append(this.created);
    first = false;
    if (!first) sb.append(", ");
    sb.append("updated:");
    sb.append(this.updated);
    first = false;
    if (!first) sb.append(", ");
    sb.append("executed:");
    sb.append(this.executed);
    first = false;
    if (!first) sb.append(", ");
    sb.append("queries:");
    if (this.queries == null) {
      sb.append("null");
    } else {
      sb.append(this.queries);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

