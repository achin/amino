/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com._42six.amino.common.thrift;

import java.util.*;

public class TBucketMetadata implements org.apache.thrift.TBase<TBucketMetadata, TBucketMetadata._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TBucketMetadata");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField DISPLAY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("displayName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField VISIBILITY_FIELD_DESC = new org.apache.thrift.protocol.TField("visibility", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField BT_VISIBILITY_FIELD_DESC = new org.apache.thrift.protocol.TField("btVisibility", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField DOMAIN_ID_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("domainIdName", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField DOMAIN_ID_DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("domainIdDescription", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.I64, (short)8);

  public String id;
  /**
   * Name of bucket
   */
  public String name;
  /**
   * Display name of bucket
   */
  public String displayName;
  /**
   * Visibility of bucket
   */
  public String visibility;
  /**
   * Accumulo columnVisibility string
   */
  public String btVisibility;
  /**
   * Name of the domain id
   */
  public String domainIdName;
  /**
   * Description of the domain id
   */
  public String domainIdDescription;
  /**
   * Timestamp in milliseconds of when the job ran
   */
  public long timestamp;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    /**
     * Name of bucket
     */
    NAME((short)2, "name"),
    /**
     * Display name of bucket
     */
    DISPLAY_NAME((short)3, "displayName"),
    /**
     * Visibility of bucket
     */
    VISIBILITY((short)4, "visibility"),
    /**
     * Accumulo columnVisibility string
     */
    BT_VISIBILITY((short)5, "btVisibility"),
    /**
     * Name of the domain id
     */
    DOMAIN_ID_NAME((short)6, "domainIdName"),
    /**
     * Description of the domain id
     */
    DOMAIN_ID_DESCRIPTION((short)7, "domainIdDescription"),
    /**
     * Timestamp in milliseconds of when the job ran
     */
    TIMESTAMP((short)8, "timestamp");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // NAME
          return NAME;
        case 3: // DISPLAY_NAME
          return DISPLAY_NAME;
        case 4: // VISIBILITY
          return VISIBILITY;
        case 5: // BT_VISIBILITY
          return BT_VISIBILITY;
        case 6: // DOMAIN_ID_NAME
          return DOMAIN_ID_NAME;
        case 7: // DOMAIN_ID_DESCRIPTION
          return DOMAIN_ID_DESCRIPTION;
        case 8: // TIMESTAMP
          return TIMESTAMP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TIMESTAMP_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DISPLAY_NAME, new org.apache.thrift.meta_data.FieldMetaData("displayName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VISIBILITY, new org.apache.thrift.meta_data.FieldMetaData("visibility", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BT_VISIBILITY, new org.apache.thrift.meta_data.FieldMetaData("btVisibility", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DOMAIN_ID_NAME, new org.apache.thrift.meta_data.FieldMetaData("domainIdName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DOMAIN_ID_DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("domainIdDescription", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TBucketMetadata.class, metaDataMap);
  }

  public TBucketMetadata() {
  }

  public TBucketMetadata(
    String id,
    String name,
    String displayName,
    String visibility,
    String btVisibility,
    String domainIdName,
    String domainIdDescription,
    long timestamp)
  {
    this();
    this.id = id;
    this.name = name;
    this.displayName = displayName;
    this.visibility = visibility;
    this.btVisibility = btVisibility;
    this.domainIdName = domainIdName;
    this.domainIdDescription = domainIdDescription;
    this.timestamp = timestamp;
    setTimestampIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TBucketMetadata(TBucketMetadata other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetDisplayName()) {
      this.displayName = other.displayName;
    }
    if (other.isSetVisibility()) {
      this.visibility = other.visibility;
    }
    if (other.isSetBtVisibility()) {
      this.btVisibility = other.btVisibility;
    }
    if (other.isSetDomainIdName()) {
      this.domainIdName = other.domainIdName;
    }
    if (other.isSetDomainIdDescription()) {
      this.domainIdDescription = other.domainIdDescription;
    }
    this.timestamp = other.timestamp;
  }

  public TBucketMetadata deepCopy() {
    return new TBucketMetadata(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.name = null;
    this.displayName = null;
    this.visibility = null;
    this.btVisibility = null;
    this.domainIdName = null;
    this.domainIdDescription = null;
    setTimestampIsSet(false);
    this.timestamp = 0;
  }

  public String getId() {
    return this.id;
  }

  public TBucketMetadata setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  /**
   * Name of bucket
   */
  public String getName() {
    return this.name;
  }

  /**
   * Name of bucket
   */
  public TBucketMetadata setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  /**
   * Display name of bucket
   */
  public String getDisplayName() {
    return this.displayName;
  }

  /**
   * Display name of bucket
   */
  public TBucketMetadata setDisplayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  public void unsetDisplayName() {
    this.displayName = null;
  }

  /** Returns true if field displayName is set (has been assigned a value) and false otherwise */
  public boolean isSetDisplayName() {
    return this.displayName != null;
  }

  public void setDisplayNameIsSet(boolean value) {
    if (!value) {
      this.displayName = null;
    }
  }

  /**
   * Visibility of bucket
   */
  public String getVisibility() {
    return this.visibility;
  }

  /**
   * Visibility of bucket
   */
  public TBucketMetadata setVisibility(String visibility) {
    this.visibility = visibility;
    return this;
  }

  public void unsetVisibility() {
    this.visibility = null;
  }

  /** Returns true if field visibility is set (has been assigned a value) and false otherwise */
  public boolean isSetVisibility() {
    return this.visibility != null;
  }

  public void setVisibilityIsSet(boolean value) {
    if (!value) {
      this.visibility = null;
    }
  }

  /**
   * Accumulo columnVisibility string
   */
  public String getBtVisibility() {
    return this.btVisibility;
  }

  /**
   * Accumulo columnVisibility string
   */
  public TBucketMetadata setBtVisibility(String btVisibility) {
    this.btVisibility = btVisibility;
    return this;
  }

  public void unsetBtVisibility() {
    this.btVisibility = null;
  }

  /** Returns true if field btVisibility is set (has been assigned a value) and false otherwise */
  public boolean isSetBtVisibility() {
    return this.btVisibility != null;
  }

  public void setBtVisibilityIsSet(boolean value) {
    if (!value) {
      this.btVisibility = null;
    }
  }

  /**
   * Name of the domain id
   */
  public String getDomainIdName() {
    return this.domainIdName;
  }

  /**
   * Name of the domain id
   */
  public TBucketMetadata setDomainIdName(String domainIdName) {
    this.domainIdName = domainIdName;
    return this;
  }

  public void unsetDomainIdName() {
    this.domainIdName = null;
  }

  /** Returns true if field domainIdName is set (has been assigned a value) and false otherwise */
  public boolean isSetDomainIdName() {
    return this.domainIdName != null;
  }

  public void setDomainIdNameIsSet(boolean value) {
    if (!value) {
      this.domainIdName = null;
    }
  }

  /**
   * Description of the domain id
   */
  public String getDomainIdDescription() {
    return this.domainIdDescription;
  }

  /**
   * Description of the domain id
   */
  public TBucketMetadata setDomainIdDescription(String domainIdDescription) {
    this.domainIdDescription = domainIdDescription;
    return this;
  }

  public void unsetDomainIdDescription() {
    this.domainIdDescription = null;
  }

  /** Returns true if field domainIdDescription is set (has been assigned a value) and false otherwise */
  public boolean isSetDomainIdDescription() {
    return this.domainIdDescription != null;
  }

  public void setDomainIdDescriptionIsSet(boolean value) {
    if (!value) {
      this.domainIdDescription = null;
    }
  }

  /**
   * Timestamp in milliseconds of when the job ran
   */
  public long getTimestamp() {
    return this.timestamp;
  }

  /**
   * Timestamp in milliseconds of when the job ran
   */
  public TBucketMetadata setTimestamp(long timestamp) {
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    return this;
  }

  public void unsetTimestamp() {
    __isset_bit_vector.clear(__TIMESTAMP_ISSET_ID);
  }

  /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetTimestamp() {
    return __isset_bit_vector.get(__TIMESTAMP_ISSET_ID);
  }

  public void setTimestampIsSet(boolean value) {
    __isset_bit_vector.set(__TIMESTAMP_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case DISPLAY_NAME:
      if (value == null) {
        unsetDisplayName();
      } else {
        setDisplayName((String)value);
      }
      break;

    case VISIBILITY:
      if (value == null) {
        unsetVisibility();
      } else {
        setVisibility((String)value);
      }
      break;

    case BT_VISIBILITY:
      if (value == null) {
        unsetBtVisibility();
      } else {
        setBtVisibility((String)value);
      }
      break;

    case DOMAIN_ID_NAME:
      if (value == null) {
        unsetDomainIdName();
      } else {
        setDomainIdName((String)value);
      }
      break;

    case DOMAIN_ID_DESCRIPTION:
      if (value == null) {
        unsetDomainIdDescription();
      } else {
        setDomainIdDescription((String)value);
      }
      break;

    case TIMESTAMP:
      if (value == null) {
        unsetTimestamp();
      } else {
        setTimestamp((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case NAME:
      return getName();

    case DISPLAY_NAME:
      return getDisplayName();

    case VISIBILITY:
      return getVisibility();

    case BT_VISIBILITY:
      return getBtVisibility();

    case DOMAIN_ID_NAME:
      return getDomainIdName();

    case DOMAIN_ID_DESCRIPTION:
      return getDomainIdDescription();

    case TIMESTAMP:
      return new Long(getTimestamp());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case NAME:
      return isSetName();
    case DISPLAY_NAME:
      return isSetDisplayName();
    case VISIBILITY:
      return isSetVisibility();
    case BT_VISIBILITY:
      return isSetBtVisibility();
    case DOMAIN_ID_NAME:
      return isSetDomainIdName();
    case DOMAIN_ID_DESCRIPTION:
      return isSetDomainIdDescription();
    case TIMESTAMP:
      return isSetTimestamp();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TBucketMetadata)
      return this.equals((TBucketMetadata)that);
    return false;
  }

  public boolean equals(TBucketMetadata that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_displayName = true && this.isSetDisplayName();
    boolean that_present_displayName = true && that.isSetDisplayName();
    if (this_present_displayName || that_present_displayName) {
      if (!(this_present_displayName && that_present_displayName))
        return false;
      if (!this.displayName.equals(that.displayName))
        return false;
    }

    boolean this_present_visibility = true && this.isSetVisibility();
    boolean that_present_visibility = true && that.isSetVisibility();
    if (this_present_visibility || that_present_visibility) {
      if (!(this_present_visibility && that_present_visibility))
        return false;
      if (!this.visibility.equals(that.visibility))
        return false;
    }

    boolean this_present_btVisibility = true && this.isSetBtVisibility();
    boolean that_present_btVisibility = true && that.isSetBtVisibility();
    if (this_present_btVisibility || that_present_btVisibility) {
      if (!(this_present_btVisibility && that_present_btVisibility))
        return false;
      if (!this.btVisibility.equals(that.btVisibility))
        return false;
    }

    boolean this_present_domainIdName = true && this.isSetDomainIdName();
    boolean that_present_domainIdName = true && that.isSetDomainIdName();
    if (this_present_domainIdName || that_present_domainIdName) {
      if (!(this_present_domainIdName && that_present_domainIdName))
        return false;
      if (!this.domainIdName.equals(that.domainIdName))
        return false;
    }

    boolean this_present_domainIdDescription = true && this.isSetDomainIdDescription();
    boolean that_present_domainIdDescription = true && that.isSetDomainIdDescription();
    if (this_present_domainIdDescription || that_present_domainIdDescription) {
      if (!(this_present_domainIdDescription && that_present_domainIdDescription))
        return false;
      if (!this.domainIdDescription.equals(that.domainIdDescription))
        return false;
    }

    boolean this_present_timestamp = true;
    boolean that_present_timestamp = true;
    if (this_present_timestamp || that_present_timestamp) {
      if (!(this_present_timestamp && that_present_timestamp))
        return false;
      if (this.timestamp != that.timestamp)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TBucketMetadata other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TBucketMetadata typedOther = (TBucketMetadata)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDisplayName()).compareTo(typedOther.isSetDisplayName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDisplayName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.displayName, typedOther.displayName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVisibility()).compareTo(typedOther.isSetVisibility());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVisibility()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.visibility, typedOther.visibility);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBtVisibility()).compareTo(typedOther.isSetBtVisibility());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBtVisibility()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.btVisibility, typedOther.btVisibility);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDomainIdName()).compareTo(typedOther.isSetDomainIdName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDomainIdName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.domainIdName, typedOther.domainIdName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDomainIdDescription()).compareTo(typedOther.isSetDomainIdDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDomainIdDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.domainIdDescription, typedOther.domainIdDescription);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(typedOther.isSetTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, typedOther.timestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // ID
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.id = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // NAME
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.name = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // DISPLAY_NAME
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.displayName = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // VISIBILITY
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.visibility = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // BT_VISIBILITY
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.btVisibility = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // DOMAIN_ID_NAME
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.domainIdName = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // DOMAIN_ID_DESCRIPTION
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.domainIdDescription = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 8: // TIMESTAMP
          if (field.type == org.apache.thrift.protocol.TType.I64) {
            this.timestamp = iprot.readI64();
            setTimestampIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.id != null) {
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeString(this.id);
      oprot.writeFieldEnd();
    }
    if (this.name != null) {
      oprot.writeFieldBegin(NAME_FIELD_DESC);
      oprot.writeString(this.name);
      oprot.writeFieldEnd();
    }
    if (this.displayName != null) {
      oprot.writeFieldBegin(DISPLAY_NAME_FIELD_DESC);
      oprot.writeString(this.displayName);
      oprot.writeFieldEnd();
    }
    if (this.visibility != null) {
      oprot.writeFieldBegin(VISIBILITY_FIELD_DESC);
      oprot.writeString(this.visibility);
      oprot.writeFieldEnd();
    }
    if (this.btVisibility != null) {
      oprot.writeFieldBegin(BT_VISIBILITY_FIELD_DESC);
      oprot.writeString(this.btVisibility);
      oprot.writeFieldEnd();
    }
    if (this.domainIdName != null) {
      oprot.writeFieldBegin(DOMAIN_ID_NAME_FIELD_DESC);
      oprot.writeString(this.domainIdName);
      oprot.writeFieldEnd();
    }
    if (this.domainIdDescription != null) {
      oprot.writeFieldBegin(DOMAIN_ID_DESCRIPTION_FIELD_DESC);
      oprot.writeString(this.domainIdDescription);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
    oprot.writeI64(this.timestamp);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TBucketMetadata(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("displayName:");
    if (this.displayName == null) {
      sb.append("null");
    } else {
      sb.append(this.displayName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("visibility:");
    if (this.visibility == null) {
      sb.append("null");
    } else {
      sb.append(this.visibility);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("btVisibility:");
    if (this.btVisibility == null) {
      sb.append("null");
    } else {
      sb.append(this.btVisibility);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("domainIdName:");
    if (this.domainIdName == null) {
      sb.append("null");
    } else {
      sb.append(this.domainIdName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("domainIdDescription:");
    if (this.domainIdDescription == null) {
      sb.append("null");
    } else {
      sb.append(this.domainIdDescription);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("timestamp:");
    sb.append(this.timestamp);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

