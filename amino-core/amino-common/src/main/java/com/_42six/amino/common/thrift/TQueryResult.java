/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com._42six.amino.common.thrift;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TQueryResult implements org.apache.thrift.TBase<TQueryResult, TQueryResult._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TQueryResult");

  private static final org.apache.thrift.protocol.TField OWNER_FIELD_DESC = new org.apache.thrift.protocol.TField("owner", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField RESULT_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("result_count", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField HYPOTHESISID_FIELD_DESC = new org.apache.thrift.protocol.TField("hypothesisid", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField HYPOTHESISNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("hypothesisname", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField BUCKETID_FIELD_DESC = new org.apache.thrift.protocol.TField("bucketid", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField HYPOTHESIS_AT_RUNTIME_FIELD_DESC = new org.apache.thrift.protocol.TField("hypothesis_at_runtime", org.apache.thrift.protocol.TType.STRUCT, (short)8);
  private static final org.apache.thrift.protocol.TField ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("error", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField RESULT_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("result_set", org.apache.thrift.protocol.TType.LIST, (short)10);

  public String owner;
  public String id;
  public long timestamp;
  public long result_count;
  public String hypothesisid;
  public String hypothesisname;
  public String bucketid;
  public THypothesis hypothesis_at_runtime;
  public String error;
  public List<TQueryEntry> result_set;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    OWNER((short)1, "owner"),
    ID((short)2, "id"),
    TIMESTAMP((short)3, "timestamp"),
    RESULT_COUNT((short)4, "result_count"),
    HYPOTHESISID((short)5, "hypothesisid"),
    HYPOTHESISNAME((short)6, "hypothesisname"),
    BUCKETID((short)7, "bucketid"),
    HYPOTHESIS_AT_RUNTIME((short)8, "hypothesis_at_runtime"),
    ERROR((short)9, "error"),
    RESULT_SET((short)10, "result_set");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // OWNER
          return OWNER;
        case 2: // ID
          return ID;
        case 3: // TIMESTAMP
          return TIMESTAMP;
        case 4: // RESULT_COUNT
          return RESULT_COUNT;
        case 5: // HYPOTHESISID
          return HYPOTHESISID;
        case 6: // HYPOTHESISNAME
          return HYPOTHESISNAME;
        case 7: // BUCKETID
          return BUCKETID;
        case 8: // HYPOTHESIS_AT_RUNTIME
          return HYPOTHESIS_AT_RUNTIME;
        case 9: // ERROR
          return ERROR;
        case 10: // RESULT_SET
          return RESULT_SET;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TIMESTAMP_ISSET_ID = 0;
  private static final int __RESULT_COUNT_ISSET_ID = 1;
  private BitSet __isset_bit_vector = new BitSet(2);

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.OWNER, new org.apache.thrift.meta_data.FieldMetaData("owner", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.RESULT_COUNT, new org.apache.thrift.meta_data.FieldMetaData("result_count", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.HYPOTHESISID, new org.apache.thrift.meta_data.FieldMetaData("hypothesisid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HYPOTHESISNAME, new org.apache.thrift.meta_data.FieldMetaData("hypothesisname", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BUCKETID, new org.apache.thrift.meta_data.FieldMetaData("bucketid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HYPOTHESIS_AT_RUNTIME, new org.apache.thrift.meta_data.FieldMetaData("hypothesis_at_runtime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, THypothesis.class)));
    tmpMap.put(_Fields.ERROR, new org.apache.thrift.meta_data.FieldMetaData("error", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RESULT_SET, new org.apache.thrift.meta_data.FieldMetaData("result_set", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TQueryEntry.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TQueryResult.class, metaDataMap);
  }

  public TQueryResult() {
  }

  public TQueryResult(
    String owner,
    String id,
    long timestamp,
    long result_count,
    String hypothesisid,
    String hypothesisname,
    String bucketid,
    THypothesis hypothesis_at_runtime,
    String error,
    List<TQueryEntry> result_set)
  {
    this();
    this.owner = owner;
    this.id = id;
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    this.result_count = result_count;
    setResult_countIsSet(true);
    this.hypothesisid = hypothesisid;
    this.hypothesisname = hypothesisname;
    this.bucketid = bucketid;
    this.hypothesis_at_runtime = hypothesis_at_runtime;
    this.error = error;
    this.result_set = result_set;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TQueryResult(TQueryResult other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetOwner()) {
      this.owner = other.owner;
    }
    if (other.isSetId()) {
      this.id = other.id;
    }
    this.timestamp = other.timestamp;
    this.result_count = other.result_count;
    if (other.isSetHypothesisid()) {
      this.hypothesisid = other.hypothesisid;
    }
    if (other.isSetHypothesisname()) {
      this.hypothesisname = other.hypothesisname;
    }
    if (other.isSetBucketid()) {
      this.bucketid = other.bucketid;
    }
    if (other.isSetHypothesis_at_runtime()) {
      this.hypothesis_at_runtime = new THypothesis(other.hypothesis_at_runtime);
    }
    if (other.isSetError()) {
      this.error = other.error;
    }
    if (other.isSetResult_set()) {
      List<TQueryEntry> __this__result_set = new ArrayList<TQueryEntry>();
      for (TQueryEntry other_element : other.result_set) {
        __this__result_set.add(new TQueryEntry(other_element));
      }
      this.result_set = __this__result_set;
    }
  }

  public TQueryResult deepCopy() {
    return new TQueryResult(this);
  }

  @Override
  public void clear() {
    this.owner = null;
    this.id = null;
    setTimestampIsSet(false);
    this.timestamp = 0;
    setResult_countIsSet(false);
    this.result_count = 0;
    this.hypothesisid = null;
    this.hypothesisname = null;
    this.bucketid = null;
    this.hypothesis_at_runtime = null;
    this.error = null;
    this.result_set = null;
  }

  public String getOwner() {
    return this.owner;
  }

  public TQueryResult setOwner(String owner) {
    this.owner = owner;
    return this;
  }

  public void unsetOwner() {
    this.owner = null;
  }

  /** Returns true if field owner is set (has been assigned a value) and false otherwise */
  public boolean isSetOwner() {
    return this.owner != null;
  }

  public void setOwnerIsSet(boolean value) {
    if (!value) {
      this.owner = null;
    }
  }

  public String getId() {
    return this.id;
  }

  public TQueryResult setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public long getTimestamp() {
    return this.timestamp;
  }

  public TQueryResult setTimestamp(long timestamp) {
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    return this;
  }

  public void unsetTimestamp() {
    __isset_bit_vector.clear(__TIMESTAMP_ISSET_ID);
  }

  /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetTimestamp() {
    return __isset_bit_vector.get(__TIMESTAMP_ISSET_ID);
  }

  public void setTimestampIsSet(boolean value) {
    __isset_bit_vector.set(__TIMESTAMP_ISSET_ID, value);
  }

  public long getResult_count() {
    return this.result_count;
  }

  public TQueryResult setResult_count(long result_count) {
    this.result_count = result_count;
    setResult_countIsSet(true);
    return this;
  }

  public void unsetResult_count() {
    __isset_bit_vector.clear(__RESULT_COUNT_ISSET_ID);
  }

  /** Returns true if field result_count is set (has been assigned a value) and false otherwise */
  public boolean isSetResult_count() {
    return __isset_bit_vector.get(__RESULT_COUNT_ISSET_ID);
  }

  public void setResult_countIsSet(boolean value) {
    __isset_bit_vector.set(__RESULT_COUNT_ISSET_ID, value);
  }

  public String getHypothesisid() {
    return this.hypothesisid;
  }

  public TQueryResult setHypothesisid(String hypothesisid) {
    this.hypothesisid = hypothesisid;
    return this;
  }

  public void unsetHypothesisid() {
    this.hypothesisid = null;
  }

  /** Returns true if field hypothesisid is set (has been assigned a value) and false otherwise */
  public boolean isSetHypothesisid() {
    return this.hypothesisid != null;
  }

  public void setHypothesisidIsSet(boolean value) {
    if (!value) {
      this.hypothesisid = null;
    }
  }

  public String getHypothesisname() {
    return this.hypothesisname;
  }

  public TQueryResult setHypothesisname(String hypothesisname) {
    this.hypothesisname = hypothesisname;
    return this;
  }

  public void unsetHypothesisname() {
    this.hypothesisname = null;
  }

  /** Returns true if field hypothesisname is set (has been assigned a value) and false otherwise */
  public boolean isSetHypothesisname() {
    return this.hypothesisname != null;
  }

  public void setHypothesisnameIsSet(boolean value) {
    if (!value) {
      this.hypothesisname = null;
    }
  }

  public String getBucketid() {
    return this.bucketid;
  }

  public TQueryResult setBucketid(String bucketid) {
    this.bucketid = bucketid;
    return this;
  }

  public void unsetBucketid() {
    this.bucketid = null;
  }

  /** Returns true if field bucketid is set (has been assigned a value) and false otherwise */
  public boolean isSetBucketid() {
    return this.bucketid != null;
  }

  public void setBucketidIsSet(boolean value) {
    if (!value) {
      this.bucketid = null;
    }
  }

  public THypothesis getHypothesis_at_runtime() {
    return this.hypothesis_at_runtime;
  }

  public TQueryResult setHypothesis_at_runtime(THypothesis hypothesis_at_runtime) {
    this.hypothesis_at_runtime = hypothesis_at_runtime;
    return this;
  }

  public void unsetHypothesis_at_runtime() {
    this.hypothesis_at_runtime = null;
  }

  /** Returns true if field hypothesis_at_runtime is set (has been assigned a value) and false otherwise */
  public boolean isSetHypothesis_at_runtime() {
    return this.hypothesis_at_runtime != null;
  }

  public void setHypothesis_at_runtimeIsSet(boolean value) {
    if (!value) {
      this.hypothesis_at_runtime = null;
    }
  }

  public String getError() {
    return this.error;
  }

  public TQueryResult setError(String error) {
    this.error = error;
    return this;
  }

  public void unsetError() {
    this.error = null;
  }

  /** Returns true if field error is set (has been assigned a value) and false otherwise */
  public boolean isSetError() {
    return this.error != null;
  }

  public void setErrorIsSet(boolean value) {
    if (!value) {
      this.error = null;
    }
  }

  public int getResult_setSize() {
    return (this.result_set == null) ? 0 : this.result_set.size();
  }

  public java.util.Iterator<TQueryEntry> getResult_setIterator() {
    return (this.result_set == null) ? null : this.result_set.iterator();
  }

  public void addToResult_set(TQueryEntry elem) {
    if (this.result_set == null) {
      this.result_set = new ArrayList<TQueryEntry>();
    }
    this.result_set.add(elem);
  }

  public List<TQueryEntry> getResult_set() {
    return this.result_set;
  }

  public TQueryResult setResult_set(List<TQueryEntry> result_set) {
    this.result_set = result_set;
    return this;
  }

  public void unsetResult_set() {
    this.result_set = null;
  }

  /** Returns true if field result_set is set (has been assigned a value) and false otherwise */
  public boolean isSetResult_set() {
    return this.result_set != null;
  }

  public void setResult_setIsSet(boolean value) {
    if (!value) {
      this.result_set = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case OWNER:
      if (value == null) {
        unsetOwner();
      } else {
        setOwner((String)value);
      }
      break;

    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case TIMESTAMP:
      if (value == null) {
        unsetTimestamp();
      } else {
        setTimestamp((Long)value);
      }
      break;

    case RESULT_COUNT:
      if (value == null) {
        unsetResult_count();
      } else {
        setResult_count((Long)value);
      }
      break;

    case HYPOTHESISID:
      if (value == null) {
        unsetHypothesisid();
      } else {
        setHypothesisid((String)value);
      }
      break;

    case HYPOTHESISNAME:
      if (value == null) {
        unsetHypothesisname();
      } else {
        setHypothesisname((String)value);
      }
      break;

    case BUCKETID:
      if (value == null) {
        unsetBucketid();
      } else {
        setBucketid((String)value);
      }
      break;

    case HYPOTHESIS_AT_RUNTIME:
      if (value == null) {
        unsetHypothesis_at_runtime();
      } else {
        setHypothesis_at_runtime((THypothesis)value);
      }
      break;

    case ERROR:
      if (value == null) {
        unsetError();
      } else {
        setError((String)value);
      }
      break;

    case RESULT_SET:
      if (value == null) {
        unsetResult_set();
      } else {
        setResult_set((List<TQueryEntry>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case OWNER:
      return getOwner();

    case ID:
      return getId();

    case TIMESTAMP:
      return new Long(getTimestamp());

    case RESULT_COUNT:
      return new Long(getResult_count());

    case HYPOTHESISID:
      return getHypothesisid();

    case HYPOTHESISNAME:
      return getHypothesisname();

    case BUCKETID:
      return getBucketid();

    case HYPOTHESIS_AT_RUNTIME:
      return getHypothesis_at_runtime();

    case ERROR:
      return getError();

    case RESULT_SET:
      return getResult_set();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case OWNER:
      return isSetOwner();
    case ID:
      return isSetId();
    case TIMESTAMP:
      return isSetTimestamp();
    case RESULT_COUNT:
      return isSetResult_count();
    case HYPOTHESISID:
      return isSetHypothesisid();
    case HYPOTHESISNAME:
      return isSetHypothesisname();
    case BUCKETID:
      return isSetBucketid();
    case HYPOTHESIS_AT_RUNTIME:
      return isSetHypothesis_at_runtime();
    case ERROR:
      return isSetError();
    case RESULT_SET:
      return isSetResult_set();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TQueryResult)
      return this.equals((TQueryResult)that);
    return false;
  }

  public boolean equals(TQueryResult that) {
    if (that == null)
      return false;

    boolean this_present_owner = true && this.isSetOwner();
    boolean that_present_owner = true && that.isSetOwner();
    if (this_present_owner || that_present_owner) {
      if (!(this_present_owner && that_present_owner))
        return false;
      if (!this.owner.equals(that.owner))
        return false;
    }

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_timestamp = true;
    boolean that_present_timestamp = true;
    if (this_present_timestamp || that_present_timestamp) {
      if (!(this_present_timestamp && that_present_timestamp))
        return false;
      if (this.timestamp != that.timestamp)
        return false;
    }

    boolean this_present_result_count = true;
    boolean that_present_result_count = true;
    if (this_present_result_count || that_present_result_count) {
      if (!(this_present_result_count && that_present_result_count))
        return false;
      if (this.result_count != that.result_count)
        return false;
    }

    boolean this_present_hypothesisid = true && this.isSetHypothesisid();
    boolean that_present_hypothesisid = true && that.isSetHypothesisid();
    if (this_present_hypothesisid || that_present_hypothesisid) {
      if (!(this_present_hypothesisid && that_present_hypothesisid))
        return false;
      if (!this.hypothesisid.equals(that.hypothesisid))
        return false;
    }

    boolean this_present_hypothesisname = true && this.isSetHypothesisname();
    boolean that_present_hypothesisname = true && that.isSetHypothesisname();
    if (this_present_hypothesisname || that_present_hypothesisname) {
      if (!(this_present_hypothesisname && that_present_hypothesisname))
        return false;
      if (!this.hypothesisname.equals(that.hypothesisname))
        return false;
    }

    boolean this_present_bucketid = true && this.isSetBucketid();
    boolean that_present_bucketid = true && that.isSetBucketid();
    if (this_present_bucketid || that_present_bucketid) {
      if (!(this_present_bucketid && that_present_bucketid))
        return false;
      if (!this.bucketid.equals(that.bucketid))
        return false;
    }

    boolean this_present_hypothesis_at_runtime = true && this.isSetHypothesis_at_runtime();
    boolean that_present_hypothesis_at_runtime = true && that.isSetHypothesis_at_runtime();
    if (this_present_hypothesis_at_runtime || that_present_hypothesis_at_runtime) {
      if (!(this_present_hypothesis_at_runtime && that_present_hypothesis_at_runtime))
        return false;
      if (!this.hypothesis_at_runtime.equals(that.hypothesis_at_runtime))
        return false;
    }

    boolean this_present_error = true && this.isSetError();
    boolean that_present_error = true && that.isSetError();
    if (this_present_error || that_present_error) {
      if (!(this_present_error && that_present_error))
        return false;
      if (!this.error.equals(that.error))
        return false;
    }

    boolean this_present_result_set = true && this.isSetResult_set();
    boolean that_present_result_set = true && that.isSetResult_set();
    if (this_present_result_set || that_present_result_set) {
      if (!(this_present_result_set && that_present_result_set))
        return false;
      if (!this.result_set.equals(that.result_set))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TQueryResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TQueryResult typedOther = (TQueryResult)other;

    lastComparison = Boolean.valueOf(isSetOwner()).compareTo(typedOther.isSetOwner());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOwner()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.owner, typedOther.owner);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(typedOther.isSetTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, typedOther.timestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResult_count()).compareTo(typedOther.isSetResult_count());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResult_count()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.result_count, typedOther.result_count);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHypothesisid()).compareTo(typedOther.isSetHypothesisid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHypothesisid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hypothesisid, typedOther.hypothesisid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHypothesisname()).compareTo(typedOther.isSetHypothesisname());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHypothesisname()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hypothesisname, typedOther.hypothesisname);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBucketid()).compareTo(typedOther.isSetBucketid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBucketid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bucketid, typedOther.bucketid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHypothesis_at_runtime()).compareTo(typedOther.isSetHypothesis_at_runtime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHypothesis_at_runtime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hypothesis_at_runtime, typedOther.hypothesis_at_runtime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetError()).compareTo(typedOther.isSetError());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetError()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.error, typedOther.error);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResult_set()).compareTo(typedOther.isSetResult_set());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResult_set()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.result_set, typedOther.result_set);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // OWNER
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.owner = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // ID
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.id = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // TIMESTAMP
          if (field.type == org.apache.thrift.protocol.TType.I64) {
            this.timestamp = iprot.readI64();
            setTimestampIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // RESULT_COUNT
          if (field.type == org.apache.thrift.protocol.TType.I64) {
            this.result_count = iprot.readI64();
            setResult_countIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // HYPOTHESISID
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.hypothesisid = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // HYPOTHESISNAME
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.hypothesisname = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // BUCKETID
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.bucketid = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 8: // HYPOTHESIS_AT_RUNTIME
          if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
            this.hypothesis_at_runtime = new THypothesis();
            this.hypothesis_at_runtime.read(iprot);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 9: // ERROR
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.error = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 10: // RESULT_SET
          if (field.type == org.apache.thrift.protocol.TType.LIST) {
            {
              org.apache.thrift.protocol.TList _list48 = iprot.readListBegin();
              this.result_set = new ArrayList<TQueryEntry>(_list48.size);
              for (int _i49 = 0; _i49 < _list48.size; ++_i49)
              {
                TQueryEntry _elem50;
                _elem50 = new TQueryEntry();
                _elem50.read(iprot);
                this.result_set.add(_elem50);
              }
              iprot.readListEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.owner != null) {
      oprot.writeFieldBegin(OWNER_FIELD_DESC);
      oprot.writeString(this.owner);
      oprot.writeFieldEnd();
    }
    if (this.id != null) {
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeString(this.id);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
    oprot.writeI64(this.timestamp);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(RESULT_COUNT_FIELD_DESC);
    oprot.writeI64(this.result_count);
    oprot.writeFieldEnd();
    if (this.hypothesisid != null) {
      oprot.writeFieldBegin(HYPOTHESISID_FIELD_DESC);
      oprot.writeString(this.hypothesisid);
      oprot.writeFieldEnd();
    }
    if (this.hypothesisname != null) {
      oprot.writeFieldBegin(HYPOTHESISNAME_FIELD_DESC);
      oprot.writeString(this.hypothesisname);
      oprot.writeFieldEnd();
    }
    if (this.bucketid != null) {
      oprot.writeFieldBegin(BUCKETID_FIELD_DESC);
      oprot.writeString(this.bucketid);
      oprot.writeFieldEnd();
    }
    if (this.hypothesis_at_runtime != null) {
      oprot.writeFieldBegin(HYPOTHESIS_AT_RUNTIME_FIELD_DESC);
      this.hypothesis_at_runtime.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.error != null) {
      oprot.writeFieldBegin(ERROR_FIELD_DESC);
      oprot.writeString(this.error);
      oprot.writeFieldEnd();
    }
    if (this.result_set != null) {
      oprot.writeFieldBegin(RESULT_SET_FIELD_DESC);
      {
        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, this.result_set.size()));
        for (TQueryEntry _iter51 : this.result_set)
        {
          _iter51.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TQueryResult(");
    boolean first = true;

    sb.append("owner:");
    if (this.owner == null) {
      sb.append("null");
    } else {
      sb.append(this.owner);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("timestamp:");
    sb.append(this.timestamp);
    first = false;
    if (!first) sb.append(", ");
    sb.append("result_count:");
    sb.append(this.result_count);
    first = false;
    if (!first) sb.append(", ");
    sb.append("hypothesisid:");
    if (this.hypothesisid == null) {
      sb.append("null");
    } else {
      sb.append(this.hypothesisid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("hypothesisname:");
    if (this.hypothesisname == null) {
      sb.append("null");
    } else {
      sb.append(this.hypothesisname);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bucketid:");
    if (this.bucketid == null) {
      sb.append("null");
    } else {
      sb.append(this.bucketid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("hypothesis_at_runtime:");
    if (this.hypothesis_at_runtime == null) {
      sb.append("null");
    } else {
      sb.append(this.hypothesis_at_runtime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("error:");
    if (this.error == null) {
      sb.append("null");
    } else {
      sb.append(this.error);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("result_set:");
    if (this.result_set == null) {
      sb.append("null");
    } else {
      sb.append(this.result_set);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

