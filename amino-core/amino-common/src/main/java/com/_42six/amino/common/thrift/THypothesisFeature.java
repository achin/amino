/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com._42six.amino.common.thrift;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class THypothesisFeature implements org.apache.thrift.TBase<THypothesisFeature, THypothesisFeature._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("THypothesisFeature");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField FEATURE_METADATA_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("featureMetadataId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField OPERATOR_FIELD_DESC = new org.apache.thrift.protocol.TField("operator", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("value", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField MIN_FIELD_DESC = new org.apache.thrift.protocol.TField("min", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField MAX_FIELD_DESC = new org.apache.thrift.protocol.TField("max", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField DATE_TIME_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("dateTimeType", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField RELATIVE_DATE_TIME_RANGE_FIELD_DESC = new org.apache.thrift.protocol.TField("relativeDateTimeRange", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField TIMESTAMP_FROM_FIELD_DESC = new org.apache.thrift.protocol.TField("timestampFrom", org.apache.thrift.protocol.TType.I64, (short)10);
  private static final org.apache.thrift.protocol.TField TIMESTAMP_TO_FIELD_DESC = new org.apache.thrift.protocol.TField("timestampTo", org.apache.thrift.protocol.TType.I64, (short)11);
  private static final org.apache.thrift.protocol.TField VISIBILITY_FIELD_DESC = new org.apache.thrift.protocol.TField("visibility", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField UNIQUENESS_FIELD_DESC = new org.apache.thrift.protocol.TField("uniqueness", org.apache.thrift.protocol.TType.DOUBLE, (short)14);
  private static final org.apache.thrift.protocol.TField TO_INCLUDE_FIELD_DESC = new org.apache.thrift.protocol.TField("toInclude", org.apache.thrift.protocol.TType.BOOL, (short)15);

  public String id;
  public String featureMetadataId;
  public String type;
  public String operator;
  public String value;
  public double min;
  public double max;
  public String dateTimeType;
  public String relativeDateTimeRange;
  public long timestampFrom;
  public long timestampTo;
  /**
   * The visibility of the Hypothesis
   */
  public String visibility;
  /**
   * The number of bucket matches for this feature
   */
  public int count;
  /**
   * The measure of uniqueness for this feature in the bucket
   */
  public double uniqueness;
  public boolean toInclude;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    FEATURE_METADATA_ID((short)2, "featureMetadataId"),
    TYPE((short)3, "type"),
    OPERATOR((short)4, "operator"),
    VALUE((short)5, "value"),
    MIN((short)6, "min"),
    MAX((short)7, "max"),
    DATE_TIME_TYPE((short)8, "dateTimeType"),
    RELATIVE_DATE_TIME_RANGE((short)9, "relativeDateTimeRange"),
    TIMESTAMP_FROM((short)10, "timestampFrom"),
    TIMESTAMP_TO((short)11, "timestampTo"),
    /**
     * The visibility of the Hypothesis
     */
    VISIBILITY((short)12, "visibility"),
    /**
     * The number of bucket matches for this feature
     */
    COUNT((short)13, "count"),
    /**
     * The measure of uniqueness for this feature in the bucket
     */
    UNIQUENESS((short)14, "uniqueness"),
    TO_INCLUDE((short)15, "toInclude");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // FEATURE_METADATA_ID
          return FEATURE_METADATA_ID;
        case 3: // TYPE
          return TYPE;
        case 4: // OPERATOR
          return OPERATOR;
        case 5: // VALUE
          return VALUE;
        case 6: // MIN
          return MIN;
        case 7: // MAX
          return MAX;
        case 8: // DATE_TIME_TYPE
          return DATE_TIME_TYPE;
        case 9: // RELATIVE_DATE_TIME_RANGE
          return RELATIVE_DATE_TIME_RANGE;
        case 10: // TIMESTAMP_FROM
          return TIMESTAMP_FROM;
        case 11: // TIMESTAMP_TO
          return TIMESTAMP_TO;
        case 12: // VISIBILITY
          return VISIBILITY;
        case 13: // COUNT
          return COUNT;
        case 14: // UNIQUENESS
          return UNIQUENESS;
        case 15: // TO_INCLUDE
          return TO_INCLUDE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MIN_ISSET_ID = 0;
  private static final int __MAX_ISSET_ID = 1;
  private static final int __TIMESTAMPFROM_ISSET_ID = 2;
  private static final int __TIMESTAMPTO_ISSET_ID = 3;
  private static final int __COUNT_ISSET_ID = 4;
  private static final int __UNIQUENESS_ISSET_ID = 5;
  private static final int __TOINCLUDE_ISSET_ID = 6;
  private BitSet __isset_bit_vector = new BitSet(7);

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FEATURE_METADATA_ID, new org.apache.thrift.meta_data.FieldMetaData("featureMetadataId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OPERATOR, new org.apache.thrift.meta_data.FieldMetaData("operator", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VALUE, new org.apache.thrift.meta_data.FieldMetaData("value", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MIN, new org.apache.thrift.meta_data.FieldMetaData("min", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MAX, new org.apache.thrift.meta_data.FieldMetaData("max", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DATE_TIME_TYPE, new org.apache.thrift.meta_data.FieldMetaData("dateTimeType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RELATIVE_DATE_TIME_RANGE, new org.apache.thrift.meta_data.FieldMetaData("relativeDateTimeRange", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TIMESTAMP_FROM, new org.apache.thrift.meta_data.FieldMetaData("timestampFrom", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TIMESTAMP_TO, new org.apache.thrift.meta_data.FieldMetaData("timestampTo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.VISIBILITY, new org.apache.thrift.meta_data.FieldMetaData("visibility", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UNIQUENESS, new org.apache.thrift.meta_data.FieldMetaData("uniqueness", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TO_INCLUDE, new org.apache.thrift.meta_data.FieldMetaData("toInclude", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(THypothesisFeature.class, metaDataMap);
  }

  public THypothesisFeature() {
  }

  public THypothesisFeature(
    String id,
    String featureMetadataId,
    String type,
    String operator,
    String value,
    double min,
    double max,
    String dateTimeType,
    String relativeDateTimeRange,
    long timestampFrom,
    long timestampTo,
    String visibility,
    int count,
    double uniqueness,
    boolean toInclude)
  {
    this();
    this.id = id;
    this.featureMetadataId = featureMetadataId;
    this.type = type;
    this.operator = operator;
    this.value = value;
    this.min = min;
    setMinIsSet(true);
    this.max = max;
    setMaxIsSet(true);
    this.dateTimeType = dateTimeType;
    this.relativeDateTimeRange = relativeDateTimeRange;
    this.timestampFrom = timestampFrom;
    setTimestampFromIsSet(true);
    this.timestampTo = timestampTo;
    setTimestampToIsSet(true);
    this.visibility = visibility;
    this.count = count;
    setCountIsSet(true);
    this.uniqueness = uniqueness;
    setUniquenessIsSet(true);
    this.toInclude = toInclude;
    setToIncludeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public THypothesisFeature(THypothesisFeature other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetFeatureMetadataId()) {
      this.featureMetadataId = other.featureMetadataId;
    }
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetOperator()) {
      this.operator = other.operator;
    }
    if (other.isSetValue()) {
      this.value = other.value;
    }
    this.min = other.min;
    this.max = other.max;
    if (other.isSetDateTimeType()) {
      this.dateTimeType = other.dateTimeType;
    }
    if (other.isSetRelativeDateTimeRange()) {
      this.relativeDateTimeRange = other.relativeDateTimeRange;
    }
    this.timestampFrom = other.timestampFrom;
    this.timestampTo = other.timestampTo;
    if (other.isSetVisibility()) {
      this.visibility = other.visibility;
    }
    this.count = other.count;
    this.uniqueness = other.uniqueness;
    this.toInclude = other.toInclude;
  }

  public THypothesisFeature deepCopy() {
    return new THypothesisFeature(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.featureMetadataId = null;
    this.type = null;
    this.operator = null;
    this.value = null;
    setMinIsSet(false);
    this.min = 0.0;
    setMaxIsSet(false);
    this.max = 0.0;
    this.dateTimeType = null;
    this.relativeDateTimeRange = null;
    setTimestampFromIsSet(false);
    this.timestampFrom = 0;
    setTimestampToIsSet(false);
    this.timestampTo = 0;
    this.visibility = null;
    setCountIsSet(false);
    this.count = 0;
    setUniquenessIsSet(false);
    this.uniqueness = 0.0;
    setToIncludeIsSet(false);
    this.toInclude = false;
  }

  public String getId() {
    return this.id;
  }

  public THypothesisFeature setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public String getFeatureMetadataId() {
    return this.featureMetadataId;
  }

  public THypothesisFeature setFeatureMetadataId(String featureMetadataId) {
    this.featureMetadataId = featureMetadataId;
    return this;
  }

  public void unsetFeatureMetadataId() {
    this.featureMetadataId = null;
  }

  /** Returns true if field featureMetadataId is set (has been assigned a value) and false otherwise */
  public boolean isSetFeatureMetadataId() {
    return this.featureMetadataId != null;
  }

  public void setFeatureMetadataIdIsSet(boolean value) {
    if (!value) {
      this.featureMetadataId = null;
    }
  }

  public String getType() {
    return this.type;
  }

  public THypothesisFeature setType(String type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public String getOperator() {
    return this.operator;
  }

  public THypothesisFeature setOperator(String operator) {
    this.operator = operator;
    return this;
  }

  public void unsetOperator() {
    this.operator = null;
  }

  /** Returns true if field operator is set (has been assigned a value) and false otherwise */
  public boolean isSetOperator() {
    return this.operator != null;
  }

  public void setOperatorIsSet(boolean value) {
    if (!value) {
      this.operator = null;
    }
  }

  public String getValue() {
    return this.value;
  }

  public THypothesisFeature setValue(String value) {
    this.value = value;
    return this;
  }

  public void unsetValue() {
    this.value = null;
  }

  /** Returns true if field value is set (has been assigned a value) and false otherwise */
  public boolean isSetValue() {
    return this.value != null;
  }

  public void setValueIsSet(boolean value) {
    if (!value) {
      this.value = null;
    }
  }

  public double getMin() {
    return this.min;
  }

  public THypothesisFeature setMin(double min) {
    this.min = min;
    setMinIsSet(true);
    return this;
  }

  public void unsetMin() {
    __isset_bit_vector.clear(__MIN_ISSET_ID);
  }

  /** Returns true if field min is set (has been assigned a value) and false otherwise */
  public boolean isSetMin() {
    return __isset_bit_vector.get(__MIN_ISSET_ID);
  }

  public void setMinIsSet(boolean value) {
    __isset_bit_vector.set(__MIN_ISSET_ID, value);
  }

  public double getMax() {
    return this.max;
  }

  public THypothesisFeature setMax(double max) {
    this.max = max;
    setMaxIsSet(true);
    return this;
  }

  public void unsetMax() {
    __isset_bit_vector.clear(__MAX_ISSET_ID);
  }

  /** Returns true if field max is set (has been assigned a value) and false otherwise */
  public boolean isSetMax() {
    return __isset_bit_vector.get(__MAX_ISSET_ID);
  }

  public void setMaxIsSet(boolean value) {
    __isset_bit_vector.set(__MAX_ISSET_ID, value);
  }

  public String getDateTimeType() {
    return this.dateTimeType;
  }

  public THypothesisFeature setDateTimeType(String dateTimeType) {
    this.dateTimeType = dateTimeType;
    return this;
  }

  public void unsetDateTimeType() {
    this.dateTimeType = null;
  }

  /** Returns true if field dateTimeType is set (has been assigned a value) and false otherwise */
  public boolean isSetDateTimeType() {
    return this.dateTimeType != null;
  }

  public void setDateTimeTypeIsSet(boolean value) {
    if (!value) {
      this.dateTimeType = null;
    }
  }

  public String getRelativeDateTimeRange() {
    return this.relativeDateTimeRange;
  }

  public THypothesisFeature setRelativeDateTimeRange(String relativeDateTimeRange) {
    this.relativeDateTimeRange = relativeDateTimeRange;
    return this;
  }

  public void unsetRelativeDateTimeRange() {
    this.relativeDateTimeRange = null;
  }

  /** Returns true if field relativeDateTimeRange is set (has been assigned a value) and false otherwise */
  public boolean isSetRelativeDateTimeRange() {
    return this.relativeDateTimeRange != null;
  }

  public void setRelativeDateTimeRangeIsSet(boolean value) {
    if (!value) {
      this.relativeDateTimeRange = null;
    }
  }

  public long getTimestampFrom() {
    return this.timestampFrom;
  }

  public THypothesisFeature setTimestampFrom(long timestampFrom) {
    this.timestampFrom = timestampFrom;
    setTimestampFromIsSet(true);
    return this;
  }

  public void unsetTimestampFrom() {
    __isset_bit_vector.clear(__TIMESTAMPFROM_ISSET_ID);
  }

  /** Returns true if field timestampFrom is set (has been assigned a value) and false otherwise */
  public boolean isSetTimestampFrom() {
    return __isset_bit_vector.get(__TIMESTAMPFROM_ISSET_ID);
  }

  public void setTimestampFromIsSet(boolean value) {
    __isset_bit_vector.set(__TIMESTAMPFROM_ISSET_ID, value);
  }

  public long getTimestampTo() {
    return this.timestampTo;
  }

  public THypothesisFeature setTimestampTo(long timestampTo) {
    this.timestampTo = timestampTo;
    setTimestampToIsSet(true);
    return this;
  }

  public void unsetTimestampTo() {
    __isset_bit_vector.clear(__TIMESTAMPTO_ISSET_ID);
  }

  /** Returns true if field timestampTo is set (has been assigned a value) and false otherwise */
  public boolean isSetTimestampTo() {
    return __isset_bit_vector.get(__TIMESTAMPTO_ISSET_ID);
  }

  public void setTimestampToIsSet(boolean value) {
    __isset_bit_vector.set(__TIMESTAMPTO_ISSET_ID, value);
  }

  /**
   * The visibility of the Hypothesis
   */
  public String getVisibility() {
    return this.visibility;
  }

  /**
   * The visibility of the Hypothesis
   */
  public THypothesisFeature setVisibility(String visibility) {
    this.visibility = visibility;
    return this;
  }

  public void unsetVisibility() {
    this.visibility = null;
  }

  /** Returns true if field visibility is set (has been assigned a value) and false otherwise */
  public boolean isSetVisibility() {
    return this.visibility != null;
  }

  public void setVisibilityIsSet(boolean value) {
    if (!value) {
      this.visibility = null;
    }
  }

  /**
   * The number of bucket matches for this feature
   */
  public int getCount() {
    return this.count;
  }

  /**
   * The number of bucket matches for this feature
   */
  public THypothesisFeature setCount(int count) {
    this.count = count;
    setCountIsSet(true);
    return this;
  }

  public void unsetCount() {
    __isset_bit_vector.clear(__COUNT_ISSET_ID);
  }

  /** Returns true if field count is set (has been assigned a value) and false otherwise */
  public boolean isSetCount() {
    return __isset_bit_vector.get(__COUNT_ISSET_ID);
  }

  public void setCountIsSet(boolean value) {
    __isset_bit_vector.set(__COUNT_ISSET_ID, value);
  }

  /**
   * The measure of uniqueness for this feature in the bucket
   */
  public double getUniqueness() {
    return this.uniqueness;
  }

  /**
   * The measure of uniqueness for this feature in the bucket
   */
  public THypothesisFeature setUniqueness(double uniqueness) {
    this.uniqueness = uniqueness;
    setUniquenessIsSet(true);
    return this;
  }

  public void unsetUniqueness() {
    __isset_bit_vector.clear(__UNIQUENESS_ISSET_ID);
  }

  /** Returns true if field uniqueness is set (has been assigned a value) and false otherwise */
  public boolean isSetUniqueness() {
    return __isset_bit_vector.get(__UNIQUENESS_ISSET_ID);
  }

  public void setUniquenessIsSet(boolean value) {
    __isset_bit_vector.set(__UNIQUENESS_ISSET_ID, value);
  }

  public boolean isToInclude() {
    return this.toInclude;
  }

  public THypothesisFeature setToInclude(boolean toInclude) {
    this.toInclude = toInclude;
    setToIncludeIsSet(true);
    return this;
  }

  public void unsetToInclude() {
    __isset_bit_vector.clear(__TOINCLUDE_ISSET_ID);
  }

  /** Returns true if field toInclude is set (has been assigned a value) and false otherwise */
  public boolean isSetToInclude() {
    return __isset_bit_vector.get(__TOINCLUDE_ISSET_ID);
  }

  public void setToIncludeIsSet(boolean value) {
    __isset_bit_vector.set(__TOINCLUDE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case FEATURE_METADATA_ID:
      if (value == null) {
        unsetFeatureMetadataId();
      } else {
        setFeatureMetadataId((String)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((String)value);
      }
      break;

    case OPERATOR:
      if (value == null) {
        unsetOperator();
      } else {
        setOperator((String)value);
      }
      break;

    case VALUE:
      if (value == null) {
        unsetValue();
      } else {
        setValue((String)value);
      }
      break;

    case MIN:
      if (value == null) {
        unsetMin();
      } else {
        setMin((Double)value);
      }
      break;

    case MAX:
      if (value == null) {
        unsetMax();
      } else {
        setMax((Double)value);
      }
      break;

    case DATE_TIME_TYPE:
      if (value == null) {
        unsetDateTimeType();
      } else {
        setDateTimeType((String)value);
      }
      break;

    case RELATIVE_DATE_TIME_RANGE:
      if (value == null) {
        unsetRelativeDateTimeRange();
      } else {
        setRelativeDateTimeRange((String)value);
      }
      break;

    case TIMESTAMP_FROM:
      if (value == null) {
        unsetTimestampFrom();
      } else {
        setTimestampFrom((Long)value);
      }
      break;

    case TIMESTAMP_TO:
      if (value == null) {
        unsetTimestampTo();
      } else {
        setTimestampTo((Long)value);
      }
      break;

    case VISIBILITY:
      if (value == null) {
        unsetVisibility();
      } else {
        setVisibility((String)value);
      }
      break;

    case COUNT:
      if (value == null) {
        unsetCount();
      } else {
        setCount((Integer)value);
      }
      break;

    case UNIQUENESS:
      if (value == null) {
        unsetUniqueness();
      } else {
        setUniqueness((Double)value);
      }
      break;

    case TO_INCLUDE:
      if (value == null) {
        unsetToInclude();
      } else {
        setToInclude((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case FEATURE_METADATA_ID:
      return getFeatureMetadataId();

    case TYPE:
      return getType();

    case OPERATOR:
      return getOperator();

    case VALUE:
      return getValue();

    case MIN:
      return new Double(getMin());

    case MAX:
      return new Double(getMax());

    case DATE_TIME_TYPE:
      return getDateTimeType();

    case RELATIVE_DATE_TIME_RANGE:
      return getRelativeDateTimeRange();

    case TIMESTAMP_FROM:
      return new Long(getTimestampFrom());

    case TIMESTAMP_TO:
      return new Long(getTimestampTo());

    case VISIBILITY:
      return getVisibility();

    case COUNT:
      return new Integer(getCount());

    case UNIQUENESS:
      return new Double(getUniqueness());

    case TO_INCLUDE:
      return new Boolean(isToInclude());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case FEATURE_METADATA_ID:
      return isSetFeatureMetadataId();
    case TYPE:
      return isSetType();
    case OPERATOR:
      return isSetOperator();
    case VALUE:
      return isSetValue();
    case MIN:
      return isSetMin();
    case MAX:
      return isSetMax();
    case DATE_TIME_TYPE:
      return isSetDateTimeType();
    case RELATIVE_DATE_TIME_RANGE:
      return isSetRelativeDateTimeRange();
    case TIMESTAMP_FROM:
      return isSetTimestampFrom();
    case TIMESTAMP_TO:
      return isSetTimestampTo();
    case VISIBILITY:
      return isSetVisibility();
    case COUNT:
      return isSetCount();
    case UNIQUENESS:
      return isSetUniqueness();
    case TO_INCLUDE:
      return isSetToInclude();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof THypothesisFeature)
      return this.equals((THypothesisFeature)that);
    return false;
  }

  public boolean equals(THypothesisFeature that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_featureMetadataId = true && this.isSetFeatureMetadataId();
    boolean that_present_featureMetadataId = true && that.isSetFeatureMetadataId();
    if (this_present_featureMetadataId || that_present_featureMetadataId) {
      if (!(this_present_featureMetadataId && that_present_featureMetadataId))
        return false;
      if (!this.featureMetadataId.equals(that.featureMetadataId))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_operator = true && this.isSetOperator();
    boolean that_present_operator = true && that.isSetOperator();
    if (this_present_operator || that_present_operator) {
      if (!(this_present_operator && that_present_operator))
        return false;
      if (!this.operator.equals(that.operator))
        return false;
    }

    boolean this_present_value = true && this.isSetValue();
    boolean that_present_value = true && that.isSetValue();
    if (this_present_value || that_present_value) {
      if (!(this_present_value && that_present_value))
        return false;
      if (!this.value.equals(that.value))
        return false;
    }

    boolean this_present_min = true;
    boolean that_present_min = true;
    if (this_present_min || that_present_min) {
      if (!(this_present_min && that_present_min))
        return false;
      if (this.min != that.min)
        return false;
    }

    boolean this_present_max = true;
    boolean that_present_max = true;
    if (this_present_max || that_present_max) {
      if (!(this_present_max && that_present_max))
        return false;
      if (this.max != that.max)
        return false;
    }

    boolean this_present_dateTimeType = true && this.isSetDateTimeType();
    boolean that_present_dateTimeType = true && that.isSetDateTimeType();
    if (this_present_dateTimeType || that_present_dateTimeType) {
      if (!(this_present_dateTimeType && that_present_dateTimeType))
        return false;
      if (!this.dateTimeType.equals(that.dateTimeType))
        return false;
    }

    boolean this_present_relativeDateTimeRange = true && this.isSetRelativeDateTimeRange();
    boolean that_present_relativeDateTimeRange = true && that.isSetRelativeDateTimeRange();
    if (this_present_relativeDateTimeRange || that_present_relativeDateTimeRange) {
      if (!(this_present_relativeDateTimeRange && that_present_relativeDateTimeRange))
        return false;
      if (!this.relativeDateTimeRange.equals(that.relativeDateTimeRange))
        return false;
    }

    boolean this_present_timestampFrom = true;
    boolean that_present_timestampFrom = true;
    if (this_present_timestampFrom || that_present_timestampFrom) {
      if (!(this_present_timestampFrom && that_present_timestampFrom))
        return false;
      if (this.timestampFrom != that.timestampFrom)
        return false;
    }

    boolean this_present_timestampTo = true;
    boolean that_present_timestampTo = true;
    if (this_present_timestampTo || that_present_timestampTo) {
      if (!(this_present_timestampTo && that_present_timestampTo))
        return false;
      if (this.timestampTo != that.timestampTo)
        return false;
    }

    boolean this_present_visibility = true && this.isSetVisibility();
    boolean that_present_visibility = true && that.isSetVisibility();
    if (this_present_visibility || that_present_visibility) {
      if (!(this_present_visibility && that_present_visibility))
        return false;
      if (!this.visibility.equals(that.visibility))
        return false;
    }

    boolean this_present_count = true;
    boolean that_present_count = true;
    if (this_present_count || that_present_count) {
      if (!(this_present_count && that_present_count))
        return false;
      if (this.count != that.count)
        return false;
    }

    boolean this_present_uniqueness = true;
    boolean that_present_uniqueness = true;
    if (this_present_uniqueness || that_present_uniqueness) {
      if (!(this_present_uniqueness && that_present_uniqueness))
        return false;
      if (this.uniqueness != that.uniqueness)
        return false;
    }

    boolean this_present_toInclude = true;
    boolean that_present_toInclude = true;
    if (this_present_toInclude || that_present_toInclude) {
      if (!(this_present_toInclude && that_present_toInclude))
        return false;
      if (this.toInclude != that.toInclude)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(THypothesisFeature other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    THypothesisFeature typedOther = (THypothesisFeature)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFeatureMetadataId()).compareTo(typedOther.isSetFeatureMetadataId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFeatureMetadataId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.featureMetadataId, typedOther.featureMetadataId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(typedOther.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, typedOther.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOperator()).compareTo(typedOther.isSetOperator());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperator()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operator, typedOther.operator);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetValue()).compareTo(typedOther.isSetValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value, typedOther.value);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMin()).compareTo(typedOther.isSetMin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.min, typedOther.min);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMax()).compareTo(typedOther.isSetMax());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMax()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max, typedOther.max);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDateTimeType()).compareTo(typedOther.isSetDateTimeType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDateTimeType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dateTimeType, typedOther.dateTimeType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRelativeDateTimeRange()).compareTo(typedOther.isSetRelativeDateTimeRange());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRelativeDateTimeRange()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.relativeDateTimeRange, typedOther.relativeDateTimeRange);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimestampFrom()).compareTo(typedOther.isSetTimestampFrom());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimestampFrom()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestampFrom, typedOther.timestampFrom);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimestampTo()).compareTo(typedOther.isSetTimestampTo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimestampTo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestampTo, typedOther.timestampTo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVisibility()).compareTo(typedOther.isSetVisibility());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVisibility()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.visibility, typedOther.visibility);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCount()).compareTo(typedOther.isSetCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, typedOther.count);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUniqueness()).compareTo(typedOther.isSetUniqueness());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUniqueness()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uniqueness, typedOther.uniqueness);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetToInclude()).compareTo(typedOther.isSetToInclude());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToInclude()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.toInclude, typedOther.toInclude);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // ID
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.id = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // FEATURE_METADATA_ID
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.featureMetadataId = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // TYPE
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.type = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // OPERATOR
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.operator = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // VALUE
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.value = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // MIN
          if (field.type == org.apache.thrift.protocol.TType.DOUBLE) {
            this.min = iprot.readDouble();
            setMinIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // MAX
          if (field.type == org.apache.thrift.protocol.TType.DOUBLE) {
            this.max = iprot.readDouble();
            setMaxIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 8: // DATE_TIME_TYPE
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.dateTimeType = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 9: // RELATIVE_DATE_TIME_RANGE
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.relativeDateTimeRange = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 10: // TIMESTAMP_FROM
          if (field.type == org.apache.thrift.protocol.TType.I64) {
            this.timestampFrom = iprot.readI64();
            setTimestampFromIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 11: // TIMESTAMP_TO
          if (field.type == org.apache.thrift.protocol.TType.I64) {
            this.timestampTo = iprot.readI64();
            setTimestampToIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 12: // VISIBILITY
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.visibility = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 13: // COUNT
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.count = iprot.readI32();
            setCountIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 14: // UNIQUENESS
          if (field.type == org.apache.thrift.protocol.TType.DOUBLE) {
            this.uniqueness = iprot.readDouble();
            setUniquenessIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 15: // TO_INCLUDE
          if (field.type == org.apache.thrift.protocol.TType.BOOL) {
            this.toInclude = iprot.readBool();
            setToIncludeIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.id != null) {
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeString(this.id);
      oprot.writeFieldEnd();
    }
    if (this.featureMetadataId != null) {
      oprot.writeFieldBegin(FEATURE_METADATA_ID_FIELD_DESC);
      oprot.writeString(this.featureMetadataId);
      oprot.writeFieldEnd();
    }
    if (this.type != null) {
      oprot.writeFieldBegin(TYPE_FIELD_DESC);
      oprot.writeString(this.type);
      oprot.writeFieldEnd();
    }
    if (this.operator != null) {
      oprot.writeFieldBegin(OPERATOR_FIELD_DESC);
      oprot.writeString(this.operator);
      oprot.writeFieldEnd();
    }
    if (this.value != null) {
      oprot.writeFieldBegin(VALUE_FIELD_DESC);
      oprot.writeString(this.value);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(MIN_FIELD_DESC);
    oprot.writeDouble(this.min);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(MAX_FIELD_DESC);
    oprot.writeDouble(this.max);
    oprot.writeFieldEnd();
    if (this.dateTimeType != null) {
      oprot.writeFieldBegin(DATE_TIME_TYPE_FIELD_DESC);
      oprot.writeString(this.dateTimeType);
      oprot.writeFieldEnd();
    }
    if (this.relativeDateTimeRange != null) {
      oprot.writeFieldBegin(RELATIVE_DATE_TIME_RANGE_FIELD_DESC);
      oprot.writeString(this.relativeDateTimeRange);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(TIMESTAMP_FROM_FIELD_DESC);
    oprot.writeI64(this.timestampFrom);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(TIMESTAMP_TO_FIELD_DESC);
    oprot.writeI64(this.timestampTo);
    oprot.writeFieldEnd();
    if (this.visibility != null) {
      oprot.writeFieldBegin(VISIBILITY_FIELD_DESC);
      oprot.writeString(this.visibility);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(COUNT_FIELD_DESC);
    oprot.writeI32(this.count);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(UNIQUENESS_FIELD_DESC);
    oprot.writeDouble(this.uniqueness);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(TO_INCLUDE_FIELD_DESC);
    oprot.writeBool(this.toInclude);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("THypothesisFeature(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("featureMetadataId:");
    if (this.featureMetadataId == null) {
      sb.append("null");
    } else {
      sb.append(this.featureMetadataId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("operator:");
    if (this.operator == null) {
      sb.append("null");
    } else {
      sb.append(this.operator);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("value:");
    if (this.value == null) {
      sb.append("null");
    } else {
      sb.append(this.value);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("min:");
    sb.append(this.min);
    first = false;
    if (!first) sb.append(", ");
    sb.append("max:");
    sb.append(this.max);
    first = false;
    if (!first) sb.append(", ");
    sb.append("dateTimeType:");
    if (this.dateTimeType == null) {
      sb.append("null");
    } else {
      sb.append(this.dateTimeType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("relativeDateTimeRange:");
    if (this.relativeDateTimeRange == null) {
      sb.append("null");
    } else {
      sb.append(this.relativeDateTimeRange);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("timestampFrom:");
    sb.append(this.timestampFrom);
    first = false;
    if (!first) sb.append(", ");
    sb.append("timestampTo:");
    sb.append(this.timestampTo);
    first = false;
    if (!first) sb.append(", ");
    sb.append("visibility:");
    if (this.visibility == null) {
      sb.append("null");
    } else {
      sb.append(this.visibility);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("count:");
    sb.append(this.count);
    first = false;
    if (!first) sb.append(", ");
    sb.append("uniqueness:");
    sb.append(this.uniqueness);
    first = false;
    if (!first) sb.append(", ");
    sb.append("toInclude:");
    sb.append(this.toInclude);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

