/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com._42six.amino.common.thrift;

import java.util.*;

public class TGroup implements org.apache.thrift.TBase<TGroup, TGroup._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TGroup");

  private static final org.apache.thrift.protocol.TField GROUP_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("groupName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CREATED_BY_FIELD_DESC = new org.apache.thrift.protocol.TField("createdBy", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField DATE_CREATED_FIELD_DESC = new org.apache.thrift.protocol.TField("dateCreated", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField MEMBERS_FIELD_DESC = new org.apache.thrift.protocol.TField("members", org.apache.thrift.protocol.TType.SET, (short)4);

  public String groupName;
  public String createdBy;
  public long dateCreated;
  public Set<TGroupMember> members;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    GROUP_NAME((short)1, "groupName"),
    CREATED_BY((short)2, "createdBy"),
    DATE_CREATED((short)3, "dateCreated"),
    MEMBERS((short)4, "members");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // GROUP_NAME
          return GROUP_NAME;
        case 2: // CREATED_BY
          return CREATED_BY;
        case 3: // DATE_CREATED
          return DATE_CREATED;
        case 4: // MEMBERS
          return MEMBERS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __DATECREATED_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.GROUP_NAME, new org.apache.thrift.meta_data.FieldMetaData("groupName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATED_BY, new org.apache.thrift.meta_data.FieldMetaData("createdBy", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATE_CREATED, new org.apache.thrift.meta_data.FieldMetaData("dateCreated", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MEMBERS, new org.apache.thrift.meta_data.FieldMetaData("members", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TGroupMember.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TGroup.class, metaDataMap);
  }

  public TGroup() {
  }

  public TGroup(
    String groupName,
    String createdBy,
    long dateCreated,
    Set<TGroupMember> members)
  {
    this();
    this.groupName = groupName;
    this.createdBy = createdBy;
    this.dateCreated = dateCreated;
    setDateCreatedIsSet(true);
    this.members = members;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TGroup(TGroup other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetGroupName()) {
      this.groupName = other.groupName;
    }
    if (other.isSetCreatedBy()) {
      this.createdBy = other.createdBy;
    }
    this.dateCreated = other.dateCreated;
    if (other.isSetMembers()) {
      Set<TGroupMember> __this__members = new HashSet<TGroupMember>();
      for (TGroupMember other_element : other.members) {
        __this__members.add(new TGroupMember(other_element));
      }
      this.members = __this__members;
    }
  }

  public TGroup deepCopy() {
    return new TGroup(this);
  }

  @Override
  public void clear() {
    this.groupName = null;
    this.createdBy = null;
    setDateCreatedIsSet(false);
    this.dateCreated = 0;
    this.members = null;
  }

  public String getGroupName() {
    return this.groupName;
  }

  public TGroup setGroupName(String groupName) {
    this.groupName = groupName;
    return this;
  }

  public void unsetGroupName() {
    this.groupName = null;
  }

  /** Returns true if field groupName is set (has been assigned a value) and false otherwise */
  public boolean isSetGroupName() {
    return this.groupName != null;
  }

  public void setGroupNameIsSet(boolean value) {
    if (!value) {
      this.groupName = null;
    }
  }

  public String getCreatedBy() {
    return this.createdBy;
  }

  public TGroup setCreatedBy(String createdBy) {
    this.createdBy = createdBy;
    return this;
  }

  public void unsetCreatedBy() {
    this.createdBy = null;
  }

  /** Returns true if field createdBy is set (has been assigned a value) and false otherwise */
  public boolean isSetCreatedBy() {
    return this.createdBy != null;
  }

  public void setCreatedByIsSet(boolean value) {
    if (!value) {
      this.createdBy = null;
    }
  }

  public long getDateCreated() {
    return this.dateCreated;
  }

  public TGroup setDateCreated(long dateCreated) {
    this.dateCreated = dateCreated;
    setDateCreatedIsSet(true);
    return this;
  }

  public void unsetDateCreated() {
    __isset_bit_vector.clear(__DATECREATED_ISSET_ID);
  }

  /** Returns true if field dateCreated is set (has been assigned a value) and false otherwise */
  public boolean isSetDateCreated() {
    return __isset_bit_vector.get(__DATECREATED_ISSET_ID);
  }

  public void setDateCreatedIsSet(boolean value) {
    __isset_bit_vector.set(__DATECREATED_ISSET_ID, value);
  }

  public int getMembersSize() {
    return (this.members == null) ? 0 : this.members.size();
  }

  public java.util.Iterator<TGroupMember> getMembersIterator() {
    return (this.members == null) ? null : this.members.iterator();
  }

  public void addToMembers(TGroupMember elem) {
    if (this.members == null) {
      this.members = new HashSet<TGroupMember>();
    }
    this.members.add(elem);
  }

  public Set<TGroupMember> getMembers() {
    return this.members;
  }

  public TGroup setMembers(Set<TGroupMember> members) {
    this.members = members;
    return this;
  }

  public void unsetMembers() {
    this.members = null;
  }

  /** Returns true if field members is set (has been assigned a value) and false otherwise */
  public boolean isSetMembers() {
    return this.members != null;
  }

  public void setMembersIsSet(boolean value) {
    if (!value) {
      this.members = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case GROUP_NAME:
      if (value == null) {
        unsetGroupName();
      } else {
        setGroupName((String)value);
      }
      break;

    case CREATED_BY:
      if (value == null) {
        unsetCreatedBy();
      } else {
        setCreatedBy((String)value);
      }
      break;

    case DATE_CREATED:
      if (value == null) {
        unsetDateCreated();
      } else {
        setDateCreated((Long)value);
      }
      break;

    case MEMBERS:
      if (value == null) {
        unsetMembers();
      } else {
        setMembers((Set<TGroupMember>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case GROUP_NAME:
      return getGroupName();

    case CREATED_BY:
      return getCreatedBy();

    case DATE_CREATED:
      return new Long(getDateCreated());

    case MEMBERS:
      return getMembers();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case GROUP_NAME:
      return isSetGroupName();
    case CREATED_BY:
      return isSetCreatedBy();
    case DATE_CREATED:
      return isSetDateCreated();
    case MEMBERS:
      return isSetMembers();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TGroup)
      return this.equals((TGroup)that);
    return false;
  }

  public boolean equals(TGroup that) {
    if (that == null)
      return false;

    boolean this_present_groupName = true && this.isSetGroupName();
    boolean that_present_groupName = true && that.isSetGroupName();
    if (this_present_groupName || that_present_groupName) {
      if (!(this_present_groupName && that_present_groupName))
        return false;
      if (!this.groupName.equals(that.groupName))
        return false;
    }

    boolean this_present_createdBy = true && this.isSetCreatedBy();
    boolean that_present_createdBy = true && that.isSetCreatedBy();
    if (this_present_createdBy || that_present_createdBy) {
      if (!(this_present_createdBy && that_present_createdBy))
        return false;
      if (!this.createdBy.equals(that.createdBy))
        return false;
    }

    boolean this_present_dateCreated = true;
    boolean that_present_dateCreated = true;
    if (this_present_dateCreated || that_present_dateCreated) {
      if (!(this_present_dateCreated && that_present_dateCreated))
        return false;
      if (this.dateCreated != that.dateCreated)
        return false;
    }

    boolean this_present_members = true && this.isSetMembers();
    boolean that_present_members = true && that.isSetMembers();
    if (this_present_members || that_present_members) {
      if (!(this_present_members && that_present_members))
        return false;
      if (!this.members.equals(that.members))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TGroup other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TGroup typedOther = (TGroup)other;

    lastComparison = Boolean.valueOf(isSetGroupName()).compareTo(typedOther.isSetGroupName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroupName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupName, typedOther.groupName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreatedBy()).compareTo(typedOther.isSetCreatedBy());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreatedBy()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createdBy, typedOther.createdBy);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDateCreated()).compareTo(typedOther.isSetDateCreated());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDateCreated()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dateCreated, typedOther.dateCreated);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMembers()).compareTo(typedOther.isSetMembers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMembers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.members, typedOther.members);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // GROUP_NAME
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.groupName = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // CREATED_BY
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.createdBy = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // DATE_CREATED
          if (field.type == org.apache.thrift.protocol.TType.I64) {
            this.dateCreated = iprot.readI64();
            setDateCreatedIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // MEMBERS
          if (field.type == org.apache.thrift.protocol.TType.SET) {
            {
              org.apache.thrift.protocol.TSet _set4 = iprot.readSetBegin();
              this.members = new HashSet<TGroupMember>(2*_set4.size);
              for (int _i5 = 0; _i5 < _set4.size; ++_i5)
              {
                TGroupMember _elem6;
                _elem6 = new TGroupMember();
                _elem6.read(iprot);
                this.members.add(_elem6);
              }
              iprot.readSetEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.groupName != null) {
      oprot.writeFieldBegin(GROUP_NAME_FIELD_DESC);
      oprot.writeString(this.groupName);
      oprot.writeFieldEnd();
    }
    if (this.createdBy != null) {
      oprot.writeFieldBegin(CREATED_BY_FIELD_DESC);
      oprot.writeString(this.createdBy);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(DATE_CREATED_FIELD_DESC);
    oprot.writeI64(this.dateCreated);
    oprot.writeFieldEnd();
    if (this.members != null) {
      oprot.writeFieldBegin(MEMBERS_FIELD_DESC);
      {
        oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, this.members.size()));
        for (TGroupMember _iter7 : this.members)
        {
          _iter7.write(oprot);
        }
        oprot.writeSetEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TGroup(");
    boolean first = true;

    sb.append("groupName:");
    if (this.groupName == null) {
      sb.append("null");
    } else {
      sb.append(this.groupName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createdBy:");
    if (this.createdBy == null) {
      sb.append("null");
    } else {
      sb.append(this.createdBy);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dateCreated:");
    sb.append(this.dateCreated);
    first = false;
    if (!first) sb.append(", ");
    sb.append("members:");
    if (this.members == null) {
      sb.append("null");
    } else {
      sb.append(this.members);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

