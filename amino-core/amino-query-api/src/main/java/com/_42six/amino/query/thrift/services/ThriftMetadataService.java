/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com._42six.amino.query.thrift.services;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.*;

public class ThriftMetadataService {

  public interface Iface {

    public List<com._42six.amino.common.thrift.TDatasourceMetadata> listDataSources(Set<String> visibilities) throws org.apache.thrift.TException;

    public List<com._42six.amino.common.thrift.TFeatureMetadata> listFeatures(String datasourceId, Set<String> visibilities) throws org.apache.thrift.TException;

    public List<com._42six.amino.common.thrift.TBucketMetadata> listBuckets(String datasourceId, Set<String> visibilities) throws org.apache.thrift.TException;

    public com._42six.amino.common.thrift.TDatasourceMetadata getDataSource(String dataSourceId, Set<String> visibilities) throws org.apache.thrift.TException;

    public com._42six.amino.common.thrift.TFeatureMetadata getFeature(String id, Set<String> visibilities) throws org.apache.thrift.TException;

    public com._42six.amino.common.thrift.TBucketMetadata getBucket(String id, Set<String> visibilities) throws org.apache.thrift.TException;

    /**
     * Fetches the Hypothesis
     * 
     * @param userId       The ID of the user making the request
     * @param owner        The owner field of the hypthesis to fetch
     * @param hypothesisId The ID of the hypothesis to fetch
     * @param visibility   The security visibilities for the database
     * 
     * @param userId
     * @param owner
     * @param hypothesisId
     * @param visibilities
     */
    public com._42six.amino.common.thrift.THypothesis getHypothesis(String userId, String owner, String hypothesisId, Set<String> visibilities) throws org.apache.thrift.TException;

    public List<com._42six.amino.common.thrift.THypothesis> listHypotheses(String userId, Set<String> visibilities) throws org.apache.thrift.TException;

    public com._42six.amino.common.thrift.THypothesis createHypothesis(com._42six.amino.common.thrift.THypothesis hypothesis, String userId, Set<String> visibilities) throws org.apache.thrift.TException;

    public com._42six.amino.common.thrift.THypothesis updateHypothesis(com._42six.amino.common.thrift.THypothesis hypothesis, String requester, Set<String> visibilities) throws org.apache.thrift.TException;

    public void deleteHypothesis(String owner, String id, Set<String> visibilities) throws org.apache.thrift.TException;

    public int getShardCount() throws org.apache.thrift.TException;

    public int getHashCount() throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void listDataSources(Set<String> visibilities, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.listDataSources_call> resultHandler) throws org.apache.thrift.TException;

    public void listFeatures(String datasourceId, Set<String> visibilities, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.listFeatures_call> resultHandler) throws org.apache.thrift.TException;

    public void listBuckets(String datasourceId, Set<String> visibilities, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.listBuckets_call> resultHandler) throws org.apache.thrift.TException;

    public void getDataSource(String dataSourceId, Set<String> visibilities, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getDataSource_call> resultHandler) throws org.apache.thrift.TException;

    public void getFeature(String id, Set<String> visibilities, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getFeature_call> resultHandler) throws org.apache.thrift.TException;

    public void getBucket(String id, Set<String> visibilities, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getBucket_call> resultHandler) throws org.apache.thrift.TException;

    public void getHypothesis(String userId, String owner, String hypothesisId, Set<String> visibilities, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getHypothesis_call> resultHandler) throws org.apache.thrift.TException;

    public void listHypotheses(String userId, Set<String> visibilities, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.listHypotheses_call> resultHandler) throws org.apache.thrift.TException;

    public void createHypothesis(com._42six.amino.common.thrift.THypothesis hypothesis, String userId, Set<String> visibilities, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.createHypothesis_call> resultHandler) throws org.apache.thrift.TException;

    public void updateHypothesis(com._42six.amino.common.thrift.THypothesis hypothesis, String requester, Set<String> visibilities, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.updateHypothesis_call> resultHandler) throws org.apache.thrift.TException;

    public void deleteHypothesis(String owner, String id, Set<String> visibilities, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.deleteHypothesis_call> resultHandler) throws org.apache.thrift.TException;

    public void getShardCount(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getShardCount_call> resultHandler) throws org.apache.thrift.TException;

    public void getHashCount(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getHashCount_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client implements org.apache.thrift.TServiceClient, Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      this(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }

    protected org.apache.thrift.protocol.TProtocol iprot_;
    protected org.apache.thrift.protocol.TProtocol oprot_;

    protected int seqid_;

    public org.apache.thrift.protocol.TProtocol getInputProtocol()
    {
      return this.iprot_;
    }

    public org.apache.thrift.protocol.TProtocol getOutputProtocol()
    {
      return this.oprot_;
    }

    public List<com._42six.amino.common.thrift.TDatasourceMetadata> listDataSources(Set<String> visibilities) throws org.apache.thrift.TException
    {
      send_listDataSources(visibilities);
      return recv_listDataSources();
    }

    public void send_listDataSources(Set<String> visibilities) throws org.apache.thrift.TException
    {
      oprot_.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listDataSources", org.apache.thrift.protocol.TMessageType.CALL, ++seqid_));
      listDataSources_args args = new listDataSources_args();
      args.setVisibilities(visibilities);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public List<com._42six.amino.common.thrift.TDatasourceMetadata> recv_listDataSources() throws org.apache.thrift.TException
    {
      org.apache.thrift.protocol.TMessage msg = iprot_.readMessageBegin();
      if (msg.type == org.apache.thrift.protocol.TMessageType.EXCEPTION) {
        org.apache.thrift.TApplicationException x = org.apache.thrift.TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.BAD_SEQUENCE_ID, "listDataSources failed: out of sequence response");
      }
      listDataSources_result result = new listDataSources_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listDataSources failed: unknown result");
    }

    public List<com._42six.amino.common.thrift.TFeatureMetadata> listFeatures(String datasourceId, Set<String> visibilities) throws org.apache.thrift.TException
    {
      send_listFeatures(datasourceId, visibilities);
      return recv_listFeatures();
    }

    public void send_listFeatures(String datasourceId, Set<String> visibilities) throws org.apache.thrift.TException
    {
      oprot_.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listFeatures", org.apache.thrift.protocol.TMessageType.CALL, ++seqid_));
      listFeatures_args args = new listFeatures_args();
      args.setDatasourceId(datasourceId);
      args.setVisibilities(visibilities);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public List<com._42six.amino.common.thrift.TFeatureMetadata> recv_listFeatures() throws org.apache.thrift.TException
    {
      org.apache.thrift.protocol.TMessage msg = iprot_.readMessageBegin();
      if (msg.type == org.apache.thrift.protocol.TMessageType.EXCEPTION) {
        org.apache.thrift.TApplicationException x = org.apache.thrift.TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.BAD_SEQUENCE_ID, "listFeatures failed: out of sequence response");
      }
      listFeatures_result result = new listFeatures_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listFeatures failed: unknown result");
    }

    public List<com._42six.amino.common.thrift.TBucketMetadata> listBuckets(String datasourceId, Set<String> visibilities) throws org.apache.thrift.TException
    {
      send_listBuckets(datasourceId, visibilities);
      return recv_listBuckets();
    }

    public void send_listBuckets(String datasourceId, Set<String> visibilities) throws org.apache.thrift.TException
    {
      oprot_.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listBuckets", org.apache.thrift.protocol.TMessageType.CALL, ++seqid_));
      listBuckets_args args = new listBuckets_args();
      args.setDatasourceId(datasourceId);
      args.setVisibilities(visibilities);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public List<com._42six.amino.common.thrift.TBucketMetadata> recv_listBuckets() throws org.apache.thrift.TException
    {
      org.apache.thrift.protocol.TMessage msg = iprot_.readMessageBegin();
      if (msg.type == org.apache.thrift.protocol.TMessageType.EXCEPTION) {
        org.apache.thrift.TApplicationException x = org.apache.thrift.TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.BAD_SEQUENCE_ID, "listBuckets failed: out of sequence response");
      }
      listBuckets_result result = new listBuckets_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listBuckets failed: unknown result");
    }

    public com._42six.amino.common.thrift.TDatasourceMetadata getDataSource(String dataSourceId, Set<String> visibilities) throws org.apache.thrift.TException
    {
      send_getDataSource(dataSourceId, visibilities);
      return recv_getDataSource();
    }

    public void send_getDataSource(String dataSourceId, Set<String> visibilities) throws org.apache.thrift.TException
    {
      oprot_.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getDataSource", org.apache.thrift.protocol.TMessageType.CALL, ++seqid_));
      getDataSource_args args = new getDataSource_args();
      args.setDataSourceId(dataSourceId);
      args.setVisibilities(visibilities);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public com._42six.amino.common.thrift.TDatasourceMetadata recv_getDataSource() throws org.apache.thrift.TException
    {
      org.apache.thrift.protocol.TMessage msg = iprot_.readMessageBegin();
      if (msg.type == org.apache.thrift.protocol.TMessageType.EXCEPTION) {
        org.apache.thrift.TApplicationException x = org.apache.thrift.TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.BAD_SEQUENCE_ID, "getDataSource failed: out of sequence response");
      }
      getDataSource_result result = new getDataSource_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getDataSource failed: unknown result");
    }

    public com._42six.amino.common.thrift.TFeatureMetadata getFeature(String id, Set<String> visibilities) throws org.apache.thrift.TException
    {
      send_getFeature(id, visibilities);
      return recv_getFeature();
    }

    public void send_getFeature(String id, Set<String> visibilities) throws org.apache.thrift.TException
    {
      oprot_.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFeature", org.apache.thrift.protocol.TMessageType.CALL, ++seqid_));
      getFeature_args args = new getFeature_args();
      args.setId(id);
      args.setVisibilities(visibilities);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public com._42six.amino.common.thrift.TFeatureMetadata recv_getFeature() throws org.apache.thrift.TException
    {
      org.apache.thrift.protocol.TMessage msg = iprot_.readMessageBegin();
      if (msg.type == org.apache.thrift.protocol.TMessageType.EXCEPTION) {
        org.apache.thrift.TApplicationException x = org.apache.thrift.TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.BAD_SEQUENCE_ID, "getFeature failed: out of sequence response");
      }
      getFeature_result result = new getFeature_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getFeature failed: unknown result");
    }

    public com._42six.amino.common.thrift.TBucketMetadata getBucket(String id, Set<String> visibilities) throws org.apache.thrift.TException
    {
      send_getBucket(id, visibilities);
      return recv_getBucket();
    }

    public void send_getBucket(String id, Set<String> visibilities) throws org.apache.thrift.TException
    {
      oprot_.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getBucket", org.apache.thrift.protocol.TMessageType.CALL, ++seqid_));
      getBucket_args args = new getBucket_args();
      args.setId(id);
      args.setVisibilities(visibilities);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public com._42six.amino.common.thrift.TBucketMetadata recv_getBucket() throws org.apache.thrift.TException
    {
      org.apache.thrift.protocol.TMessage msg = iprot_.readMessageBegin();
      if (msg.type == org.apache.thrift.protocol.TMessageType.EXCEPTION) {
        org.apache.thrift.TApplicationException x = org.apache.thrift.TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.BAD_SEQUENCE_ID, "getBucket failed: out of sequence response");
      }
      getBucket_result result = new getBucket_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getBucket failed: unknown result");
    }

    public com._42six.amino.common.thrift.THypothesis getHypothesis(String userId, String owner, String hypothesisId, Set<String> visibilities) throws org.apache.thrift.TException
    {
      send_getHypothesis(userId, owner, hypothesisId, visibilities);
      return recv_getHypothesis();
    }

    public void send_getHypothesis(String userId, String owner, String hypothesisId, Set<String> visibilities) throws org.apache.thrift.TException
    {
      oprot_.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getHypothesis", org.apache.thrift.protocol.TMessageType.CALL, ++seqid_));
      getHypothesis_args args = new getHypothesis_args();
      args.setUserId(userId);
      args.setOwner(owner);
      args.setHypothesisId(hypothesisId);
      args.setVisibilities(visibilities);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public com._42six.amino.common.thrift.THypothesis recv_getHypothesis() throws org.apache.thrift.TException
    {
      org.apache.thrift.protocol.TMessage msg = iprot_.readMessageBegin();
      if (msg.type == org.apache.thrift.protocol.TMessageType.EXCEPTION) {
        org.apache.thrift.TApplicationException x = org.apache.thrift.TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.BAD_SEQUENCE_ID, "getHypothesis failed: out of sequence response");
      }
      getHypothesis_result result = new getHypothesis_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getHypothesis failed: unknown result");
    }

    public List<com._42six.amino.common.thrift.THypothesis> listHypotheses(String userId, Set<String> visibilities) throws org.apache.thrift.TException
    {
      send_listHypotheses(userId, visibilities);
      return recv_listHypotheses();
    }

    public void send_listHypotheses(String userId, Set<String> visibilities) throws org.apache.thrift.TException
    {
      oprot_.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listHypotheses", org.apache.thrift.protocol.TMessageType.CALL, ++seqid_));
      listHypotheses_args args = new listHypotheses_args();
      args.setUserId(userId);
      args.setVisibilities(visibilities);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public List<com._42six.amino.common.thrift.THypothesis> recv_listHypotheses() throws org.apache.thrift.TException
    {
      org.apache.thrift.protocol.TMessage msg = iprot_.readMessageBegin();
      if (msg.type == org.apache.thrift.protocol.TMessageType.EXCEPTION) {
        org.apache.thrift.TApplicationException x = org.apache.thrift.TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.BAD_SEQUENCE_ID, "listHypotheses failed: out of sequence response");
      }
      listHypotheses_result result = new listHypotheses_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listHypotheses failed: unknown result");
    }

    public com._42six.amino.common.thrift.THypothesis createHypothesis(com._42six.amino.common.thrift.THypothesis hypothesis, String userId, Set<String> visibilities) throws org.apache.thrift.TException
    {
      send_createHypothesis(hypothesis, userId, visibilities);
      return recv_createHypothesis();
    }

    public void send_createHypothesis(com._42six.amino.common.thrift.THypothesis hypothesis, String userId, Set<String> visibilities) throws org.apache.thrift.TException
    {
      oprot_.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createHypothesis", org.apache.thrift.protocol.TMessageType.CALL, ++seqid_));
      createHypothesis_args args = new createHypothesis_args();
      args.setHypothesis(hypothesis);
      args.setUserId(userId);
      args.setVisibilities(visibilities);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public com._42six.amino.common.thrift.THypothesis recv_createHypothesis() throws org.apache.thrift.TException
    {
      org.apache.thrift.protocol.TMessage msg = iprot_.readMessageBegin();
      if (msg.type == org.apache.thrift.protocol.TMessageType.EXCEPTION) {
        org.apache.thrift.TApplicationException x = org.apache.thrift.TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.BAD_SEQUENCE_ID, "createHypothesis failed: out of sequence response");
      }
      createHypothesis_result result = new createHypothesis_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createHypothesis failed: unknown result");
    }

    public com._42six.amino.common.thrift.THypothesis updateHypothesis(com._42six.amino.common.thrift.THypothesis hypothesis, String requester, Set<String> visibilities) throws org.apache.thrift.TException
    {
      send_updateHypothesis(hypothesis, requester, visibilities);
      return recv_updateHypothesis();
    }

    public void send_updateHypothesis(com._42six.amino.common.thrift.THypothesis hypothesis, String requester, Set<String> visibilities) throws org.apache.thrift.TException
    {
      oprot_.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateHypothesis", org.apache.thrift.protocol.TMessageType.CALL, ++seqid_));
      updateHypothesis_args args = new updateHypothesis_args();
      args.setHypothesis(hypothesis);
      args.setRequester(requester);
      args.setVisibilities(visibilities);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public com._42six.amino.common.thrift.THypothesis recv_updateHypothesis() throws org.apache.thrift.TException
    {
      org.apache.thrift.protocol.TMessage msg = iprot_.readMessageBegin();
      if (msg.type == org.apache.thrift.protocol.TMessageType.EXCEPTION) {
        org.apache.thrift.TApplicationException x = org.apache.thrift.TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.BAD_SEQUENCE_ID, "updateHypothesis failed: out of sequence response");
      }
      updateHypothesis_result result = new updateHypothesis_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateHypothesis failed: unknown result");
    }

    public void deleteHypothesis(String owner, String id, Set<String> visibilities) throws org.apache.thrift.TException
    {
      send_deleteHypothesis(owner, id, visibilities);
      recv_deleteHypothesis();
    }

    public void send_deleteHypothesis(String owner, String id, Set<String> visibilities) throws org.apache.thrift.TException
    {
      oprot_.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteHypothesis", org.apache.thrift.protocol.TMessageType.CALL, ++seqid_));
      deleteHypothesis_args args = new deleteHypothesis_args();
      args.setOwner(owner);
      args.setId(id);
      args.setVisibilities(visibilities);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_deleteHypothesis() throws org.apache.thrift.TException
    {
      org.apache.thrift.protocol.TMessage msg = iprot_.readMessageBegin();
      if (msg.type == org.apache.thrift.protocol.TMessageType.EXCEPTION) {
        org.apache.thrift.TApplicationException x = org.apache.thrift.TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.BAD_SEQUENCE_ID, "deleteHypothesis failed: out of sequence response");
      }
      deleteHypothesis_result result = new deleteHypothesis_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      return;
    }

    public int getShardCount() throws org.apache.thrift.TException
    {
      send_getShardCount();
      return recv_getShardCount();
    }

    public void send_getShardCount() throws org.apache.thrift.TException
    {
      oprot_.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getShardCount", org.apache.thrift.protocol.TMessageType.CALL, ++seqid_));
      getShardCount_args args = new getShardCount_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public int recv_getShardCount() throws org.apache.thrift.TException
    {
      org.apache.thrift.protocol.TMessage msg = iprot_.readMessageBegin();
      if (msg.type == org.apache.thrift.protocol.TMessageType.EXCEPTION) {
        org.apache.thrift.TApplicationException x = org.apache.thrift.TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.BAD_SEQUENCE_ID, "getShardCount failed: out of sequence response");
      }
      getShardCount_result result = new getShardCount_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getShardCount failed: unknown result");
    }

    public int getHashCount() throws org.apache.thrift.TException
    {
      send_getHashCount();
      return recv_getHashCount();
    }

    public void send_getHashCount() throws org.apache.thrift.TException
    {
      oprot_.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getHashCount", org.apache.thrift.protocol.TMessageType.CALL, ++seqid_));
      getHashCount_args args = new getHashCount_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public int recv_getHashCount() throws org.apache.thrift.TException
    {
      org.apache.thrift.protocol.TMessage msg = iprot_.readMessageBegin();
      if (msg.type == org.apache.thrift.protocol.TMessageType.EXCEPTION) {
        org.apache.thrift.TApplicationException x = org.apache.thrift.TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.BAD_SEQUENCE_ID, "getHashCount failed: out of sequence response");
      }
      getHashCount_result result = new getHashCount_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getHashCount failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void listDataSources(Set<String> visibilities, org.apache.thrift.async.AsyncMethodCallback<listDataSources_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listDataSources_call method_call = new listDataSources_call(visibilities, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class listDataSources_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Set<String> visibilities;
      public listDataSources_call(Set<String> visibilities, org.apache.thrift.async.AsyncMethodCallback<listDataSources_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.visibilities = visibilities;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listDataSources", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listDataSources_args args = new listDataSources_args();
        args.setVisibilities(visibilities);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com._42six.amino.common.thrift.TDatasourceMetadata> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listDataSources();
      }
    }

    public void listFeatures(String datasourceId, Set<String> visibilities, org.apache.thrift.async.AsyncMethodCallback<listFeatures_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listFeatures_call method_call = new listFeatures_call(datasourceId, visibilities, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class listFeatures_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String datasourceId;
      private Set<String> visibilities;
      public listFeatures_call(String datasourceId, Set<String> visibilities, org.apache.thrift.async.AsyncMethodCallback<listFeatures_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.datasourceId = datasourceId;
        this.visibilities = visibilities;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listFeatures", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listFeatures_args args = new listFeatures_args();
        args.setDatasourceId(datasourceId);
        args.setVisibilities(visibilities);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com._42six.amino.common.thrift.TFeatureMetadata> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listFeatures();
      }
    }

    public void listBuckets(String datasourceId, Set<String> visibilities, org.apache.thrift.async.AsyncMethodCallback<listBuckets_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listBuckets_call method_call = new listBuckets_call(datasourceId, visibilities, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class listBuckets_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String datasourceId;
      private Set<String> visibilities;
      public listBuckets_call(String datasourceId, Set<String> visibilities, org.apache.thrift.async.AsyncMethodCallback<listBuckets_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.datasourceId = datasourceId;
        this.visibilities = visibilities;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listBuckets", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listBuckets_args args = new listBuckets_args();
        args.setDatasourceId(datasourceId);
        args.setVisibilities(visibilities);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com._42six.amino.common.thrift.TBucketMetadata> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listBuckets();
      }
    }

    public void getDataSource(String dataSourceId, Set<String> visibilities, org.apache.thrift.async.AsyncMethodCallback<getDataSource_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getDataSource_call method_call = new getDataSource_call(dataSourceId, visibilities, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class getDataSource_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String dataSourceId;
      private Set<String> visibilities;
      public getDataSource_call(String dataSourceId, Set<String> visibilities, org.apache.thrift.async.AsyncMethodCallback<getDataSource_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.dataSourceId = dataSourceId;
        this.visibilities = visibilities;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getDataSource", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getDataSource_args args = new getDataSource_args();
        args.setDataSourceId(dataSourceId);
        args.setVisibilities(visibilities);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com._42six.amino.common.thrift.TDatasourceMetadata getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getDataSource();
      }
    }

    public void getFeature(String id, Set<String> visibilities, org.apache.thrift.async.AsyncMethodCallback<getFeature_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getFeature_call method_call = new getFeature_call(id, visibilities, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class getFeature_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String id;
      private Set<String> visibilities;
      public getFeature_call(String id, Set<String> visibilities, org.apache.thrift.async.AsyncMethodCallback<getFeature_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
        this.visibilities = visibilities;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFeature", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getFeature_args args = new getFeature_args();
        args.setId(id);
        args.setVisibilities(visibilities);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com._42six.amino.common.thrift.TFeatureMetadata getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getFeature();
      }
    }

    public void getBucket(String id, Set<String> visibilities, org.apache.thrift.async.AsyncMethodCallback<getBucket_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getBucket_call method_call = new getBucket_call(id, visibilities, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class getBucket_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String id;
      private Set<String> visibilities;
      public getBucket_call(String id, Set<String> visibilities, org.apache.thrift.async.AsyncMethodCallback<getBucket_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
        this.visibilities = visibilities;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getBucket", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getBucket_args args = new getBucket_args();
        args.setId(id);
        args.setVisibilities(visibilities);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com._42six.amino.common.thrift.TBucketMetadata getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getBucket();
      }
    }

    public void getHypothesis(String userId, String owner, String hypothesisId, Set<String> visibilities, org.apache.thrift.async.AsyncMethodCallback<getHypothesis_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getHypothesis_call method_call = new getHypothesis_call(userId, owner, hypothesisId, visibilities, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class getHypothesis_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String userId;
      private String owner;
      private String hypothesisId;
      private Set<String> visibilities;
      public getHypothesis_call(String userId, String owner, String hypothesisId, Set<String> visibilities, org.apache.thrift.async.AsyncMethodCallback<getHypothesis_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
        this.owner = owner;
        this.hypothesisId = hypothesisId;
        this.visibilities = visibilities;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getHypothesis", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getHypothesis_args args = new getHypothesis_args();
        args.setUserId(userId);
        args.setOwner(owner);
        args.setHypothesisId(hypothesisId);
        args.setVisibilities(visibilities);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com._42six.amino.common.thrift.THypothesis getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getHypothesis();
      }
    }

    public void listHypotheses(String userId, Set<String> visibilities, org.apache.thrift.async.AsyncMethodCallback<listHypotheses_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listHypotheses_call method_call = new listHypotheses_call(userId, visibilities, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class listHypotheses_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String userId;
      private Set<String> visibilities;
      public listHypotheses_call(String userId, Set<String> visibilities, org.apache.thrift.async.AsyncMethodCallback<listHypotheses_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
        this.visibilities = visibilities;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listHypotheses", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listHypotheses_args args = new listHypotheses_args();
        args.setUserId(userId);
        args.setVisibilities(visibilities);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com._42six.amino.common.thrift.THypothesis> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listHypotheses();
      }
    }

    public void createHypothesis(com._42six.amino.common.thrift.THypothesis hypothesis, String userId, Set<String> visibilities, org.apache.thrift.async.AsyncMethodCallback<createHypothesis_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createHypothesis_call method_call = new createHypothesis_call(hypothesis, userId, visibilities, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class createHypothesis_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com._42six.amino.common.thrift.THypothesis hypothesis;
      private String userId;
      private Set<String> visibilities;
      public createHypothesis_call(com._42six.amino.common.thrift.THypothesis hypothesis, String userId, Set<String> visibilities, org.apache.thrift.async.AsyncMethodCallback<createHypothesis_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.hypothesis = hypothesis;
        this.userId = userId;
        this.visibilities = visibilities;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createHypothesis", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createHypothesis_args args = new createHypothesis_args();
        args.setHypothesis(hypothesis);
        args.setUserId(userId);
        args.setVisibilities(visibilities);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com._42six.amino.common.thrift.THypothesis getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createHypothesis();
      }
    }

    public void updateHypothesis(com._42six.amino.common.thrift.THypothesis hypothesis, String requester, Set<String> visibilities, org.apache.thrift.async.AsyncMethodCallback<updateHypothesis_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateHypothesis_call method_call = new updateHypothesis_call(hypothesis, requester, visibilities, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class updateHypothesis_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com._42six.amino.common.thrift.THypothesis hypothesis;
      private String requester;
      private Set<String> visibilities;
      public updateHypothesis_call(com._42six.amino.common.thrift.THypothesis hypothesis, String requester, Set<String> visibilities, org.apache.thrift.async.AsyncMethodCallback<updateHypothesis_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.hypothesis = hypothesis;
        this.requester = requester;
        this.visibilities = visibilities;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateHypothesis", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateHypothesis_args args = new updateHypothesis_args();
        args.setHypothesis(hypothesis);
        args.setRequester(requester);
        args.setVisibilities(visibilities);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com._42six.amino.common.thrift.THypothesis getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateHypothesis();
      }
    }

    public void deleteHypothesis(String owner, String id, Set<String> visibilities, org.apache.thrift.async.AsyncMethodCallback<deleteHypothesis_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteHypothesis_call method_call = new deleteHypothesis_call(owner, id, visibilities, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class deleteHypothesis_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String owner;
      private String id;
      private Set<String> visibilities;
      public deleteHypothesis_call(String owner, String id, Set<String> visibilities, org.apache.thrift.async.AsyncMethodCallback<deleteHypothesis_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.owner = owner;
        this.id = id;
        this.visibilities = visibilities;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteHypothesis", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteHypothesis_args args = new deleteHypothesis_args();
        args.setOwner(owner);
        args.setId(id);
        args.setVisibilities(visibilities);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_deleteHypothesis();
      }
    }

    public void getShardCount(org.apache.thrift.async.AsyncMethodCallback<getShardCount_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getShardCount_call method_call = new getShardCount_call(resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class getShardCount_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getShardCount_call(org.apache.thrift.async.AsyncMethodCallback<getShardCount_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getShardCount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getShardCount_args args = new getShardCount_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getShardCount();
      }
    }

    public void getHashCount(org.apache.thrift.async.AsyncMethodCallback<getHashCount_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getHashCount_call method_call = new getHashCount_call(resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class getHashCount_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getHashCount_call(org.apache.thrift.async.AsyncMethodCallback<getHashCount_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getHashCount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getHashCount_args args = new getHashCount_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getHashCount();
      }
    }

  }

  public static class Processor implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(Iface iface)
    {
      iface_ = iface;
      processMap_.put("listDataSources", new listDataSources());
      processMap_.put("listFeatures", new listFeatures());
      processMap_.put("listBuckets", new listBuckets());
      processMap_.put("getDataSource", new getDataSource());
      processMap_.put("getFeature", new getFeature());
      processMap_.put("getBucket", new getBucket());
      processMap_.put("getHypothesis", new getHypothesis());
      processMap_.put("listHypotheses", new listHypotheses());
      processMap_.put("createHypothesis", new createHypothesis());
      processMap_.put("updateHypothesis", new updateHypothesis());
      processMap_.put("deleteHypothesis", new deleteHypothesis());
      processMap_.put("getShardCount", new getShardCount());
      processMap_.put("getHashCount", new getHashCount());
    }

    protected static interface ProcessFunction {
      public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException;
    }

    private Iface iface_;
    protected final HashMap<String,ProcessFunction> processMap_ = new HashMap<String,ProcessFunction>();

    public boolean process(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
    {
      org.apache.thrift.protocol.TMessage msg = iprot.readMessageBegin();
      ProcessFunction fn = processMap_.get(msg.name);
      if (fn == null) {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, org.apache.thrift.protocol.TType.STRUCT);
        iprot.readMessageEnd();
        org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.UNKNOWN_METHOD, "Invalid method name: '"+msg.name+"'");
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(msg.name, org.apache.thrift.protocol.TMessageType.EXCEPTION, msg.seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return true;
      }
      fn.process(msg.seqid, iprot, oprot);
      return true;
    }

    private class listDataSources implements ProcessFunction {
      public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        listDataSources_args args = new listDataSources_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listDataSources", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        listDataSources_result result = new listDataSources_result();
        result.success = iface_.listDataSources(args.visibilities);
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listDataSources", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class listFeatures implements ProcessFunction {
      public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        listFeatures_args args = new listFeatures_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listFeatures", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        listFeatures_result result = new listFeatures_result();
        result.success = iface_.listFeatures(args.datasourceId, args.visibilities);
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listFeatures", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class listBuckets implements ProcessFunction {
      public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        listBuckets_args args = new listBuckets_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listBuckets", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        listBuckets_result result = new listBuckets_result();
        result.success = iface_.listBuckets(args.datasourceId, args.visibilities);
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listBuckets", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getDataSource implements ProcessFunction {
      public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        getDataSource_args args = new getDataSource_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getDataSource", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getDataSource_result result = new getDataSource_result();
        result.success = iface_.getDataSource(args.dataSourceId, args.visibilities);
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getDataSource", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getFeature implements ProcessFunction {
      public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        getFeature_args args = new getFeature_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFeature", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getFeature_result result = new getFeature_result();
        result.success = iface_.getFeature(args.id, args.visibilities);
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFeature", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getBucket implements ProcessFunction {
      public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        getBucket_args args = new getBucket_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getBucket", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getBucket_result result = new getBucket_result();
        result.success = iface_.getBucket(args.id, args.visibilities);
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getBucket", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getHypothesis implements ProcessFunction {
      public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        getHypothesis_args args = new getHypothesis_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getHypothesis", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getHypothesis_result result = new getHypothesis_result();
        result.success = iface_.getHypothesis(args.userId, args.owner, args.hypothesisId, args.visibilities);
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getHypothesis", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class listHypotheses implements ProcessFunction {
      public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        listHypotheses_args args = new listHypotheses_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listHypotheses", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        listHypotheses_result result = new listHypotheses_result();
        result.success = iface_.listHypotheses(args.userId, args.visibilities);
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listHypotheses", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class createHypothesis implements ProcessFunction {
      public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        createHypothesis_args args = new createHypothesis_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createHypothesis", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        createHypothesis_result result = new createHypothesis_result();
        result.success = iface_.createHypothesis(args.hypothesis, args.userId, args.visibilities);
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createHypothesis", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class updateHypothesis implements ProcessFunction {
      public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        updateHypothesis_args args = new updateHypothesis_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateHypothesis", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        updateHypothesis_result result = new updateHypothesis_result();
        result.success = iface_.updateHypothesis(args.hypothesis, args.requester, args.visibilities);
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateHypothesis", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class deleteHypothesis implements ProcessFunction {
      public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        deleteHypothesis_args args = new deleteHypothesis_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteHypothesis", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        deleteHypothesis_result result = new deleteHypothesis_result();
        iface_.deleteHypothesis(args.owner, args.id, args.visibilities);
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteHypothesis", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getShardCount implements ProcessFunction {
      public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        getShardCount_args args = new getShardCount_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getShardCount", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getShardCount_result result = new getShardCount_result();
        result.success = iface_.getShardCount();
        result.setSuccessIsSet(true);
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getShardCount", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getHashCount implements ProcessFunction {
      public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        getHashCount_args args = new getHashCount_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getHashCount", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getHashCount_result result = new getHashCount_result();
        result.success = iface_.getHashCount();
        result.setSuccessIsSet(true);
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getHashCount", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

  }

  public static class listDataSources_args implements org.apache.thrift.TBase<listDataSources_args, listDataSources_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listDataSources_args");

    private static final org.apache.thrift.protocol.TField VISIBILITIES_FIELD_DESC = new org.apache.thrift.protocol.TField("visibilities", org.apache.thrift.protocol.TType.SET, (short)1);

    public Set<String> visibilities;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VISIBILITIES((short)1, "visibilities");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VISIBILITIES
            return VISIBILITIES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VISIBILITIES, new org.apache.thrift.meta_data.FieldMetaData("visibilities", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listDataSources_args.class, metaDataMap);
    }

    public listDataSources_args() {
    }

    public listDataSources_args(
      Set<String> visibilities)
    {
      this();
      this.visibilities = visibilities;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listDataSources_args(listDataSources_args other) {
      if (other.isSetVisibilities()) {
        Set<String> __this__visibilities = new HashSet<String>();
        for (String other_element : other.visibilities) {
          __this__visibilities.add(other_element);
        }
        this.visibilities = __this__visibilities;
      }
    }

    public listDataSources_args deepCopy() {
      return new listDataSources_args(this);
    }

    @Override
    public void clear() {
      this.visibilities = null;
    }

    public int getVisibilitiesSize() {
      return (this.visibilities == null) ? 0 : this.visibilities.size();
    }

    public java.util.Iterator<String> getVisibilitiesIterator() {
      return (this.visibilities == null) ? null : this.visibilities.iterator();
    }

    public void addToVisibilities(String elem) {
      if (this.visibilities == null) {
        this.visibilities = new HashSet<String>();
      }
      this.visibilities.add(elem);
    }

    public Set<String> getVisibilities() {
      return this.visibilities;
    }

    public listDataSources_args setVisibilities(Set<String> visibilities) {
      this.visibilities = visibilities;
      return this;
    }

    public void unsetVisibilities() {
      this.visibilities = null;
    }

    /** Returns true if field visibilities is set (has been assigned a value) and false otherwise */
    public boolean isSetVisibilities() {
      return this.visibilities != null;
    }

    public void setVisibilitiesIsSet(boolean value) {
      if (!value) {
        this.visibilities = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case VISIBILITIES:
        if (value == null) {
          unsetVisibilities();
        } else {
          setVisibilities((Set<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case VISIBILITIES:
        return getVisibilities();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case VISIBILITIES:
        return isSetVisibilities();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listDataSources_args)
        return this.equals((listDataSources_args)that);
      return false;
    }

    public boolean equals(listDataSources_args that) {
      if (that == null)
        return false;

      boolean this_present_visibilities = true && this.isSetVisibilities();
      boolean that_present_visibilities = true && that.isSetVisibilities();
      if (this_present_visibilities || that_present_visibilities) {
        if (!(this_present_visibilities && that_present_visibilities))
          return false;
        if (!this.visibilities.equals(that.visibilities))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(listDataSources_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      listDataSources_args typedOther = (listDataSources_args)other;

      lastComparison = Boolean.valueOf(isSetVisibilities()).compareTo(typedOther.isSetVisibilities());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVisibilities()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.visibilities, typedOther.visibilities);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // VISIBILITIES
            if (field.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set0 = iprot.readSetBegin();
                this.visibilities = new HashSet<String>(2*_set0.size);
                for (int _i1 = 0; _i1 < _set0.size; ++_i1)
                {
                  String _elem2;
                  _elem2 = iprot.readString();
                  this.visibilities.add(_elem2);
                }
                iprot.readSetEnd();
              }
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.visibilities != null) {
        oprot.writeFieldBegin(VISIBILITIES_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, this.visibilities.size()));
          for (String _iter3 : this.visibilities)
          {
            oprot.writeString(_iter3);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listDataSources_args(");
      boolean first = true;

      sb.append("visibilities:");
      if (this.visibilities == null) {
        sb.append("null");
      } else {
        sb.append(this.visibilities);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class listDataSources_result implements org.apache.thrift.TBase<listDataSources_result, listDataSources_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listDataSources_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    public List<com._42six.amino.common.thrift.TDatasourceMetadata> success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com._42six.amino.common.thrift.TDatasourceMetadata.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listDataSources_result.class, metaDataMap);
    }

    public listDataSources_result() {
    }

    public listDataSources_result(
      List<com._42six.amino.common.thrift.TDatasourceMetadata> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listDataSources_result(listDataSources_result other) {
      if (other.isSetSuccess()) {
        List<com._42six.amino.common.thrift.TDatasourceMetadata> __this__success = new ArrayList<com._42six.amino.common.thrift.TDatasourceMetadata>();
        for (com._42six.amino.common.thrift.TDatasourceMetadata other_element : other.success) {
          __this__success.add(new com._42six.amino.common.thrift.TDatasourceMetadata(other_element));
        }
        this.success = __this__success;
      }
    }

    public listDataSources_result deepCopy() {
      return new listDataSources_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com._42six.amino.common.thrift.TDatasourceMetadata> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com._42six.amino.common.thrift.TDatasourceMetadata elem) {
      if (this.success == null) {
        this.success = new ArrayList<com._42six.amino.common.thrift.TDatasourceMetadata>();
      }
      this.success.add(elem);
    }

    public List<com._42six.amino.common.thrift.TDatasourceMetadata> getSuccess() {
      return this.success;
    }

    public listDataSources_result setSuccess(List<com._42six.amino.common.thrift.TDatasourceMetadata> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com._42six.amino.common.thrift.TDatasourceMetadata>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listDataSources_result)
        return this.equals((listDataSources_result)that);
      return false;
    }

    public boolean equals(listDataSources_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(listDataSources_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      listDataSources_result typedOther = (listDataSources_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list4 = iprot.readListBegin();
                this.success = new ArrayList<com._42six.amino.common.thrift.TDatasourceMetadata>(_list4.size);
                for (int _i5 = 0; _i5 < _list4.size; ++_i5)
                {
                  com._42six.amino.common.thrift.TDatasourceMetadata _elem6;
                  _elem6 = new com._42six.amino.common.thrift.TDatasourceMetadata();
                  _elem6.read(iprot);
                  this.success.add(_elem6);
                }
                iprot.readListEnd();
              }
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, this.success.size()));
          for (com._42six.amino.common.thrift.TDatasourceMetadata _iter7 : this.success)
          {
            _iter7.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listDataSources_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class listFeatures_args implements org.apache.thrift.TBase<listFeatures_args, listFeatures_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listFeatures_args");

    private static final org.apache.thrift.protocol.TField DATASOURCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("datasourceId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField VISIBILITIES_FIELD_DESC = new org.apache.thrift.protocol.TField("visibilities", org.apache.thrift.protocol.TType.SET, (short)2);

    public String datasourceId;
    public Set<String> visibilities;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATASOURCE_ID((short)1, "datasourceId"),
      VISIBILITIES((short)2, "visibilities");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATASOURCE_ID
            return DATASOURCE_ID;
          case 2: // VISIBILITIES
            return VISIBILITIES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATASOURCE_ID, new org.apache.thrift.meta_data.FieldMetaData("datasourceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.VISIBILITIES, new org.apache.thrift.meta_data.FieldMetaData("visibilities", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listFeatures_args.class, metaDataMap);
    }

    public listFeatures_args() {
    }

    public listFeatures_args(
      String datasourceId,
      Set<String> visibilities)
    {
      this();
      this.datasourceId = datasourceId;
      this.visibilities = visibilities;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listFeatures_args(listFeatures_args other) {
      if (other.isSetDatasourceId()) {
        this.datasourceId = other.datasourceId;
      }
      if (other.isSetVisibilities()) {
        Set<String> __this__visibilities = new HashSet<String>();
        for (String other_element : other.visibilities) {
          __this__visibilities.add(other_element);
        }
        this.visibilities = __this__visibilities;
      }
    }

    public listFeatures_args deepCopy() {
      return new listFeatures_args(this);
    }

    @Override
    public void clear() {
      this.datasourceId = null;
      this.visibilities = null;
    }

    public String getDatasourceId() {
      return this.datasourceId;
    }

    public listFeatures_args setDatasourceId(String datasourceId) {
      this.datasourceId = datasourceId;
      return this;
    }

    public void unsetDatasourceId() {
      this.datasourceId = null;
    }

    /** Returns true if field datasourceId is set (has been assigned a value) and false otherwise */
    public boolean isSetDatasourceId() {
      return this.datasourceId != null;
    }

    public void setDatasourceIdIsSet(boolean value) {
      if (!value) {
        this.datasourceId = null;
      }
    }

    public int getVisibilitiesSize() {
      return (this.visibilities == null) ? 0 : this.visibilities.size();
    }

    public java.util.Iterator<String> getVisibilitiesIterator() {
      return (this.visibilities == null) ? null : this.visibilities.iterator();
    }

    public void addToVisibilities(String elem) {
      if (this.visibilities == null) {
        this.visibilities = new HashSet<String>();
      }
      this.visibilities.add(elem);
    }

    public Set<String> getVisibilities() {
      return this.visibilities;
    }

    public listFeatures_args setVisibilities(Set<String> visibilities) {
      this.visibilities = visibilities;
      return this;
    }

    public void unsetVisibilities() {
      this.visibilities = null;
    }

    /** Returns true if field visibilities is set (has been assigned a value) and false otherwise */
    public boolean isSetVisibilities() {
      return this.visibilities != null;
    }

    public void setVisibilitiesIsSet(boolean value) {
      if (!value) {
        this.visibilities = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATASOURCE_ID:
        if (value == null) {
          unsetDatasourceId();
        } else {
          setDatasourceId((String)value);
        }
        break;

      case VISIBILITIES:
        if (value == null) {
          unsetVisibilities();
        } else {
          setVisibilities((Set<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATASOURCE_ID:
        return getDatasourceId();

      case VISIBILITIES:
        return getVisibilities();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATASOURCE_ID:
        return isSetDatasourceId();
      case VISIBILITIES:
        return isSetVisibilities();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listFeatures_args)
        return this.equals((listFeatures_args)that);
      return false;
    }

    public boolean equals(listFeatures_args that) {
      if (that == null)
        return false;

      boolean this_present_datasourceId = true && this.isSetDatasourceId();
      boolean that_present_datasourceId = true && that.isSetDatasourceId();
      if (this_present_datasourceId || that_present_datasourceId) {
        if (!(this_present_datasourceId && that_present_datasourceId))
          return false;
        if (!this.datasourceId.equals(that.datasourceId))
          return false;
      }

      boolean this_present_visibilities = true && this.isSetVisibilities();
      boolean that_present_visibilities = true && that.isSetVisibilities();
      if (this_present_visibilities || that_present_visibilities) {
        if (!(this_present_visibilities && that_present_visibilities))
          return false;
        if (!this.visibilities.equals(that.visibilities))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(listFeatures_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      listFeatures_args typedOther = (listFeatures_args)other;

      lastComparison = Boolean.valueOf(isSetDatasourceId()).compareTo(typedOther.isSetDatasourceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDatasourceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datasourceId, typedOther.datasourceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVisibilities()).compareTo(typedOther.isSetVisibilities());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVisibilities()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.visibilities, typedOther.visibilities);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // DATASOURCE_ID
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.datasourceId = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // VISIBILITIES
            if (field.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set8 = iprot.readSetBegin();
                this.visibilities = new HashSet<String>(2*_set8.size);
                for (int _i9 = 0; _i9 < _set8.size; ++_i9)
                {
                  String _elem10;
                  _elem10 = iprot.readString();
                  this.visibilities.add(_elem10);
                }
                iprot.readSetEnd();
              }
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.datasourceId != null) {
        oprot.writeFieldBegin(DATASOURCE_ID_FIELD_DESC);
        oprot.writeString(this.datasourceId);
        oprot.writeFieldEnd();
      }
      if (this.visibilities != null) {
        oprot.writeFieldBegin(VISIBILITIES_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, this.visibilities.size()));
          for (String _iter11 : this.visibilities)
          {
            oprot.writeString(_iter11);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listFeatures_args(");
      boolean first = true;

      sb.append("datasourceId:");
      if (this.datasourceId == null) {
        sb.append("null");
      } else {
        sb.append(this.datasourceId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("visibilities:");
      if (this.visibilities == null) {
        sb.append("null");
      } else {
        sb.append(this.visibilities);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class listFeatures_result implements org.apache.thrift.TBase<listFeatures_result, listFeatures_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listFeatures_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    public List<com._42six.amino.common.thrift.TFeatureMetadata> success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com._42six.amino.common.thrift.TFeatureMetadata.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listFeatures_result.class, metaDataMap);
    }

    public listFeatures_result() {
    }

    public listFeatures_result(
      List<com._42six.amino.common.thrift.TFeatureMetadata> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listFeatures_result(listFeatures_result other) {
      if (other.isSetSuccess()) {
        List<com._42six.amino.common.thrift.TFeatureMetadata> __this__success = new ArrayList<com._42six.amino.common.thrift.TFeatureMetadata>();
        for (com._42six.amino.common.thrift.TFeatureMetadata other_element : other.success) {
          __this__success.add(new com._42six.amino.common.thrift.TFeatureMetadata(other_element));
        }
        this.success = __this__success;
      }
    }

    public listFeatures_result deepCopy() {
      return new listFeatures_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com._42six.amino.common.thrift.TFeatureMetadata> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com._42six.amino.common.thrift.TFeatureMetadata elem) {
      if (this.success == null) {
        this.success = new ArrayList<com._42six.amino.common.thrift.TFeatureMetadata>();
      }
      this.success.add(elem);
    }

    public List<com._42six.amino.common.thrift.TFeatureMetadata> getSuccess() {
      return this.success;
    }

    public listFeatures_result setSuccess(List<com._42six.amino.common.thrift.TFeatureMetadata> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com._42six.amino.common.thrift.TFeatureMetadata>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listFeatures_result)
        return this.equals((listFeatures_result)that);
      return false;
    }

    public boolean equals(listFeatures_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(listFeatures_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      listFeatures_result typedOther = (listFeatures_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list12 = iprot.readListBegin();
                this.success = new ArrayList<com._42six.amino.common.thrift.TFeatureMetadata>(_list12.size);
                for (int _i13 = 0; _i13 < _list12.size; ++_i13)
                {
                  com._42six.amino.common.thrift.TFeatureMetadata _elem14;
                  _elem14 = new com._42six.amino.common.thrift.TFeatureMetadata();
                  _elem14.read(iprot);
                  this.success.add(_elem14);
                }
                iprot.readListEnd();
              }
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, this.success.size()));
          for (com._42six.amino.common.thrift.TFeatureMetadata _iter15 : this.success)
          {
            _iter15.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listFeatures_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class listBuckets_args implements org.apache.thrift.TBase<listBuckets_args, listBuckets_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listBuckets_args");

    private static final org.apache.thrift.protocol.TField DATASOURCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("datasourceId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField VISIBILITIES_FIELD_DESC = new org.apache.thrift.protocol.TField("visibilities", org.apache.thrift.protocol.TType.SET, (short)2);

    public String datasourceId;
    public Set<String> visibilities;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATASOURCE_ID((short)1, "datasourceId"),
      VISIBILITIES((short)2, "visibilities");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATASOURCE_ID
            return DATASOURCE_ID;
          case 2: // VISIBILITIES
            return VISIBILITIES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATASOURCE_ID, new org.apache.thrift.meta_data.FieldMetaData("datasourceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.VISIBILITIES, new org.apache.thrift.meta_data.FieldMetaData("visibilities", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listBuckets_args.class, metaDataMap);
    }

    public listBuckets_args() {
    }

    public listBuckets_args(
      String datasourceId,
      Set<String> visibilities)
    {
      this();
      this.datasourceId = datasourceId;
      this.visibilities = visibilities;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listBuckets_args(listBuckets_args other) {
      if (other.isSetDatasourceId()) {
        this.datasourceId = other.datasourceId;
      }
      if (other.isSetVisibilities()) {
        Set<String> __this__visibilities = new HashSet<String>();
        for (String other_element : other.visibilities) {
          __this__visibilities.add(other_element);
        }
        this.visibilities = __this__visibilities;
      }
    }

    public listBuckets_args deepCopy() {
      return new listBuckets_args(this);
    }

    @Override
    public void clear() {
      this.datasourceId = null;
      this.visibilities = null;
    }

    public String getDatasourceId() {
      return this.datasourceId;
    }

    public listBuckets_args setDatasourceId(String datasourceId) {
      this.datasourceId = datasourceId;
      return this;
    }

    public void unsetDatasourceId() {
      this.datasourceId = null;
    }

    /** Returns true if field datasourceId is set (has been assigned a value) and false otherwise */
    public boolean isSetDatasourceId() {
      return this.datasourceId != null;
    }

    public void setDatasourceIdIsSet(boolean value) {
      if (!value) {
        this.datasourceId = null;
      }
    }

    public int getVisibilitiesSize() {
      return (this.visibilities == null) ? 0 : this.visibilities.size();
    }

    public java.util.Iterator<String> getVisibilitiesIterator() {
      return (this.visibilities == null) ? null : this.visibilities.iterator();
    }

    public void addToVisibilities(String elem) {
      if (this.visibilities == null) {
        this.visibilities = new HashSet<String>();
      }
      this.visibilities.add(elem);
    }

    public Set<String> getVisibilities() {
      return this.visibilities;
    }

    public listBuckets_args setVisibilities(Set<String> visibilities) {
      this.visibilities = visibilities;
      return this;
    }

    public void unsetVisibilities() {
      this.visibilities = null;
    }

    /** Returns true if field visibilities is set (has been assigned a value) and false otherwise */
    public boolean isSetVisibilities() {
      return this.visibilities != null;
    }

    public void setVisibilitiesIsSet(boolean value) {
      if (!value) {
        this.visibilities = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATASOURCE_ID:
        if (value == null) {
          unsetDatasourceId();
        } else {
          setDatasourceId((String)value);
        }
        break;

      case VISIBILITIES:
        if (value == null) {
          unsetVisibilities();
        } else {
          setVisibilities((Set<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATASOURCE_ID:
        return getDatasourceId();

      case VISIBILITIES:
        return getVisibilities();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATASOURCE_ID:
        return isSetDatasourceId();
      case VISIBILITIES:
        return isSetVisibilities();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listBuckets_args)
        return this.equals((listBuckets_args)that);
      return false;
    }

    public boolean equals(listBuckets_args that) {
      if (that == null)
        return false;

      boolean this_present_datasourceId = true && this.isSetDatasourceId();
      boolean that_present_datasourceId = true && that.isSetDatasourceId();
      if (this_present_datasourceId || that_present_datasourceId) {
        if (!(this_present_datasourceId && that_present_datasourceId))
          return false;
        if (!this.datasourceId.equals(that.datasourceId))
          return false;
      }

      boolean this_present_visibilities = true && this.isSetVisibilities();
      boolean that_present_visibilities = true && that.isSetVisibilities();
      if (this_present_visibilities || that_present_visibilities) {
        if (!(this_present_visibilities && that_present_visibilities))
          return false;
        if (!this.visibilities.equals(that.visibilities))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(listBuckets_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      listBuckets_args typedOther = (listBuckets_args)other;

      lastComparison = Boolean.valueOf(isSetDatasourceId()).compareTo(typedOther.isSetDatasourceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDatasourceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datasourceId, typedOther.datasourceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVisibilities()).compareTo(typedOther.isSetVisibilities());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVisibilities()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.visibilities, typedOther.visibilities);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // DATASOURCE_ID
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.datasourceId = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // VISIBILITIES
            if (field.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set16 = iprot.readSetBegin();
                this.visibilities = new HashSet<String>(2*_set16.size);
                for (int _i17 = 0; _i17 < _set16.size; ++_i17)
                {
                  String _elem18;
                  _elem18 = iprot.readString();
                  this.visibilities.add(_elem18);
                }
                iprot.readSetEnd();
              }
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.datasourceId != null) {
        oprot.writeFieldBegin(DATASOURCE_ID_FIELD_DESC);
        oprot.writeString(this.datasourceId);
        oprot.writeFieldEnd();
      }
      if (this.visibilities != null) {
        oprot.writeFieldBegin(VISIBILITIES_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, this.visibilities.size()));
          for (String _iter19 : this.visibilities)
          {
            oprot.writeString(_iter19);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listBuckets_args(");
      boolean first = true;

      sb.append("datasourceId:");
      if (this.datasourceId == null) {
        sb.append("null");
      } else {
        sb.append(this.datasourceId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("visibilities:");
      if (this.visibilities == null) {
        sb.append("null");
      } else {
        sb.append(this.visibilities);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class listBuckets_result implements org.apache.thrift.TBase<listBuckets_result, listBuckets_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listBuckets_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    public List<com._42six.amino.common.thrift.TBucketMetadata> success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com._42six.amino.common.thrift.TBucketMetadata.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listBuckets_result.class, metaDataMap);
    }

    public listBuckets_result() {
    }

    public listBuckets_result(
      List<com._42six.amino.common.thrift.TBucketMetadata> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listBuckets_result(listBuckets_result other) {
      if (other.isSetSuccess()) {
        List<com._42six.amino.common.thrift.TBucketMetadata> __this__success = new ArrayList<com._42six.amino.common.thrift.TBucketMetadata>();
        for (com._42six.amino.common.thrift.TBucketMetadata other_element : other.success) {
          __this__success.add(new com._42six.amino.common.thrift.TBucketMetadata(other_element));
        }
        this.success = __this__success;
      }
    }

    public listBuckets_result deepCopy() {
      return new listBuckets_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com._42six.amino.common.thrift.TBucketMetadata> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com._42six.amino.common.thrift.TBucketMetadata elem) {
      if (this.success == null) {
        this.success = new ArrayList<com._42six.amino.common.thrift.TBucketMetadata>();
      }
      this.success.add(elem);
    }

    public List<com._42six.amino.common.thrift.TBucketMetadata> getSuccess() {
      return this.success;
    }

    public listBuckets_result setSuccess(List<com._42six.amino.common.thrift.TBucketMetadata> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com._42six.amino.common.thrift.TBucketMetadata>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listBuckets_result)
        return this.equals((listBuckets_result)that);
      return false;
    }

    public boolean equals(listBuckets_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(listBuckets_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      listBuckets_result typedOther = (listBuckets_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list20 = iprot.readListBegin();
                this.success = new ArrayList<com._42six.amino.common.thrift.TBucketMetadata>(_list20.size);
                for (int _i21 = 0; _i21 < _list20.size; ++_i21)
                {
                  com._42six.amino.common.thrift.TBucketMetadata _elem22;
                  _elem22 = new com._42six.amino.common.thrift.TBucketMetadata();
                  _elem22.read(iprot);
                  this.success.add(_elem22);
                }
                iprot.readListEnd();
              }
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, this.success.size()));
          for (com._42six.amino.common.thrift.TBucketMetadata _iter23 : this.success)
          {
            _iter23.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listBuckets_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getDataSource_args implements org.apache.thrift.TBase<getDataSource_args, getDataSource_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDataSource_args");

    private static final org.apache.thrift.protocol.TField DATA_SOURCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("dataSourceId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField VISIBILITIES_FIELD_DESC = new org.apache.thrift.protocol.TField("visibilities", org.apache.thrift.protocol.TType.SET, (short)2);

    public String dataSourceId;
    public Set<String> visibilities;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATA_SOURCE_ID((short)1, "dataSourceId"),
      VISIBILITIES((short)2, "visibilities");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATA_SOURCE_ID
            return DATA_SOURCE_ID;
          case 2: // VISIBILITIES
            return VISIBILITIES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATA_SOURCE_ID, new org.apache.thrift.meta_data.FieldMetaData("dataSourceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.VISIBILITIES, new org.apache.thrift.meta_data.FieldMetaData("visibilities", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDataSource_args.class, metaDataMap);
    }

    public getDataSource_args() {
    }

    public getDataSource_args(
      String dataSourceId,
      Set<String> visibilities)
    {
      this();
      this.dataSourceId = dataSourceId;
      this.visibilities = visibilities;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDataSource_args(getDataSource_args other) {
      if (other.isSetDataSourceId()) {
        this.dataSourceId = other.dataSourceId;
      }
      if (other.isSetVisibilities()) {
        Set<String> __this__visibilities = new HashSet<String>();
        for (String other_element : other.visibilities) {
          __this__visibilities.add(other_element);
        }
        this.visibilities = __this__visibilities;
      }
    }

    public getDataSource_args deepCopy() {
      return new getDataSource_args(this);
    }

    @Override
    public void clear() {
      this.dataSourceId = null;
      this.visibilities = null;
    }

    public String getDataSourceId() {
      return this.dataSourceId;
    }

    public getDataSource_args setDataSourceId(String dataSourceId) {
      this.dataSourceId = dataSourceId;
      return this;
    }

    public void unsetDataSourceId() {
      this.dataSourceId = null;
    }

    /** Returns true if field dataSourceId is set (has been assigned a value) and false otherwise */
    public boolean isSetDataSourceId() {
      return this.dataSourceId != null;
    }

    public void setDataSourceIdIsSet(boolean value) {
      if (!value) {
        this.dataSourceId = null;
      }
    }

    public int getVisibilitiesSize() {
      return (this.visibilities == null) ? 0 : this.visibilities.size();
    }

    public java.util.Iterator<String> getVisibilitiesIterator() {
      return (this.visibilities == null) ? null : this.visibilities.iterator();
    }

    public void addToVisibilities(String elem) {
      if (this.visibilities == null) {
        this.visibilities = new HashSet<String>();
      }
      this.visibilities.add(elem);
    }

    public Set<String> getVisibilities() {
      return this.visibilities;
    }

    public getDataSource_args setVisibilities(Set<String> visibilities) {
      this.visibilities = visibilities;
      return this;
    }

    public void unsetVisibilities() {
      this.visibilities = null;
    }

    /** Returns true if field visibilities is set (has been assigned a value) and false otherwise */
    public boolean isSetVisibilities() {
      return this.visibilities != null;
    }

    public void setVisibilitiesIsSet(boolean value) {
      if (!value) {
        this.visibilities = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATA_SOURCE_ID:
        if (value == null) {
          unsetDataSourceId();
        } else {
          setDataSourceId((String)value);
        }
        break;

      case VISIBILITIES:
        if (value == null) {
          unsetVisibilities();
        } else {
          setVisibilities((Set<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATA_SOURCE_ID:
        return getDataSourceId();

      case VISIBILITIES:
        return getVisibilities();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATA_SOURCE_ID:
        return isSetDataSourceId();
      case VISIBILITIES:
        return isSetVisibilities();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDataSource_args)
        return this.equals((getDataSource_args)that);
      return false;
    }

    public boolean equals(getDataSource_args that) {
      if (that == null)
        return false;

      boolean this_present_dataSourceId = true && this.isSetDataSourceId();
      boolean that_present_dataSourceId = true && that.isSetDataSourceId();
      if (this_present_dataSourceId || that_present_dataSourceId) {
        if (!(this_present_dataSourceId && that_present_dataSourceId))
          return false;
        if (!this.dataSourceId.equals(that.dataSourceId))
          return false;
      }

      boolean this_present_visibilities = true && this.isSetVisibilities();
      boolean that_present_visibilities = true && that.isSetVisibilities();
      if (this_present_visibilities || that_present_visibilities) {
        if (!(this_present_visibilities && that_present_visibilities))
          return false;
        if (!this.visibilities.equals(that.visibilities))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getDataSource_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getDataSource_args typedOther = (getDataSource_args)other;

      lastComparison = Boolean.valueOf(isSetDataSourceId()).compareTo(typedOther.isSetDataSourceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDataSourceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataSourceId, typedOther.dataSourceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVisibilities()).compareTo(typedOther.isSetVisibilities());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVisibilities()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.visibilities, typedOther.visibilities);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // DATA_SOURCE_ID
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.dataSourceId = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // VISIBILITIES
            if (field.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set24 = iprot.readSetBegin();
                this.visibilities = new HashSet<String>(2*_set24.size);
                for (int _i25 = 0; _i25 < _set24.size; ++_i25)
                {
                  String _elem26;
                  _elem26 = iprot.readString();
                  this.visibilities.add(_elem26);
                }
                iprot.readSetEnd();
              }
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.dataSourceId != null) {
        oprot.writeFieldBegin(DATA_SOURCE_ID_FIELD_DESC);
        oprot.writeString(this.dataSourceId);
        oprot.writeFieldEnd();
      }
      if (this.visibilities != null) {
        oprot.writeFieldBegin(VISIBILITIES_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, this.visibilities.size()));
          for (String _iter27 : this.visibilities)
          {
            oprot.writeString(_iter27);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getDataSource_args(");
      boolean first = true;

      sb.append("dataSourceId:");
      if (this.dataSourceId == null) {
        sb.append("null");
      } else {
        sb.append(this.dataSourceId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("visibilities:");
      if (this.visibilities == null) {
        sb.append("null");
      } else {
        sb.append(this.visibilities);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getDataSource_result implements org.apache.thrift.TBase<getDataSource_result, getDataSource_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDataSource_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    public com._42six.amino.common.thrift.TDatasourceMetadata success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com._42six.amino.common.thrift.TDatasourceMetadata.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDataSource_result.class, metaDataMap);
    }

    public getDataSource_result() {
    }

    public getDataSource_result(
      com._42six.amino.common.thrift.TDatasourceMetadata success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDataSource_result(getDataSource_result other) {
      if (other.isSetSuccess()) {
        this.success = new com._42six.amino.common.thrift.TDatasourceMetadata(other.success);
      }
    }

    public getDataSource_result deepCopy() {
      return new getDataSource_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com._42six.amino.common.thrift.TDatasourceMetadata getSuccess() {
      return this.success;
    }

    public getDataSource_result setSuccess(com._42six.amino.common.thrift.TDatasourceMetadata success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com._42six.amino.common.thrift.TDatasourceMetadata)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDataSource_result)
        return this.equals((getDataSource_result)that);
      return false;
    }

    public boolean equals(getDataSource_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getDataSource_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getDataSource_result typedOther = (getDataSource_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.success = new com._42six.amino.common.thrift.TDatasourceMetadata();
              this.success.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getDataSource_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getFeature_args implements org.apache.thrift.TBase<getFeature_args, getFeature_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFeature_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField VISIBILITIES_FIELD_DESC = new org.apache.thrift.protocol.TField("visibilities", org.apache.thrift.protocol.TType.SET, (short)2);

    public String id;
    public Set<String> visibilities;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id"),
      VISIBILITIES((short)2, "visibilities");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          case 2: // VISIBILITIES
            return VISIBILITIES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.VISIBILITIES, new org.apache.thrift.meta_data.FieldMetaData("visibilities", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFeature_args.class, metaDataMap);
    }

    public getFeature_args() {
    }

    public getFeature_args(
      String id,
      Set<String> visibilities)
    {
      this();
      this.id = id;
      this.visibilities = visibilities;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFeature_args(getFeature_args other) {
      if (other.isSetId()) {
        this.id = other.id;
      }
      if (other.isSetVisibilities()) {
        Set<String> __this__visibilities = new HashSet<String>();
        for (String other_element : other.visibilities) {
          __this__visibilities.add(other_element);
        }
        this.visibilities = __this__visibilities;
      }
    }

    public getFeature_args deepCopy() {
      return new getFeature_args(this);
    }

    @Override
    public void clear() {
      this.id = null;
      this.visibilities = null;
    }

    public String getId() {
      return this.id;
    }

    public getFeature_args setId(String id) {
      this.id = id;
      return this;
    }

    public void unsetId() {
      this.id = null;
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return this.id != null;
    }

    public void setIdIsSet(boolean value) {
      if (!value) {
        this.id = null;
      }
    }

    public int getVisibilitiesSize() {
      return (this.visibilities == null) ? 0 : this.visibilities.size();
    }

    public java.util.Iterator<String> getVisibilitiesIterator() {
      return (this.visibilities == null) ? null : this.visibilities.iterator();
    }

    public void addToVisibilities(String elem) {
      if (this.visibilities == null) {
        this.visibilities = new HashSet<String>();
      }
      this.visibilities.add(elem);
    }

    public Set<String> getVisibilities() {
      return this.visibilities;
    }

    public getFeature_args setVisibilities(Set<String> visibilities) {
      this.visibilities = visibilities;
      return this;
    }

    public void unsetVisibilities() {
      this.visibilities = null;
    }

    /** Returns true if field visibilities is set (has been assigned a value) and false otherwise */
    public boolean isSetVisibilities() {
      return this.visibilities != null;
    }

    public void setVisibilitiesIsSet(boolean value) {
      if (!value) {
        this.visibilities = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((String)value);
        }
        break;

      case VISIBILITIES:
        if (value == null) {
          unsetVisibilities();
        } else {
          setVisibilities((Set<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return getId();

      case VISIBILITIES:
        return getVisibilities();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      case VISIBILITIES:
        return isSetVisibilities();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFeature_args)
        return this.equals((getFeature_args)that);
      return false;
    }

    public boolean equals(getFeature_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true && this.isSetId();
      boolean that_present_id = true && that.isSetId();
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (!this.id.equals(that.id))
          return false;
      }

      boolean this_present_visibilities = true && this.isSetVisibilities();
      boolean that_present_visibilities = true && that.isSetVisibilities();
      if (this_present_visibilities || that_present_visibilities) {
        if (!(this_present_visibilities && that_present_visibilities))
          return false;
        if (!this.visibilities.equals(that.visibilities))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getFeature_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getFeature_args typedOther = (getFeature_args)other;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVisibilities()).compareTo(typedOther.isSetVisibilities());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVisibilities()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.visibilities, typedOther.visibilities);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // ID
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.id = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // VISIBILITIES
            if (field.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set28 = iprot.readSetBegin();
                this.visibilities = new HashSet<String>(2*_set28.size);
                for (int _i29 = 0; _i29 < _set28.size; ++_i29)
                {
                  String _elem30;
                  _elem30 = iprot.readString();
                  this.visibilities.add(_elem30);
                }
                iprot.readSetEnd();
              }
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(this.id);
        oprot.writeFieldEnd();
      }
      if (this.visibilities != null) {
        oprot.writeFieldBegin(VISIBILITIES_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, this.visibilities.size()));
          for (String _iter31 : this.visibilities)
          {
            oprot.writeString(_iter31);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFeature_args(");
      boolean first = true;

      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("visibilities:");
      if (this.visibilities == null) {
        sb.append("null");
      } else {
        sb.append(this.visibilities);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getFeature_result implements org.apache.thrift.TBase<getFeature_result, getFeature_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFeature_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    public com._42six.amino.common.thrift.TFeatureMetadata success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com._42six.amino.common.thrift.TFeatureMetadata.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFeature_result.class, metaDataMap);
    }

    public getFeature_result() {
    }

    public getFeature_result(
      com._42six.amino.common.thrift.TFeatureMetadata success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFeature_result(getFeature_result other) {
      if (other.isSetSuccess()) {
        this.success = new com._42six.amino.common.thrift.TFeatureMetadata(other.success);
      }
    }

    public getFeature_result deepCopy() {
      return new getFeature_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com._42six.amino.common.thrift.TFeatureMetadata getSuccess() {
      return this.success;
    }

    public getFeature_result setSuccess(com._42six.amino.common.thrift.TFeatureMetadata success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com._42six.amino.common.thrift.TFeatureMetadata)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFeature_result)
        return this.equals((getFeature_result)that);
      return false;
    }

    public boolean equals(getFeature_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getFeature_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getFeature_result typedOther = (getFeature_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.success = new com._42six.amino.common.thrift.TFeatureMetadata();
              this.success.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFeature_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getBucket_args implements org.apache.thrift.TBase<getBucket_args, getBucket_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBucket_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField VISIBILITIES_FIELD_DESC = new org.apache.thrift.protocol.TField("visibilities", org.apache.thrift.protocol.TType.SET, (short)2);

    public String id;
    public Set<String> visibilities;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id"),
      VISIBILITIES((short)2, "visibilities");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          case 2: // VISIBILITIES
            return VISIBILITIES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.VISIBILITIES, new org.apache.thrift.meta_data.FieldMetaData("visibilities", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBucket_args.class, metaDataMap);
    }

    public getBucket_args() {
    }

    public getBucket_args(
      String id,
      Set<String> visibilities)
    {
      this();
      this.id = id;
      this.visibilities = visibilities;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBucket_args(getBucket_args other) {
      if (other.isSetId()) {
        this.id = other.id;
      }
      if (other.isSetVisibilities()) {
        Set<String> __this__visibilities = new HashSet<String>();
        for (String other_element : other.visibilities) {
          __this__visibilities.add(other_element);
        }
        this.visibilities = __this__visibilities;
      }
    }

    public getBucket_args deepCopy() {
      return new getBucket_args(this);
    }

    @Override
    public void clear() {
      this.id = null;
      this.visibilities = null;
    }

    public String getId() {
      return this.id;
    }

    public getBucket_args setId(String id) {
      this.id = id;
      return this;
    }

    public void unsetId() {
      this.id = null;
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return this.id != null;
    }

    public void setIdIsSet(boolean value) {
      if (!value) {
        this.id = null;
      }
    }

    public int getVisibilitiesSize() {
      return (this.visibilities == null) ? 0 : this.visibilities.size();
    }

    public java.util.Iterator<String> getVisibilitiesIterator() {
      return (this.visibilities == null) ? null : this.visibilities.iterator();
    }

    public void addToVisibilities(String elem) {
      if (this.visibilities == null) {
        this.visibilities = new HashSet<String>();
      }
      this.visibilities.add(elem);
    }

    public Set<String> getVisibilities() {
      return this.visibilities;
    }

    public getBucket_args setVisibilities(Set<String> visibilities) {
      this.visibilities = visibilities;
      return this;
    }

    public void unsetVisibilities() {
      this.visibilities = null;
    }

    /** Returns true if field visibilities is set (has been assigned a value) and false otherwise */
    public boolean isSetVisibilities() {
      return this.visibilities != null;
    }

    public void setVisibilitiesIsSet(boolean value) {
      if (!value) {
        this.visibilities = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((String)value);
        }
        break;

      case VISIBILITIES:
        if (value == null) {
          unsetVisibilities();
        } else {
          setVisibilities((Set<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return getId();

      case VISIBILITIES:
        return getVisibilities();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      case VISIBILITIES:
        return isSetVisibilities();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBucket_args)
        return this.equals((getBucket_args)that);
      return false;
    }

    public boolean equals(getBucket_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true && this.isSetId();
      boolean that_present_id = true && that.isSetId();
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (!this.id.equals(that.id))
          return false;
      }

      boolean this_present_visibilities = true && this.isSetVisibilities();
      boolean that_present_visibilities = true && that.isSetVisibilities();
      if (this_present_visibilities || that_present_visibilities) {
        if (!(this_present_visibilities && that_present_visibilities))
          return false;
        if (!this.visibilities.equals(that.visibilities))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getBucket_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getBucket_args typedOther = (getBucket_args)other;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVisibilities()).compareTo(typedOther.isSetVisibilities());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVisibilities()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.visibilities, typedOther.visibilities);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // ID
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.id = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // VISIBILITIES
            if (field.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set32 = iprot.readSetBegin();
                this.visibilities = new HashSet<String>(2*_set32.size);
                for (int _i33 = 0; _i33 < _set32.size; ++_i33)
                {
                  String _elem34;
                  _elem34 = iprot.readString();
                  this.visibilities.add(_elem34);
                }
                iprot.readSetEnd();
              }
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(this.id);
        oprot.writeFieldEnd();
      }
      if (this.visibilities != null) {
        oprot.writeFieldBegin(VISIBILITIES_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, this.visibilities.size()));
          for (String _iter35 : this.visibilities)
          {
            oprot.writeString(_iter35);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBucket_args(");
      boolean first = true;

      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("visibilities:");
      if (this.visibilities == null) {
        sb.append("null");
      } else {
        sb.append(this.visibilities);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getBucket_result implements org.apache.thrift.TBase<getBucket_result, getBucket_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBucket_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    public com._42six.amino.common.thrift.TBucketMetadata success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com._42six.amino.common.thrift.TBucketMetadata.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBucket_result.class, metaDataMap);
    }

    public getBucket_result() {
    }

    public getBucket_result(
      com._42six.amino.common.thrift.TBucketMetadata success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBucket_result(getBucket_result other) {
      if (other.isSetSuccess()) {
        this.success = new com._42six.amino.common.thrift.TBucketMetadata(other.success);
      }
    }

    public getBucket_result deepCopy() {
      return new getBucket_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com._42six.amino.common.thrift.TBucketMetadata getSuccess() {
      return this.success;
    }

    public getBucket_result setSuccess(com._42six.amino.common.thrift.TBucketMetadata success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com._42six.amino.common.thrift.TBucketMetadata)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBucket_result)
        return this.equals((getBucket_result)that);
      return false;
    }

    public boolean equals(getBucket_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getBucket_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getBucket_result typedOther = (getBucket_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.success = new com._42six.amino.common.thrift.TBucketMetadata();
              this.success.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBucket_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getHypothesis_args implements org.apache.thrift.TBase<getHypothesis_args, getHypothesis_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getHypothesis_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField OWNER_FIELD_DESC = new org.apache.thrift.protocol.TField("owner", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField HYPOTHESIS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hypothesisId", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField VISIBILITIES_FIELD_DESC = new org.apache.thrift.protocol.TField("visibilities", org.apache.thrift.protocol.TType.SET, (short)4);

    public String userId;
    public String owner;
    public String hypothesisId;
    public Set<String> visibilities;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId"),
      OWNER((short)2, "owner"),
      HYPOTHESIS_ID((short)3, "hypothesisId"),
      VISIBILITIES((short)4, "visibilities");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          case 2: // OWNER
            return OWNER;
          case 3: // HYPOTHESIS_ID
            return HYPOTHESIS_ID;
          case 4: // VISIBILITIES
            return VISIBILITIES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OWNER, new org.apache.thrift.meta_data.FieldMetaData("owner", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.HYPOTHESIS_ID, new org.apache.thrift.meta_data.FieldMetaData("hypothesisId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.VISIBILITIES, new org.apache.thrift.meta_data.FieldMetaData("visibilities", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getHypothesis_args.class, metaDataMap);
    }

    public getHypothesis_args() {
    }

    public getHypothesis_args(
      String userId,
      String owner,
      String hypothesisId,
      Set<String> visibilities)
    {
      this();
      this.userId = userId;
      this.owner = owner;
      this.hypothesisId = hypothesisId;
      this.visibilities = visibilities;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getHypothesis_args(getHypothesis_args other) {
      if (other.isSetUserId()) {
        this.userId = other.userId;
      }
      if (other.isSetOwner()) {
        this.owner = other.owner;
      }
      if (other.isSetHypothesisId()) {
        this.hypothesisId = other.hypothesisId;
      }
      if (other.isSetVisibilities()) {
        Set<String> __this__visibilities = new HashSet<String>();
        for (String other_element : other.visibilities) {
          __this__visibilities.add(other_element);
        }
        this.visibilities = __this__visibilities;
      }
    }

    public getHypothesis_args deepCopy() {
      return new getHypothesis_args(this);
    }

    @Override
    public void clear() {
      this.userId = null;
      this.owner = null;
      this.hypothesisId = null;
      this.visibilities = null;
    }

    public String getUserId() {
      return this.userId;
    }

    public getHypothesis_args setUserId(String userId) {
      this.userId = userId;
      return this;
    }

    public void unsetUserId() {
      this.userId = null;
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return this.userId != null;
    }

    public void setUserIdIsSet(boolean value) {
      if (!value) {
        this.userId = null;
      }
    }

    public String getOwner() {
      return this.owner;
    }

    public getHypothesis_args setOwner(String owner) {
      this.owner = owner;
      return this;
    }

    public void unsetOwner() {
      this.owner = null;
    }

    /** Returns true if field owner is set (has been assigned a value) and false otherwise */
    public boolean isSetOwner() {
      return this.owner != null;
    }

    public void setOwnerIsSet(boolean value) {
      if (!value) {
        this.owner = null;
      }
    }

    public String getHypothesisId() {
      return this.hypothesisId;
    }

    public getHypothesis_args setHypothesisId(String hypothesisId) {
      this.hypothesisId = hypothesisId;
      return this;
    }

    public void unsetHypothesisId() {
      this.hypothesisId = null;
    }

    /** Returns true if field hypothesisId is set (has been assigned a value) and false otherwise */
    public boolean isSetHypothesisId() {
      return this.hypothesisId != null;
    }

    public void setHypothesisIdIsSet(boolean value) {
      if (!value) {
        this.hypothesisId = null;
      }
    }

    public int getVisibilitiesSize() {
      return (this.visibilities == null) ? 0 : this.visibilities.size();
    }

    public java.util.Iterator<String> getVisibilitiesIterator() {
      return (this.visibilities == null) ? null : this.visibilities.iterator();
    }

    public void addToVisibilities(String elem) {
      if (this.visibilities == null) {
        this.visibilities = new HashSet<String>();
      }
      this.visibilities.add(elem);
    }

    public Set<String> getVisibilities() {
      return this.visibilities;
    }

    public getHypothesis_args setVisibilities(Set<String> visibilities) {
      this.visibilities = visibilities;
      return this;
    }

    public void unsetVisibilities() {
      this.visibilities = null;
    }

    /** Returns true if field visibilities is set (has been assigned a value) and false otherwise */
    public boolean isSetVisibilities() {
      return this.visibilities != null;
    }

    public void setVisibilitiesIsSet(boolean value) {
      if (!value) {
        this.visibilities = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((String)value);
        }
        break;

      case OWNER:
        if (value == null) {
          unsetOwner();
        } else {
          setOwner((String)value);
        }
        break;

      case HYPOTHESIS_ID:
        if (value == null) {
          unsetHypothesisId();
        } else {
          setHypothesisId((String)value);
        }
        break;

      case VISIBILITIES:
        if (value == null) {
          unsetVisibilities();
        } else {
          setVisibilities((Set<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return getUserId();

      case OWNER:
        return getOwner();

      case HYPOTHESIS_ID:
        return getHypothesisId();

      case VISIBILITIES:
        return getVisibilities();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUserId();
      case OWNER:
        return isSetOwner();
      case HYPOTHESIS_ID:
        return isSetHypothesisId();
      case VISIBILITIES:
        return isSetVisibilities();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getHypothesis_args)
        return this.equals((getHypothesis_args)that);
      return false;
    }

    public boolean equals(getHypothesis_args that) {
      if (that == null)
        return false;

      boolean this_present_userId = true && this.isSetUserId();
      boolean that_present_userId = true && that.isSetUserId();
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (!this.userId.equals(that.userId))
          return false;
      }

      boolean this_present_owner = true && this.isSetOwner();
      boolean that_present_owner = true && that.isSetOwner();
      if (this_present_owner || that_present_owner) {
        if (!(this_present_owner && that_present_owner))
          return false;
        if (!this.owner.equals(that.owner))
          return false;
      }

      boolean this_present_hypothesisId = true && this.isSetHypothesisId();
      boolean that_present_hypothesisId = true && that.isSetHypothesisId();
      if (this_present_hypothesisId || that_present_hypothesisId) {
        if (!(this_present_hypothesisId && that_present_hypothesisId))
          return false;
        if (!this.hypothesisId.equals(that.hypothesisId))
          return false;
      }

      boolean this_present_visibilities = true && this.isSetVisibilities();
      boolean that_present_visibilities = true && that.isSetVisibilities();
      if (this_present_visibilities || that_present_visibilities) {
        if (!(this_present_visibilities && that_present_visibilities))
          return false;
        if (!this.visibilities.equals(that.visibilities))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getHypothesis_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getHypothesis_args typedOther = (getHypothesis_args)other;

      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(typedOther.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, typedOther.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOwner()).compareTo(typedOther.isSetOwner());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOwner()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.owner, typedOther.owner);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHypothesisId()).compareTo(typedOther.isSetHypothesisId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHypothesisId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hypothesisId, typedOther.hypothesisId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVisibilities()).compareTo(typedOther.isSetVisibilities());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVisibilities()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.visibilities, typedOther.visibilities);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // USER_ID
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.userId = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // OWNER
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.owner = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // HYPOTHESIS_ID
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.hypothesisId = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // VISIBILITIES
            if (field.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set36 = iprot.readSetBegin();
                this.visibilities = new HashSet<String>(2*_set36.size);
                for (int _i37 = 0; _i37 < _set36.size; ++_i37)
                {
                  String _elem38;
                  _elem38 = iprot.readString();
                  this.visibilities.add(_elem38);
                }
                iprot.readSetEnd();
              }
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.userId != null) {
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeString(this.userId);
        oprot.writeFieldEnd();
      }
      if (this.owner != null) {
        oprot.writeFieldBegin(OWNER_FIELD_DESC);
        oprot.writeString(this.owner);
        oprot.writeFieldEnd();
      }
      if (this.hypothesisId != null) {
        oprot.writeFieldBegin(HYPOTHESIS_ID_FIELD_DESC);
        oprot.writeString(this.hypothesisId);
        oprot.writeFieldEnd();
      }
      if (this.visibilities != null) {
        oprot.writeFieldBegin(VISIBILITIES_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, this.visibilities.size()));
          for (String _iter39 : this.visibilities)
          {
            oprot.writeString(_iter39);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getHypothesis_args(");
      boolean first = true;

      sb.append("userId:");
      if (this.userId == null) {
        sb.append("null");
      } else {
        sb.append(this.userId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("owner:");
      if (this.owner == null) {
        sb.append("null");
      } else {
        sb.append(this.owner);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hypothesisId:");
      if (this.hypothesisId == null) {
        sb.append("null");
      } else {
        sb.append(this.hypothesisId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("visibilities:");
      if (this.visibilities == null) {
        sb.append("null");
      } else {
        sb.append(this.visibilities);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getHypothesis_result implements org.apache.thrift.TBase<getHypothesis_result, getHypothesis_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getHypothesis_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    public com._42six.amino.common.thrift.THypothesis success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com._42six.amino.common.thrift.THypothesis.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getHypothesis_result.class, metaDataMap);
    }

    public getHypothesis_result() {
    }

    public getHypothesis_result(
      com._42six.amino.common.thrift.THypothesis success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getHypothesis_result(getHypothesis_result other) {
      if (other.isSetSuccess()) {
        this.success = new com._42six.amino.common.thrift.THypothesis(other.success);
      }
    }

    public getHypothesis_result deepCopy() {
      return new getHypothesis_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com._42six.amino.common.thrift.THypothesis getSuccess() {
      return this.success;
    }

    public getHypothesis_result setSuccess(com._42six.amino.common.thrift.THypothesis success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com._42six.amino.common.thrift.THypothesis)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getHypothesis_result)
        return this.equals((getHypothesis_result)that);
      return false;
    }

    public boolean equals(getHypothesis_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getHypothesis_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getHypothesis_result typedOther = (getHypothesis_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.success = new com._42six.amino.common.thrift.THypothesis();
              this.success.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getHypothesis_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class listHypotheses_args implements org.apache.thrift.TBase<listHypotheses_args, listHypotheses_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listHypotheses_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField VISIBILITIES_FIELD_DESC = new org.apache.thrift.protocol.TField("visibilities", org.apache.thrift.protocol.TType.SET, (short)2);

    public String userId;
    public Set<String> visibilities;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId"),
      VISIBILITIES((short)2, "visibilities");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          case 2: // VISIBILITIES
            return VISIBILITIES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.VISIBILITIES, new org.apache.thrift.meta_data.FieldMetaData("visibilities", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listHypotheses_args.class, metaDataMap);
    }

    public listHypotheses_args() {
    }

    public listHypotheses_args(
      String userId,
      Set<String> visibilities)
    {
      this();
      this.userId = userId;
      this.visibilities = visibilities;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listHypotheses_args(listHypotheses_args other) {
      if (other.isSetUserId()) {
        this.userId = other.userId;
      }
      if (other.isSetVisibilities()) {
        Set<String> __this__visibilities = new HashSet<String>();
        for (String other_element : other.visibilities) {
          __this__visibilities.add(other_element);
        }
        this.visibilities = __this__visibilities;
      }
    }

    public listHypotheses_args deepCopy() {
      return new listHypotheses_args(this);
    }

    @Override
    public void clear() {
      this.userId = null;
      this.visibilities = null;
    }

    public String getUserId() {
      return this.userId;
    }

    public listHypotheses_args setUserId(String userId) {
      this.userId = userId;
      return this;
    }

    public void unsetUserId() {
      this.userId = null;
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return this.userId != null;
    }

    public void setUserIdIsSet(boolean value) {
      if (!value) {
        this.userId = null;
      }
    }

    public int getVisibilitiesSize() {
      return (this.visibilities == null) ? 0 : this.visibilities.size();
    }

    public java.util.Iterator<String> getVisibilitiesIterator() {
      return (this.visibilities == null) ? null : this.visibilities.iterator();
    }

    public void addToVisibilities(String elem) {
      if (this.visibilities == null) {
        this.visibilities = new HashSet<String>();
      }
      this.visibilities.add(elem);
    }

    public Set<String> getVisibilities() {
      return this.visibilities;
    }

    public listHypotheses_args setVisibilities(Set<String> visibilities) {
      this.visibilities = visibilities;
      return this;
    }

    public void unsetVisibilities() {
      this.visibilities = null;
    }

    /** Returns true if field visibilities is set (has been assigned a value) and false otherwise */
    public boolean isSetVisibilities() {
      return this.visibilities != null;
    }

    public void setVisibilitiesIsSet(boolean value) {
      if (!value) {
        this.visibilities = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((String)value);
        }
        break;

      case VISIBILITIES:
        if (value == null) {
          unsetVisibilities();
        } else {
          setVisibilities((Set<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return getUserId();

      case VISIBILITIES:
        return getVisibilities();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUserId();
      case VISIBILITIES:
        return isSetVisibilities();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listHypotheses_args)
        return this.equals((listHypotheses_args)that);
      return false;
    }

    public boolean equals(listHypotheses_args that) {
      if (that == null)
        return false;

      boolean this_present_userId = true && this.isSetUserId();
      boolean that_present_userId = true && that.isSetUserId();
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (!this.userId.equals(that.userId))
          return false;
      }

      boolean this_present_visibilities = true && this.isSetVisibilities();
      boolean that_present_visibilities = true && that.isSetVisibilities();
      if (this_present_visibilities || that_present_visibilities) {
        if (!(this_present_visibilities && that_present_visibilities))
          return false;
        if (!this.visibilities.equals(that.visibilities))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(listHypotheses_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      listHypotheses_args typedOther = (listHypotheses_args)other;

      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(typedOther.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, typedOther.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVisibilities()).compareTo(typedOther.isSetVisibilities());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVisibilities()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.visibilities, typedOther.visibilities);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // USER_ID
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.userId = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // VISIBILITIES
            if (field.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set40 = iprot.readSetBegin();
                this.visibilities = new HashSet<String>(2*_set40.size);
                for (int _i41 = 0; _i41 < _set40.size; ++_i41)
                {
                  String _elem42;
                  _elem42 = iprot.readString();
                  this.visibilities.add(_elem42);
                }
                iprot.readSetEnd();
              }
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.userId != null) {
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeString(this.userId);
        oprot.writeFieldEnd();
      }
      if (this.visibilities != null) {
        oprot.writeFieldBegin(VISIBILITIES_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, this.visibilities.size()));
          for (String _iter43 : this.visibilities)
          {
            oprot.writeString(_iter43);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listHypotheses_args(");
      boolean first = true;

      sb.append("userId:");
      if (this.userId == null) {
        sb.append("null");
      } else {
        sb.append(this.userId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("visibilities:");
      if (this.visibilities == null) {
        sb.append("null");
      } else {
        sb.append(this.visibilities);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class listHypotheses_result implements org.apache.thrift.TBase<listHypotheses_result, listHypotheses_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listHypotheses_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    public List<com._42six.amino.common.thrift.THypothesis> success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com._42six.amino.common.thrift.THypothesis.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listHypotheses_result.class, metaDataMap);
    }

    public listHypotheses_result() {
    }

    public listHypotheses_result(
      List<com._42six.amino.common.thrift.THypothesis> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listHypotheses_result(listHypotheses_result other) {
      if (other.isSetSuccess()) {
        List<com._42six.amino.common.thrift.THypothesis> __this__success = new ArrayList<com._42six.amino.common.thrift.THypothesis>();
        for (com._42six.amino.common.thrift.THypothesis other_element : other.success) {
          __this__success.add(new com._42six.amino.common.thrift.THypothesis(other_element));
        }
        this.success = __this__success;
      }
    }

    public listHypotheses_result deepCopy() {
      return new listHypotheses_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com._42six.amino.common.thrift.THypothesis> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com._42six.amino.common.thrift.THypothesis elem) {
      if (this.success == null) {
        this.success = new ArrayList<com._42six.amino.common.thrift.THypothesis>();
      }
      this.success.add(elem);
    }

    public List<com._42six.amino.common.thrift.THypothesis> getSuccess() {
      return this.success;
    }

    public listHypotheses_result setSuccess(List<com._42six.amino.common.thrift.THypothesis> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com._42six.amino.common.thrift.THypothesis>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listHypotheses_result)
        return this.equals((listHypotheses_result)that);
      return false;
    }

    public boolean equals(listHypotheses_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(listHypotheses_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      listHypotheses_result typedOther = (listHypotheses_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list44 = iprot.readListBegin();
                this.success = new ArrayList<com._42six.amino.common.thrift.THypothesis>(_list44.size);
                for (int _i45 = 0; _i45 < _list44.size; ++_i45)
                {
                  com._42six.amino.common.thrift.THypothesis _elem46;
                  _elem46 = new com._42six.amino.common.thrift.THypothesis();
                  _elem46.read(iprot);
                  this.success.add(_elem46);
                }
                iprot.readListEnd();
              }
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, this.success.size()));
          for (com._42six.amino.common.thrift.THypothesis _iter47 : this.success)
          {
            _iter47.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listHypotheses_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class createHypothesis_args implements org.apache.thrift.TBase<createHypothesis_args, createHypothesis_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createHypothesis_args");

    private static final org.apache.thrift.protocol.TField HYPOTHESIS_FIELD_DESC = new org.apache.thrift.protocol.TField("hypothesis", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField VISIBILITIES_FIELD_DESC = new org.apache.thrift.protocol.TField("visibilities", org.apache.thrift.protocol.TType.SET, (short)3);

    public com._42six.amino.common.thrift.THypothesis hypothesis;
    public String userId;
    public Set<String> visibilities;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HYPOTHESIS((short)1, "hypothesis"),
      USER_ID((short)2, "userId"),
      VISIBILITIES((short)3, "visibilities");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HYPOTHESIS
            return HYPOTHESIS;
          case 2: // USER_ID
            return USER_ID;
          case 3: // VISIBILITIES
            return VISIBILITIES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HYPOTHESIS, new org.apache.thrift.meta_data.FieldMetaData("hypothesis", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com._42six.amino.common.thrift.THypothesis.class)));
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.VISIBILITIES, new org.apache.thrift.meta_data.FieldMetaData("visibilities", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createHypothesis_args.class, metaDataMap);
    }

    public createHypothesis_args() {
    }

    public createHypothesis_args(
      com._42six.amino.common.thrift.THypothesis hypothesis,
      String userId,
      Set<String> visibilities)
    {
      this();
      this.hypothesis = hypothesis;
      this.userId = userId;
      this.visibilities = visibilities;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createHypothesis_args(createHypothesis_args other) {
      if (other.isSetHypothesis()) {
        this.hypothesis = new com._42six.amino.common.thrift.THypothesis(other.hypothesis);
      }
      if (other.isSetUserId()) {
        this.userId = other.userId;
      }
      if (other.isSetVisibilities()) {
        Set<String> __this__visibilities = new HashSet<String>();
        for (String other_element : other.visibilities) {
          __this__visibilities.add(other_element);
        }
        this.visibilities = __this__visibilities;
      }
    }

    public createHypothesis_args deepCopy() {
      return new createHypothesis_args(this);
    }

    @Override
    public void clear() {
      this.hypothesis = null;
      this.userId = null;
      this.visibilities = null;
    }

    public com._42six.amino.common.thrift.THypothesis getHypothesis() {
      return this.hypothesis;
    }

    public createHypothesis_args setHypothesis(com._42six.amino.common.thrift.THypothesis hypothesis) {
      this.hypothesis = hypothesis;
      return this;
    }

    public void unsetHypothesis() {
      this.hypothesis = null;
    }

    /** Returns true if field hypothesis is set (has been assigned a value) and false otherwise */
    public boolean isSetHypothesis() {
      return this.hypothesis != null;
    }

    public void setHypothesisIsSet(boolean value) {
      if (!value) {
        this.hypothesis = null;
      }
    }

    public String getUserId() {
      return this.userId;
    }

    public createHypothesis_args setUserId(String userId) {
      this.userId = userId;
      return this;
    }

    public void unsetUserId() {
      this.userId = null;
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return this.userId != null;
    }

    public void setUserIdIsSet(boolean value) {
      if (!value) {
        this.userId = null;
      }
    }

    public int getVisibilitiesSize() {
      return (this.visibilities == null) ? 0 : this.visibilities.size();
    }

    public java.util.Iterator<String> getVisibilitiesIterator() {
      return (this.visibilities == null) ? null : this.visibilities.iterator();
    }

    public void addToVisibilities(String elem) {
      if (this.visibilities == null) {
        this.visibilities = new HashSet<String>();
      }
      this.visibilities.add(elem);
    }

    public Set<String> getVisibilities() {
      return this.visibilities;
    }

    public createHypothesis_args setVisibilities(Set<String> visibilities) {
      this.visibilities = visibilities;
      return this;
    }

    public void unsetVisibilities() {
      this.visibilities = null;
    }

    /** Returns true if field visibilities is set (has been assigned a value) and false otherwise */
    public boolean isSetVisibilities() {
      return this.visibilities != null;
    }

    public void setVisibilitiesIsSet(boolean value) {
      if (!value) {
        this.visibilities = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case HYPOTHESIS:
        if (value == null) {
          unsetHypothesis();
        } else {
          setHypothesis((com._42six.amino.common.thrift.THypothesis)value);
        }
        break;

      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((String)value);
        }
        break;

      case VISIBILITIES:
        if (value == null) {
          unsetVisibilities();
        } else {
          setVisibilities((Set<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case HYPOTHESIS:
        return getHypothesis();

      case USER_ID:
        return getUserId();

      case VISIBILITIES:
        return getVisibilities();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case HYPOTHESIS:
        return isSetHypothesis();
      case USER_ID:
        return isSetUserId();
      case VISIBILITIES:
        return isSetVisibilities();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createHypothesis_args)
        return this.equals((createHypothesis_args)that);
      return false;
    }

    public boolean equals(createHypothesis_args that) {
      if (that == null)
        return false;

      boolean this_present_hypothesis = true && this.isSetHypothesis();
      boolean that_present_hypothesis = true && that.isSetHypothesis();
      if (this_present_hypothesis || that_present_hypothesis) {
        if (!(this_present_hypothesis && that_present_hypothesis))
          return false;
        if (!this.hypothesis.equals(that.hypothesis))
          return false;
      }

      boolean this_present_userId = true && this.isSetUserId();
      boolean that_present_userId = true && that.isSetUserId();
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (!this.userId.equals(that.userId))
          return false;
      }

      boolean this_present_visibilities = true && this.isSetVisibilities();
      boolean that_present_visibilities = true && that.isSetVisibilities();
      if (this_present_visibilities || that_present_visibilities) {
        if (!(this_present_visibilities && that_present_visibilities))
          return false;
        if (!this.visibilities.equals(that.visibilities))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(createHypothesis_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      createHypothesis_args typedOther = (createHypothesis_args)other;

      lastComparison = Boolean.valueOf(isSetHypothesis()).compareTo(typedOther.isSetHypothesis());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHypothesis()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hypothesis, typedOther.hypothesis);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(typedOther.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, typedOther.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVisibilities()).compareTo(typedOther.isSetVisibilities());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVisibilities()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.visibilities, typedOther.visibilities);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // HYPOTHESIS
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.hypothesis = new com._42six.amino.common.thrift.THypothesis();
              this.hypothesis.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // USER_ID
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.userId = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // VISIBILITIES
            if (field.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set48 = iprot.readSetBegin();
                this.visibilities = new HashSet<String>(2*_set48.size);
                for (int _i49 = 0; _i49 < _set48.size; ++_i49)
                {
                  String _elem50;
                  _elem50 = iprot.readString();
                  this.visibilities.add(_elem50);
                }
                iprot.readSetEnd();
              }
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.hypothesis != null) {
        oprot.writeFieldBegin(HYPOTHESIS_FIELD_DESC);
        this.hypothesis.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.userId != null) {
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeString(this.userId);
        oprot.writeFieldEnd();
      }
      if (this.visibilities != null) {
        oprot.writeFieldBegin(VISIBILITIES_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, this.visibilities.size()));
          for (String _iter51 : this.visibilities)
          {
            oprot.writeString(_iter51);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createHypothesis_args(");
      boolean first = true;

      sb.append("hypothesis:");
      if (this.hypothesis == null) {
        sb.append("null");
      } else {
        sb.append(this.hypothesis);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userId:");
      if (this.userId == null) {
        sb.append("null");
      } else {
        sb.append(this.userId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("visibilities:");
      if (this.visibilities == null) {
        sb.append("null");
      } else {
        sb.append(this.visibilities);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class createHypothesis_result implements org.apache.thrift.TBase<createHypothesis_result, createHypothesis_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createHypothesis_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    public com._42six.amino.common.thrift.THypothesis success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com._42six.amino.common.thrift.THypothesis.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createHypothesis_result.class, metaDataMap);
    }

    public createHypothesis_result() {
    }

    public createHypothesis_result(
      com._42six.amino.common.thrift.THypothesis success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createHypothesis_result(createHypothesis_result other) {
      if (other.isSetSuccess()) {
        this.success = new com._42six.amino.common.thrift.THypothesis(other.success);
      }
    }

    public createHypothesis_result deepCopy() {
      return new createHypothesis_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com._42six.amino.common.thrift.THypothesis getSuccess() {
      return this.success;
    }

    public createHypothesis_result setSuccess(com._42six.amino.common.thrift.THypothesis success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com._42six.amino.common.thrift.THypothesis)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createHypothesis_result)
        return this.equals((createHypothesis_result)that);
      return false;
    }

    public boolean equals(createHypothesis_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(createHypothesis_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      createHypothesis_result typedOther = (createHypothesis_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.success = new com._42six.amino.common.thrift.THypothesis();
              this.success.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createHypothesis_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class updateHypothesis_args implements org.apache.thrift.TBase<updateHypothesis_args, updateHypothesis_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateHypothesis_args");

    private static final org.apache.thrift.protocol.TField HYPOTHESIS_FIELD_DESC = new org.apache.thrift.protocol.TField("hypothesis", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField REQUESTER_FIELD_DESC = new org.apache.thrift.protocol.TField("requester", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField VISIBILITIES_FIELD_DESC = new org.apache.thrift.protocol.TField("visibilities", org.apache.thrift.protocol.TType.SET, (short)3);

    public com._42six.amino.common.thrift.THypothesis hypothesis;
    public String requester;
    public Set<String> visibilities;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HYPOTHESIS((short)1, "hypothesis"),
      REQUESTER((short)2, "requester"),
      VISIBILITIES((short)3, "visibilities");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HYPOTHESIS
            return HYPOTHESIS;
          case 2: // REQUESTER
            return REQUESTER;
          case 3: // VISIBILITIES
            return VISIBILITIES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HYPOTHESIS, new org.apache.thrift.meta_data.FieldMetaData("hypothesis", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com._42six.amino.common.thrift.THypothesis.class)));
      tmpMap.put(_Fields.REQUESTER, new org.apache.thrift.meta_data.FieldMetaData("requester", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.VISIBILITIES, new org.apache.thrift.meta_data.FieldMetaData("visibilities", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateHypothesis_args.class, metaDataMap);
    }

    public updateHypothesis_args() {
    }

    public updateHypothesis_args(
      com._42six.amino.common.thrift.THypothesis hypothesis,
      String requester,
      Set<String> visibilities)
    {
      this();
      this.hypothesis = hypothesis;
      this.requester = requester;
      this.visibilities = visibilities;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateHypothesis_args(updateHypothesis_args other) {
      if (other.isSetHypothesis()) {
        this.hypothesis = new com._42six.amino.common.thrift.THypothesis(other.hypothesis);
      }
      if (other.isSetRequester()) {
        this.requester = other.requester;
      }
      if (other.isSetVisibilities()) {
        Set<String> __this__visibilities = new HashSet<String>();
        for (String other_element : other.visibilities) {
          __this__visibilities.add(other_element);
        }
        this.visibilities = __this__visibilities;
      }
    }

    public updateHypothesis_args deepCopy() {
      return new updateHypothesis_args(this);
    }

    @Override
    public void clear() {
      this.hypothesis = null;
      this.requester = null;
      this.visibilities = null;
    }

    public com._42six.amino.common.thrift.THypothesis getHypothesis() {
      return this.hypothesis;
    }

    public updateHypothesis_args setHypothesis(com._42six.amino.common.thrift.THypothesis hypothesis) {
      this.hypothesis = hypothesis;
      return this;
    }

    public void unsetHypothesis() {
      this.hypothesis = null;
    }

    /** Returns true if field hypothesis is set (has been assigned a value) and false otherwise */
    public boolean isSetHypothesis() {
      return this.hypothesis != null;
    }

    public void setHypothesisIsSet(boolean value) {
      if (!value) {
        this.hypothesis = null;
      }
    }

    public String getRequester() {
      return this.requester;
    }

    public updateHypothesis_args setRequester(String requester) {
      this.requester = requester;
      return this;
    }

    public void unsetRequester() {
      this.requester = null;
    }

    /** Returns true if field requester is set (has been assigned a value) and false otherwise */
    public boolean isSetRequester() {
      return this.requester != null;
    }

    public void setRequesterIsSet(boolean value) {
      if (!value) {
        this.requester = null;
      }
    }

    public int getVisibilitiesSize() {
      return (this.visibilities == null) ? 0 : this.visibilities.size();
    }

    public java.util.Iterator<String> getVisibilitiesIterator() {
      return (this.visibilities == null) ? null : this.visibilities.iterator();
    }

    public void addToVisibilities(String elem) {
      if (this.visibilities == null) {
        this.visibilities = new HashSet<String>();
      }
      this.visibilities.add(elem);
    }

    public Set<String> getVisibilities() {
      return this.visibilities;
    }

    public updateHypothesis_args setVisibilities(Set<String> visibilities) {
      this.visibilities = visibilities;
      return this;
    }

    public void unsetVisibilities() {
      this.visibilities = null;
    }

    /** Returns true if field visibilities is set (has been assigned a value) and false otherwise */
    public boolean isSetVisibilities() {
      return this.visibilities != null;
    }

    public void setVisibilitiesIsSet(boolean value) {
      if (!value) {
        this.visibilities = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case HYPOTHESIS:
        if (value == null) {
          unsetHypothesis();
        } else {
          setHypothesis((com._42six.amino.common.thrift.THypothesis)value);
        }
        break;

      case REQUESTER:
        if (value == null) {
          unsetRequester();
        } else {
          setRequester((String)value);
        }
        break;

      case VISIBILITIES:
        if (value == null) {
          unsetVisibilities();
        } else {
          setVisibilities((Set<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case HYPOTHESIS:
        return getHypothesis();

      case REQUESTER:
        return getRequester();

      case VISIBILITIES:
        return getVisibilities();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case HYPOTHESIS:
        return isSetHypothesis();
      case REQUESTER:
        return isSetRequester();
      case VISIBILITIES:
        return isSetVisibilities();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateHypothesis_args)
        return this.equals((updateHypothesis_args)that);
      return false;
    }

    public boolean equals(updateHypothesis_args that) {
      if (that == null)
        return false;

      boolean this_present_hypothesis = true && this.isSetHypothesis();
      boolean that_present_hypothesis = true && that.isSetHypothesis();
      if (this_present_hypothesis || that_present_hypothesis) {
        if (!(this_present_hypothesis && that_present_hypothesis))
          return false;
        if (!this.hypothesis.equals(that.hypothesis))
          return false;
      }

      boolean this_present_requester = true && this.isSetRequester();
      boolean that_present_requester = true && that.isSetRequester();
      if (this_present_requester || that_present_requester) {
        if (!(this_present_requester && that_present_requester))
          return false;
        if (!this.requester.equals(that.requester))
          return false;
      }

      boolean this_present_visibilities = true && this.isSetVisibilities();
      boolean that_present_visibilities = true && that.isSetVisibilities();
      if (this_present_visibilities || that_present_visibilities) {
        if (!(this_present_visibilities && that_present_visibilities))
          return false;
        if (!this.visibilities.equals(that.visibilities))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateHypothesis_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateHypothesis_args typedOther = (updateHypothesis_args)other;

      lastComparison = Boolean.valueOf(isSetHypothesis()).compareTo(typedOther.isSetHypothesis());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHypothesis()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hypothesis, typedOther.hypothesis);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRequester()).compareTo(typedOther.isSetRequester());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequester()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requester, typedOther.requester);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVisibilities()).compareTo(typedOther.isSetVisibilities());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVisibilities()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.visibilities, typedOther.visibilities);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // HYPOTHESIS
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.hypothesis = new com._42six.amino.common.thrift.THypothesis();
              this.hypothesis.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // REQUESTER
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.requester = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // VISIBILITIES
            if (field.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set52 = iprot.readSetBegin();
                this.visibilities = new HashSet<String>(2*_set52.size);
                for (int _i53 = 0; _i53 < _set52.size; ++_i53)
                {
                  String _elem54;
                  _elem54 = iprot.readString();
                  this.visibilities.add(_elem54);
                }
                iprot.readSetEnd();
              }
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.hypothesis != null) {
        oprot.writeFieldBegin(HYPOTHESIS_FIELD_DESC);
        this.hypothesis.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.requester != null) {
        oprot.writeFieldBegin(REQUESTER_FIELD_DESC);
        oprot.writeString(this.requester);
        oprot.writeFieldEnd();
      }
      if (this.visibilities != null) {
        oprot.writeFieldBegin(VISIBILITIES_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, this.visibilities.size()));
          for (String _iter55 : this.visibilities)
          {
            oprot.writeString(_iter55);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateHypothesis_args(");
      boolean first = true;

      sb.append("hypothesis:");
      if (this.hypothesis == null) {
        sb.append("null");
      } else {
        sb.append(this.hypothesis);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("requester:");
      if (this.requester == null) {
        sb.append("null");
      } else {
        sb.append(this.requester);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("visibilities:");
      if (this.visibilities == null) {
        sb.append("null");
      } else {
        sb.append(this.visibilities);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class updateHypothesis_result implements org.apache.thrift.TBase<updateHypothesis_result, updateHypothesis_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateHypothesis_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    public com._42six.amino.common.thrift.THypothesis success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com._42six.amino.common.thrift.THypothesis.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateHypothesis_result.class, metaDataMap);
    }

    public updateHypothesis_result() {
    }

    public updateHypothesis_result(
      com._42six.amino.common.thrift.THypothesis success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateHypothesis_result(updateHypothesis_result other) {
      if (other.isSetSuccess()) {
        this.success = new com._42six.amino.common.thrift.THypothesis(other.success);
      }
    }

    public updateHypothesis_result deepCopy() {
      return new updateHypothesis_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com._42six.amino.common.thrift.THypothesis getSuccess() {
      return this.success;
    }

    public updateHypothesis_result setSuccess(com._42six.amino.common.thrift.THypothesis success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com._42six.amino.common.thrift.THypothesis)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateHypothesis_result)
        return this.equals((updateHypothesis_result)that);
      return false;
    }

    public boolean equals(updateHypothesis_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateHypothesis_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateHypothesis_result typedOther = (updateHypothesis_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.success = new com._42six.amino.common.thrift.THypothesis();
              this.success.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateHypothesis_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class deleteHypothesis_args implements org.apache.thrift.TBase<deleteHypothesis_args, deleteHypothesis_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteHypothesis_args");

    private static final org.apache.thrift.protocol.TField OWNER_FIELD_DESC = new org.apache.thrift.protocol.TField("owner", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField VISIBILITIES_FIELD_DESC = new org.apache.thrift.protocol.TField("visibilities", org.apache.thrift.protocol.TType.SET, (short)3);

    public String owner;
    public String id;
    public Set<String> visibilities;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OWNER((short)1, "owner"),
      ID((short)2, "id"),
      VISIBILITIES((short)3, "visibilities");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OWNER
            return OWNER;
          case 2: // ID
            return ID;
          case 3: // VISIBILITIES
            return VISIBILITIES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OWNER, new org.apache.thrift.meta_data.FieldMetaData("owner", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.VISIBILITIES, new org.apache.thrift.meta_data.FieldMetaData("visibilities", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteHypothesis_args.class, metaDataMap);
    }

    public deleteHypothesis_args() {
    }

    public deleteHypothesis_args(
      String owner,
      String id,
      Set<String> visibilities)
    {
      this();
      this.owner = owner;
      this.id = id;
      this.visibilities = visibilities;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteHypothesis_args(deleteHypothesis_args other) {
      if (other.isSetOwner()) {
        this.owner = other.owner;
      }
      if (other.isSetId()) {
        this.id = other.id;
      }
      if (other.isSetVisibilities()) {
        Set<String> __this__visibilities = new HashSet<String>();
        for (String other_element : other.visibilities) {
          __this__visibilities.add(other_element);
        }
        this.visibilities = __this__visibilities;
      }
    }

    public deleteHypothesis_args deepCopy() {
      return new deleteHypothesis_args(this);
    }

    @Override
    public void clear() {
      this.owner = null;
      this.id = null;
      this.visibilities = null;
    }

    public String getOwner() {
      return this.owner;
    }

    public deleteHypothesis_args setOwner(String owner) {
      this.owner = owner;
      return this;
    }

    public void unsetOwner() {
      this.owner = null;
    }

    /** Returns true if field owner is set (has been assigned a value) and false otherwise */
    public boolean isSetOwner() {
      return this.owner != null;
    }

    public void setOwnerIsSet(boolean value) {
      if (!value) {
        this.owner = null;
      }
    }

    public String getId() {
      return this.id;
    }

    public deleteHypothesis_args setId(String id) {
      this.id = id;
      return this;
    }

    public void unsetId() {
      this.id = null;
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return this.id != null;
    }

    public void setIdIsSet(boolean value) {
      if (!value) {
        this.id = null;
      }
    }

    public int getVisibilitiesSize() {
      return (this.visibilities == null) ? 0 : this.visibilities.size();
    }

    public java.util.Iterator<String> getVisibilitiesIterator() {
      return (this.visibilities == null) ? null : this.visibilities.iterator();
    }

    public void addToVisibilities(String elem) {
      if (this.visibilities == null) {
        this.visibilities = new HashSet<String>();
      }
      this.visibilities.add(elem);
    }

    public Set<String> getVisibilities() {
      return this.visibilities;
    }

    public deleteHypothesis_args setVisibilities(Set<String> visibilities) {
      this.visibilities = visibilities;
      return this;
    }

    public void unsetVisibilities() {
      this.visibilities = null;
    }

    /** Returns true if field visibilities is set (has been assigned a value) and false otherwise */
    public boolean isSetVisibilities() {
      return this.visibilities != null;
    }

    public void setVisibilitiesIsSet(boolean value) {
      if (!value) {
        this.visibilities = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OWNER:
        if (value == null) {
          unsetOwner();
        } else {
          setOwner((String)value);
        }
        break;

      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((String)value);
        }
        break;

      case VISIBILITIES:
        if (value == null) {
          unsetVisibilities();
        } else {
          setVisibilities((Set<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OWNER:
        return getOwner();

      case ID:
        return getId();

      case VISIBILITIES:
        return getVisibilities();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OWNER:
        return isSetOwner();
      case ID:
        return isSetId();
      case VISIBILITIES:
        return isSetVisibilities();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteHypothesis_args)
        return this.equals((deleteHypothesis_args)that);
      return false;
    }

    public boolean equals(deleteHypothesis_args that) {
      if (that == null)
        return false;

      boolean this_present_owner = true && this.isSetOwner();
      boolean that_present_owner = true && that.isSetOwner();
      if (this_present_owner || that_present_owner) {
        if (!(this_present_owner && that_present_owner))
          return false;
        if (!this.owner.equals(that.owner))
          return false;
      }

      boolean this_present_id = true && this.isSetId();
      boolean that_present_id = true && that.isSetId();
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (!this.id.equals(that.id))
          return false;
      }

      boolean this_present_visibilities = true && this.isSetVisibilities();
      boolean that_present_visibilities = true && that.isSetVisibilities();
      if (this_present_visibilities || that_present_visibilities) {
        if (!(this_present_visibilities && that_present_visibilities))
          return false;
        if (!this.visibilities.equals(that.visibilities))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(deleteHypothesis_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deleteHypothesis_args typedOther = (deleteHypothesis_args)other;

      lastComparison = Boolean.valueOf(isSetOwner()).compareTo(typedOther.isSetOwner());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOwner()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.owner, typedOther.owner);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVisibilities()).compareTo(typedOther.isSetVisibilities());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVisibilities()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.visibilities, typedOther.visibilities);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // OWNER
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.owner = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // ID
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.id = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // VISIBILITIES
            if (field.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set56 = iprot.readSetBegin();
                this.visibilities = new HashSet<String>(2*_set56.size);
                for (int _i57 = 0; _i57 < _set56.size; ++_i57)
                {
                  String _elem58;
                  _elem58 = iprot.readString();
                  this.visibilities.add(_elem58);
                }
                iprot.readSetEnd();
              }
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.owner != null) {
        oprot.writeFieldBegin(OWNER_FIELD_DESC);
        oprot.writeString(this.owner);
        oprot.writeFieldEnd();
      }
      if (this.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(this.id);
        oprot.writeFieldEnd();
      }
      if (this.visibilities != null) {
        oprot.writeFieldBegin(VISIBILITIES_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, this.visibilities.size()));
          for (String _iter59 : this.visibilities)
          {
            oprot.writeString(_iter59);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteHypothesis_args(");
      boolean first = true;

      sb.append("owner:");
      if (this.owner == null) {
        sb.append("null");
      } else {
        sb.append(this.owner);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("visibilities:");
      if (this.visibilities == null) {
        sb.append("null");
      } else {
        sb.append(this.visibilities);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class deleteHypothesis_result implements org.apache.thrift.TBase<deleteHypothesis_result, deleteHypothesis_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteHypothesis_result");



    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteHypothesis_result.class, metaDataMap);
    }

    public deleteHypothesis_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteHypothesis_result(deleteHypothesis_result other) {
    }

    public deleteHypothesis_result deepCopy() {
      return new deleteHypothesis_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteHypothesis_result)
        return this.equals((deleteHypothesis_result)that);
      return false;
    }

    public boolean equals(deleteHypothesis_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(deleteHypothesis_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deleteHypothesis_result typedOther = (deleteHypothesis_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteHypothesis_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getShardCount_args implements org.apache.thrift.TBase<getShardCount_args, getShardCount_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getShardCount_args");



    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getShardCount_args.class, metaDataMap);
    }

    public getShardCount_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getShardCount_args(getShardCount_args other) {
    }

    public getShardCount_args deepCopy() {
      return new getShardCount_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getShardCount_args)
        return this.equals((getShardCount_args)that);
      return false;
    }

    public boolean equals(getShardCount_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getShardCount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getShardCount_args typedOther = (getShardCount_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getShardCount_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getShardCount_result implements org.apache.thrift.TBase<getShardCount_result, getShardCount_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getShardCount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    public int success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getShardCount_result.class, metaDataMap);
    }

    public getShardCount_result() {
    }

    public getShardCount_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getShardCount_result(getShardCount_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public getShardCount_result deepCopy() {
      return new getShardCount_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public getShardCount_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return new Integer(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getShardCount_result)
        return this.equals((getShardCount_result)that);
      return false;
    }

    public boolean equals(getShardCount_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getShardCount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getShardCount_result typedOther = (getShardCount_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.I32) {
              this.success = iprot.readI32();
              setSuccessIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getShardCount_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getHashCount_args implements org.apache.thrift.TBase<getHashCount_args, getHashCount_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getHashCount_args");



    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getHashCount_args.class, metaDataMap);
    }

    public getHashCount_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getHashCount_args(getHashCount_args other) {
    }

    public getHashCount_args deepCopy() {
      return new getHashCount_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getHashCount_args)
        return this.equals((getHashCount_args)that);
      return false;
    }

    public boolean equals(getHashCount_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getHashCount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getHashCount_args typedOther = (getHashCount_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getHashCount_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getHashCount_result implements org.apache.thrift.TBase<getHashCount_result, getHashCount_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getHashCount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    public int success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getHashCount_result.class, metaDataMap);
    }

    public getHashCount_result() {
    }

    public getHashCount_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getHashCount_result(getHashCount_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public getHashCount_result deepCopy() {
      return new getHashCount_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public getHashCount_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return new Integer(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getHashCount_result)
        return this.equals((getHashCount_result)that);
      return false;
    }

    public boolean equals(getHashCount_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getHashCount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getHashCount_result typedOther = (getHashCount_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.I32) {
              this.success = iprot.readI32();
              setSuccessIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getHashCount_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

}
