/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com._42six.amino.query.thrift.services;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class AminoThriftService {

  public interface Iface {

    /**
     * ************************
     * /* GroupService methods   *
     * *************************
     * 
     * @param group
     * @param visibilities
     */
    public boolean verifyGroupExists(String group, Set<String> visibilities) throws org.apache.thrift.TException;

    public boolean verifyUserExists(String user, Set<String> visibilities) throws org.apache.thrift.TException;

    public void addToGroup(com._42six.amino.common.thrift.TAddUsersRequest request) throws org.apache.thrift.TException;

    public void createGroup(com._42six.amino.common.thrift.TCreateGroupRequest request) throws org.apache.thrift.TException;

    public Set<String> listGroups(String userId, Set<String> visibilities) throws org.apache.thrift.TException;

    public Set<String> getGroupsForUser(String userId, Set<String> visibilities) throws org.apache.thrift.TException;

    public void removeUserFromGroups(String requester, String userId, Set<String> groups, Set<String> visibilities) throws org.apache.thrift.TException;

    public void removeUsersFromGroup(String requester, String group, Set<String> users, Set<String> visibilities) throws org.apache.thrift.TException;

    public List<com._42six.amino.common.thrift.THypothesis> getGroupHypothesesForUser(String userId, Set<String> visibilities, boolean userOwned) throws org.apache.thrift.TException;

    public com._42six.amino.common.thrift.TGroup getGroup(String requester, String group, Set<String> visibilities) throws org.apache.thrift.TException;

    /**
     * **************************
     * /* MetadataService methods  *
     * ***************************
     * 
     * @param visibilities
     */
    public List<com._42six.amino.common.thrift.TDatasourceMetadata> listDataSources(Set<String> visibilities) throws org.apache.thrift.TException;

    public List<com._42six.amino.common.thrift.TFeatureMetadata> listFeatures(String datasourceId, Set<String> visibilities) throws org.apache.thrift.TException;

    public List<com._42six.amino.common.thrift.TBucketMetadata> listBuckets(String datasourceId, Set<String> visibilities) throws org.apache.thrift.TException;

    public com._42six.amino.common.thrift.TDatasourceMetadata getDataSource(String dataSourceId, Set<String> visibilities) throws org.apache.thrift.TException;

    public com._42six.amino.common.thrift.TFeatureMetadata getFeature(String id, Set<String> visibilities) throws org.apache.thrift.TException;

    public com._42six.amino.common.thrift.TBucketMetadata getBucket(String id, Set<String> visibilities) throws org.apache.thrift.TException;

    /**
     * Fetches the Hypothesis
     * 
     * @param userId       The ID of the user making the request
     * @param owner        The owner field of the hypthesis to fetch
     * @param hypothesisId The ID of the hypothesis to fetch
     * @param visibility   The security visibilities for the database
     * 
     * @param userId
     * @param owner
     * @param hypothesisId
     * @param visibilities
     */
    public com._42six.amino.common.thrift.THypothesis getHypothesis(String userId, String owner, String hypothesisId, Set<String> visibilities) throws org.apache.thrift.TException;

    public List<com._42six.amino.common.thrift.THypothesis> listHypotheses(String userId, Set<String> visibilities) throws org.apache.thrift.TException;

    public com._42six.amino.common.thrift.THypothesis createHypothesis(com._42six.amino.common.thrift.THypothesis hypothesis, String userId, Set<String> visibilities) throws org.apache.thrift.TException;

    public com._42six.amino.common.thrift.THypothesis updateHypothesis(com._42six.amino.common.thrift.THypothesis hypothesis, String requester, Set<String> visibilities) throws org.apache.thrift.TException;

    public void deleteHypothesis(String owner, String id, Set<String> visibilities) throws org.apache.thrift.TException;

    public int getShardCount() throws org.apache.thrift.TException;

    public int getHashCount() throws org.apache.thrift.TException;

    /**
     * * Lists existing AminoQueryResults for a given user.
     * *
     * * @param start     There are two parameters, both optional, used for paging. start defaults to 0 if not specified, and count defaults to 20 if not specified.
     *    * @param count     How many to return.
     * * @param userid     The userid to search on.
     * * @param visibilities A list of string corresponding to allowed visibilities for the user.
     * * @return A list of AminoQueryResults.
     * 
     * @param start
     * @param count
     * @param userid
     * @param visibilities
     */
    public List<com._42six.amino.common.thrift.TQueryResult> listResults(long start, long count, String userid, Set<String> visibilities) throws org.apache.thrift.TException;

    /**
     * Get an already existing result from the data store.
     * 
     * @param requester  The ID String of the person making the request
     * @param owner      The owner string of the QueryResult
     * @param id         The id of the result.
     * @param visibilities A list of string corresponding to allowed visibilities for the user.
     * @return The filled out AminoQueryResults.
     * 
     * @param requester
     * @param owner
     * @param id
     * @param visibilities
     */
    public com._42six.amino.common.thrift.TQueryResult getResult(String requester, String owner, String id, Set<String> visibilities) throws org.apache.thrift.TException;

    /**
     * Executes a query and writes its results to the data store.
     * 
     * @param owner         The owner of the result
     * @param hypothesisId  The id of the hypothesis to use as the basis for the query
     * @param justification A justification for this query
     * @param userid        The name of the user executing the query.
     * @param visibilities    A list of string corresponding to allowed visibilities for the user.
     * @return An AminoQueryResult containing the results of the query.
     * 
     * @param owner
     * @param hypothesisId
     * @param maxResults
     * @param justification
     * @param userid
     * @param visibilities
     */
    public com._42six.amino.common.thrift.TQueryResult createResult(String owner, String hypothesisId, int maxResults, String justification, String userid, Set<String> visibilities) throws org.apache.thrift.TException;

    /**
     * Deletes a QueryResult
     * 
     * @param owner      The owner string of the QueryResult to delete
     * @param id         The id of the QueryResult to delete
     * @param visibilities A list of strings corresponding to allowed visibilities for the user.
     * 
     * @param owner
     * @param id
     * @param visibilities
     */
    public void deleteResult(String owner, String id, Set<String> visibilities) throws org.apache.thrift.TException;

    /**
     * Gets a count of results for a given range of feature values and a bucket
     * 
     * @param featureId  The id of the feature
     * @param bucketName The name of the bucket
     * @param beginRange The start of the range (inclusive)
     * @param endRange   The end of the range (inclusive)
     * @param visibilities A list of strings corresponding to allowed visibilities for the user.
     * 
     * @param featureId
     * @param bucketName
     * @param beginRange
     * @param endRange
     * @param visibilities
     */
    public int getCountForHypothesisFeature(String featureId, String bucketName, String beginRange, String endRange, Set<String> visibilities) throws org.apache.thrift.TException;

    /**
     * Creates Hypotheses from the given bucket values.  Each of the hypotheses will be a Hypothesis that represents all
     * of the features that would match that bucket value for the given datasource and bucket.  The Hypotheses are only
     * created, they are not persisted to the database.  This call takes optional paramters to abort afer a specified
     * timeout value.
     * 
     * @param datasourceid The datasource to check the bucket values against
     * @param bucketid The bucket to check the bucket values against
     * @param visibilities The Accumulo visibilities
     * @param userid the DN of the person making the request
     * @param justification The justification string for auditing
     * @param featureIds (optional) The featureIds that we are interested in. If provided, all others will be excluded from the results
     * @param timeout (optional) The amount of time to wait in seconds before timing out. If <= 0, then default will be used
     * @return A Collection of Hypothesis, one for each bucket value
     * 
     * @param datasourceid
     * @param bucketid
     * @param bucketValues
     * @param visibilities
     * @param userid
     * @param justification
     * @param featureIds
     * @param timeout
     */
    public List<com._42six.amino.common.thrift.THypothesis> createNonPersistedHypothesisListForBucketValue(String datasourceid, String bucketid, List<String> bucketValues, Set<String> visibilities, String userid, String justification, List<String> featureIds, long timeout) throws org.apache.thrift.TException;

    /**
     * Finds all existing, visible hypotheses that intersect with the given bucketValues.
     * 
     * @param bvRequest All of the parameters
     * @return Hypotheses that intersect with the bucketvalues
     * 
     * @param bvRequest
     */
    public List<com._42six.amino.common.thrift.THypothesis> getHypothesesByBucketValues(com._42six.amino.common.thrift.TByValuesRequest bvRequest) throws org.apache.thrift.TException;

    /**
     * Determines the uniqueness score of the given feature for a particular bucket
     * @param featureId The feature to look up
     * @param bucketName The bucket to look in
     * @param count The number of times that the feature exists for that bucket
     * @param visibilities The BigTable visibility strings
     * @return The uniqueness score
     * @throws BigTableException
     * 
     * @param featureId
     * @param bucketName
     * @param count
     * @param visibilities
     */
    public double getUniqueness(String featureId, String bucketName, int count, Set<String> visibilities) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void verifyGroupExists(String group, Set<String> visibilities, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.verifyGroupExists_call> resultHandler) throws org.apache.thrift.TException;

    public void verifyUserExists(String user, Set<String> visibilities, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.verifyUserExists_call> resultHandler) throws org.apache.thrift.TException;

    public void addToGroup(com._42six.amino.common.thrift.TAddUsersRequest request, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.addToGroup_call> resultHandler) throws org.apache.thrift.TException;

    public void createGroup(com._42six.amino.common.thrift.TCreateGroupRequest request, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.createGroup_call> resultHandler) throws org.apache.thrift.TException;

    public void listGroups(String userId, Set<String> visibilities, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.listGroups_call> resultHandler) throws org.apache.thrift.TException;

    public void getGroupsForUser(String userId, Set<String> visibilities, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getGroupsForUser_call> resultHandler) throws org.apache.thrift.TException;

    public void removeUserFromGroups(String requester, String userId, Set<String> groups, Set<String> visibilities, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.removeUserFromGroups_call> resultHandler) throws org.apache.thrift.TException;

    public void removeUsersFromGroup(String requester, String group, Set<String> users, Set<String> visibilities, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.removeUsersFromGroup_call> resultHandler) throws org.apache.thrift.TException;

    public void getGroupHypothesesForUser(String userId, Set<String> visibilities, boolean userOwned, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getGroupHypothesesForUser_call> resultHandler) throws org.apache.thrift.TException;

    public void getGroup(String requester, String group, Set<String> visibilities, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getGroup_call> resultHandler) throws org.apache.thrift.TException;

    public void listDataSources(Set<String> visibilities, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.listDataSources_call> resultHandler) throws org.apache.thrift.TException;

    public void listFeatures(String datasourceId, Set<String> visibilities, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.listFeatures_call> resultHandler) throws org.apache.thrift.TException;

    public void listBuckets(String datasourceId, Set<String> visibilities, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.listBuckets_call> resultHandler) throws org.apache.thrift.TException;

    public void getDataSource(String dataSourceId, Set<String> visibilities, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getDataSource_call> resultHandler) throws org.apache.thrift.TException;

    public void getFeature(String id, Set<String> visibilities, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getFeature_call> resultHandler) throws org.apache.thrift.TException;

    public void getBucket(String id, Set<String> visibilities, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getBucket_call> resultHandler) throws org.apache.thrift.TException;

    public void getHypothesis(String userId, String owner, String hypothesisId, Set<String> visibilities, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getHypothesis_call> resultHandler) throws org.apache.thrift.TException;

    public void listHypotheses(String userId, Set<String> visibilities, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.listHypotheses_call> resultHandler) throws org.apache.thrift.TException;

    public void createHypothesis(com._42six.amino.common.thrift.THypothesis hypothesis, String userId, Set<String> visibilities, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.createHypothesis_call> resultHandler) throws org.apache.thrift.TException;

    public void updateHypothesis(com._42six.amino.common.thrift.THypothesis hypothesis, String requester, Set<String> visibilities, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.updateHypothesis_call> resultHandler) throws org.apache.thrift.TException;

    public void deleteHypothesis(String owner, String id, Set<String> visibilities, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.deleteHypothesis_call> resultHandler) throws org.apache.thrift.TException;

    public void getShardCount(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getShardCount_call> resultHandler) throws org.apache.thrift.TException;

    public void getHashCount(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getHashCount_call> resultHandler) throws org.apache.thrift.TException;

    public void listResults(long start, long count, String userid, Set<String> visibilities, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.listResults_call> resultHandler) throws org.apache.thrift.TException;

    public void getResult(String requester, String owner, String id, Set<String> visibilities, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getResult_call> resultHandler) throws org.apache.thrift.TException;

    public void createResult(String owner, String hypothesisId, int maxResults, String justification, String userid, Set<String> visibilities, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.createResult_call> resultHandler) throws org.apache.thrift.TException;

    public void deleteResult(String owner, String id, Set<String> visibilities, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.deleteResult_call> resultHandler) throws org.apache.thrift.TException;

    public void getCountForHypothesisFeature(String featureId, String bucketName, String beginRange, String endRange, Set<String> visibilities, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getCountForHypothesisFeature_call> resultHandler) throws org.apache.thrift.TException;

    public void createNonPersistedHypothesisListForBucketValue(String datasourceid, String bucketid, List<String> bucketValues, Set<String> visibilities, String userid, String justification, List<String> featureIds, long timeout, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.createNonPersistedHypothesisListForBucketValue_call> resultHandler) throws org.apache.thrift.TException;

    public void getHypothesesByBucketValues(com._42six.amino.common.thrift.TByValuesRequest bvRequest, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getHypothesesByBucketValues_call> resultHandler) throws org.apache.thrift.TException;

    public void getUniqueness(String featureId, String bucketName, int count, Set<String> visibilities, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getUniqueness_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public boolean verifyGroupExists(String group, Set<String> visibilities) throws org.apache.thrift.TException
    {
      send_verifyGroupExists(group, visibilities);
      return recv_verifyGroupExists();
    }

    public void send_verifyGroupExists(String group, Set<String> visibilities) throws org.apache.thrift.TException
    {
      verifyGroupExists_args args = new verifyGroupExists_args();
      args.setGroup(group);
      args.setVisibilities(visibilities);
      sendBase("verifyGroupExists", args);
    }

    public boolean recv_verifyGroupExists() throws org.apache.thrift.TException
    {
      verifyGroupExists_result result = new verifyGroupExists_result();
      receiveBase(result, "verifyGroupExists");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "verifyGroupExists failed: unknown result");
    }

    public boolean verifyUserExists(String user, Set<String> visibilities) throws org.apache.thrift.TException
    {
      send_verifyUserExists(user, visibilities);
      return recv_verifyUserExists();
    }

    public void send_verifyUserExists(String user, Set<String> visibilities) throws org.apache.thrift.TException
    {
      verifyUserExists_args args = new verifyUserExists_args();
      args.setUser(user);
      args.setVisibilities(visibilities);
      sendBase("verifyUserExists", args);
    }

    public boolean recv_verifyUserExists() throws org.apache.thrift.TException
    {
      verifyUserExists_result result = new verifyUserExists_result();
      receiveBase(result, "verifyUserExists");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "verifyUserExists failed: unknown result");
    }

    public void addToGroup(com._42six.amino.common.thrift.TAddUsersRequest request) throws org.apache.thrift.TException
    {
      send_addToGroup(request);
      recv_addToGroup();
    }

    public void send_addToGroup(com._42six.amino.common.thrift.TAddUsersRequest request) throws org.apache.thrift.TException
    {
      addToGroup_args args = new addToGroup_args();
      args.setRequest(request);
      sendBase("addToGroup", args);
    }

    public void recv_addToGroup() throws org.apache.thrift.TException
    {
      addToGroup_result result = new addToGroup_result();
      receiveBase(result, "addToGroup");
      return;
    }

    public void createGroup(com._42six.amino.common.thrift.TCreateGroupRequest request) throws org.apache.thrift.TException
    {
      send_createGroup(request);
      recv_createGroup();
    }

    public void send_createGroup(com._42six.amino.common.thrift.TCreateGroupRequest request) throws org.apache.thrift.TException
    {
      createGroup_args args = new createGroup_args();
      args.setRequest(request);
      sendBase("createGroup", args);
    }

    public void recv_createGroup() throws org.apache.thrift.TException
    {
      createGroup_result result = new createGroup_result();
      receiveBase(result, "createGroup");
      return;
    }

    public Set<String> listGroups(String userId, Set<String> visibilities) throws org.apache.thrift.TException
    {
      send_listGroups(userId, visibilities);
      return recv_listGroups();
    }

    public void send_listGroups(String userId, Set<String> visibilities) throws org.apache.thrift.TException
    {
      listGroups_args args = new listGroups_args();
      args.setUserId(userId);
      args.setVisibilities(visibilities);
      sendBase("listGroups", args);
    }

    public Set<String> recv_listGroups() throws org.apache.thrift.TException
    {
      listGroups_result result = new listGroups_result();
      receiveBase(result, "listGroups");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listGroups failed: unknown result");
    }

    public Set<String> getGroupsForUser(String userId, Set<String> visibilities) throws org.apache.thrift.TException
    {
      send_getGroupsForUser(userId, visibilities);
      return recv_getGroupsForUser();
    }

    public void send_getGroupsForUser(String userId, Set<String> visibilities) throws org.apache.thrift.TException
    {
      getGroupsForUser_args args = new getGroupsForUser_args();
      args.setUserId(userId);
      args.setVisibilities(visibilities);
      sendBase("getGroupsForUser", args);
    }

    public Set<String> recv_getGroupsForUser() throws org.apache.thrift.TException
    {
      getGroupsForUser_result result = new getGroupsForUser_result();
      receiveBase(result, "getGroupsForUser");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getGroupsForUser failed: unknown result");
    }

    public void removeUserFromGroups(String requester, String userId, Set<String> groups, Set<String> visibilities) throws org.apache.thrift.TException
    {
      send_removeUserFromGroups(requester, userId, groups, visibilities);
      recv_removeUserFromGroups();
    }

    public void send_removeUserFromGroups(String requester, String userId, Set<String> groups, Set<String> visibilities) throws org.apache.thrift.TException
    {
      removeUserFromGroups_args args = new removeUserFromGroups_args();
      args.setRequester(requester);
      args.setUserId(userId);
      args.setGroups(groups);
      args.setVisibilities(visibilities);
      sendBase("removeUserFromGroups", args);
    }

    public void recv_removeUserFromGroups() throws org.apache.thrift.TException
    {
      removeUserFromGroups_result result = new removeUserFromGroups_result();
      receiveBase(result, "removeUserFromGroups");
      return;
    }

    public void removeUsersFromGroup(String requester, String group, Set<String> users, Set<String> visibilities) throws org.apache.thrift.TException
    {
      send_removeUsersFromGroup(requester, group, users, visibilities);
      recv_removeUsersFromGroup();
    }

    public void send_removeUsersFromGroup(String requester, String group, Set<String> users, Set<String> visibilities) throws org.apache.thrift.TException
    {
      removeUsersFromGroup_args args = new removeUsersFromGroup_args();
      args.setRequester(requester);
      args.setGroup(group);
      args.setUsers(users);
      args.setVisibilities(visibilities);
      sendBase("removeUsersFromGroup", args);
    }

    public void recv_removeUsersFromGroup() throws org.apache.thrift.TException
    {
      removeUsersFromGroup_result result = new removeUsersFromGroup_result();
      receiveBase(result, "removeUsersFromGroup");
      return;
    }

    public List<com._42six.amino.common.thrift.THypothesis> getGroupHypothesesForUser(String userId, Set<String> visibilities, boolean userOwned) throws org.apache.thrift.TException
    {
      send_getGroupHypothesesForUser(userId, visibilities, userOwned);
      return recv_getGroupHypothesesForUser();
    }

    public void send_getGroupHypothesesForUser(String userId, Set<String> visibilities, boolean userOwned) throws org.apache.thrift.TException
    {
      getGroupHypothesesForUser_args args = new getGroupHypothesesForUser_args();
      args.setUserId(userId);
      args.setVisibilities(visibilities);
      args.setUserOwned(userOwned);
      sendBase("getGroupHypothesesForUser", args);
    }

    public List<com._42six.amino.common.thrift.THypothesis> recv_getGroupHypothesesForUser() throws org.apache.thrift.TException
    {
      getGroupHypothesesForUser_result result = new getGroupHypothesesForUser_result();
      receiveBase(result, "getGroupHypothesesForUser");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getGroupHypothesesForUser failed: unknown result");
    }

    public com._42six.amino.common.thrift.TGroup getGroup(String requester, String group, Set<String> visibilities) throws org.apache.thrift.TException
    {
      send_getGroup(requester, group, visibilities);
      return recv_getGroup();
    }

    public void send_getGroup(String requester, String group, Set<String> visibilities) throws org.apache.thrift.TException
    {
      getGroup_args args = new getGroup_args();
      args.setRequester(requester);
      args.setGroup(group);
      args.setVisibilities(visibilities);
      sendBase("getGroup", args);
    }

    public com._42six.amino.common.thrift.TGroup recv_getGroup() throws org.apache.thrift.TException
    {
      getGroup_result result = new getGroup_result();
      receiveBase(result, "getGroup");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getGroup failed: unknown result");
    }

    public List<com._42six.amino.common.thrift.TDatasourceMetadata> listDataSources(Set<String> visibilities) throws org.apache.thrift.TException
    {
      send_listDataSources(visibilities);
      return recv_listDataSources();
    }

    public void send_listDataSources(Set<String> visibilities) throws org.apache.thrift.TException
    {
      listDataSources_args args = new listDataSources_args();
      args.setVisibilities(visibilities);
      sendBase("listDataSources", args);
    }

    public List<com._42six.amino.common.thrift.TDatasourceMetadata> recv_listDataSources() throws org.apache.thrift.TException
    {
      listDataSources_result result = new listDataSources_result();
      receiveBase(result, "listDataSources");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listDataSources failed: unknown result");
    }

    public List<com._42six.amino.common.thrift.TFeatureMetadata> listFeatures(String datasourceId, Set<String> visibilities) throws org.apache.thrift.TException
    {
      send_listFeatures(datasourceId, visibilities);
      return recv_listFeatures();
    }

    public void send_listFeatures(String datasourceId, Set<String> visibilities) throws org.apache.thrift.TException
    {
      listFeatures_args args = new listFeatures_args();
      args.setDatasourceId(datasourceId);
      args.setVisibilities(visibilities);
      sendBase("listFeatures", args);
    }

    public List<com._42six.amino.common.thrift.TFeatureMetadata> recv_listFeatures() throws org.apache.thrift.TException
    {
      listFeatures_result result = new listFeatures_result();
      receiveBase(result, "listFeatures");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listFeatures failed: unknown result");
    }

    public List<com._42six.amino.common.thrift.TBucketMetadata> listBuckets(String datasourceId, Set<String> visibilities) throws org.apache.thrift.TException
    {
      send_listBuckets(datasourceId, visibilities);
      return recv_listBuckets();
    }

    public void send_listBuckets(String datasourceId, Set<String> visibilities) throws org.apache.thrift.TException
    {
      listBuckets_args args = new listBuckets_args();
      args.setDatasourceId(datasourceId);
      args.setVisibilities(visibilities);
      sendBase("listBuckets", args);
    }

    public List<com._42six.amino.common.thrift.TBucketMetadata> recv_listBuckets() throws org.apache.thrift.TException
    {
      listBuckets_result result = new listBuckets_result();
      receiveBase(result, "listBuckets");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listBuckets failed: unknown result");
    }

    public com._42six.amino.common.thrift.TDatasourceMetadata getDataSource(String dataSourceId, Set<String> visibilities) throws org.apache.thrift.TException
    {
      send_getDataSource(dataSourceId, visibilities);
      return recv_getDataSource();
    }

    public void send_getDataSource(String dataSourceId, Set<String> visibilities) throws org.apache.thrift.TException
    {
      getDataSource_args args = new getDataSource_args();
      args.setDataSourceId(dataSourceId);
      args.setVisibilities(visibilities);
      sendBase("getDataSource", args);
    }

    public com._42six.amino.common.thrift.TDatasourceMetadata recv_getDataSource() throws org.apache.thrift.TException
    {
      getDataSource_result result = new getDataSource_result();
      receiveBase(result, "getDataSource");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getDataSource failed: unknown result");
    }

    public com._42six.amino.common.thrift.TFeatureMetadata getFeature(String id, Set<String> visibilities) throws org.apache.thrift.TException
    {
      send_getFeature(id, visibilities);
      return recv_getFeature();
    }

    public void send_getFeature(String id, Set<String> visibilities) throws org.apache.thrift.TException
    {
      getFeature_args args = new getFeature_args();
      args.setId(id);
      args.setVisibilities(visibilities);
      sendBase("getFeature", args);
    }

    public com._42six.amino.common.thrift.TFeatureMetadata recv_getFeature() throws org.apache.thrift.TException
    {
      getFeature_result result = new getFeature_result();
      receiveBase(result, "getFeature");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getFeature failed: unknown result");
    }

    public com._42six.amino.common.thrift.TBucketMetadata getBucket(String id, Set<String> visibilities) throws org.apache.thrift.TException
    {
      send_getBucket(id, visibilities);
      return recv_getBucket();
    }

    public void send_getBucket(String id, Set<String> visibilities) throws org.apache.thrift.TException
    {
      getBucket_args args = new getBucket_args();
      args.setId(id);
      args.setVisibilities(visibilities);
      sendBase("getBucket", args);
    }

    public com._42six.amino.common.thrift.TBucketMetadata recv_getBucket() throws org.apache.thrift.TException
    {
      getBucket_result result = new getBucket_result();
      receiveBase(result, "getBucket");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getBucket failed: unknown result");
    }

    public com._42six.amino.common.thrift.THypothesis getHypothesis(String userId, String owner, String hypothesisId, Set<String> visibilities) throws org.apache.thrift.TException
    {
      send_getHypothesis(userId, owner, hypothesisId, visibilities);
      return recv_getHypothesis();
    }

    public void send_getHypothesis(String userId, String owner, String hypothesisId, Set<String> visibilities) throws org.apache.thrift.TException
    {
      getHypothesis_args args = new getHypothesis_args();
      args.setUserId(userId);
      args.setOwner(owner);
      args.setHypothesisId(hypothesisId);
      args.setVisibilities(visibilities);
      sendBase("getHypothesis", args);
    }

    public com._42six.amino.common.thrift.THypothesis recv_getHypothesis() throws org.apache.thrift.TException
    {
      getHypothesis_result result = new getHypothesis_result();
      receiveBase(result, "getHypothesis");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getHypothesis failed: unknown result");
    }

    public List<com._42six.amino.common.thrift.THypothesis> listHypotheses(String userId, Set<String> visibilities) throws org.apache.thrift.TException
    {
      send_listHypotheses(userId, visibilities);
      return recv_listHypotheses();
    }

    public void send_listHypotheses(String userId, Set<String> visibilities) throws org.apache.thrift.TException
    {
      listHypotheses_args args = new listHypotheses_args();
      args.setUserId(userId);
      args.setVisibilities(visibilities);
      sendBase("listHypotheses", args);
    }

    public List<com._42six.amino.common.thrift.THypothesis> recv_listHypotheses() throws org.apache.thrift.TException
    {
      listHypotheses_result result = new listHypotheses_result();
      receiveBase(result, "listHypotheses");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listHypotheses failed: unknown result");
    }

    public com._42six.amino.common.thrift.THypothesis createHypothesis(com._42six.amino.common.thrift.THypothesis hypothesis, String userId, Set<String> visibilities) throws org.apache.thrift.TException
    {
      send_createHypothesis(hypothesis, userId, visibilities);
      return recv_createHypothesis();
    }

    public void send_createHypothesis(com._42six.amino.common.thrift.THypothesis hypothesis, String userId, Set<String> visibilities) throws org.apache.thrift.TException
    {
      createHypothesis_args args = new createHypothesis_args();
      args.setHypothesis(hypothesis);
      args.setUserId(userId);
      args.setVisibilities(visibilities);
      sendBase("createHypothesis", args);
    }

    public com._42six.amino.common.thrift.THypothesis recv_createHypothesis() throws org.apache.thrift.TException
    {
      createHypothesis_result result = new createHypothesis_result();
      receiveBase(result, "createHypothesis");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createHypothesis failed: unknown result");
    }

    public com._42six.amino.common.thrift.THypothesis updateHypothesis(com._42six.amino.common.thrift.THypothesis hypothesis, String requester, Set<String> visibilities) throws org.apache.thrift.TException
    {
      send_updateHypothesis(hypothesis, requester, visibilities);
      return recv_updateHypothesis();
    }

    public void send_updateHypothesis(com._42six.amino.common.thrift.THypothesis hypothesis, String requester, Set<String> visibilities) throws org.apache.thrift.TException
    {
      updateHypothesis_args args = new updateHypothesis_args();
      args.setHypothesis(hypothesis);
      args.setRequester(requester);
      args.setVisibilities(visibilities);
      sendBase("updateHypothesis", args);
    }

    public com._42six.amino.common.thrift.THypothesis recv_updateHypothesis() throws org.apache.thrift.TException
    {
      updateHypothesis_result result = new updateHypothesis_result();
      receiveBase(result, "updateHypothesis");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateHypothesis failed: unknown result");
    }

    public void deleteHypothesis(String owner, String id, Set<String> visibilities) throws org.apache.thrift.TException
    {
      send_deleteHypothesis(owner, id, visibilities);
      recv_deleteHypothesis();
    }

    public void send_deleteHypothesis(String owner, String id, Set<String> visibilities) throws org.apache.thrift.TException
    {
      deleteHypothesis_args args = new deleteHypothesis_args();
      args.setOwner(owner);
      args.setId(id);
      args.setVisibilities(visibilities);
      sendBase("deleteHypothesis", args);
    }

    public void recv_deleteHypothesis() throws org.apache.thrift.TException
    {
      deleteHypothesis_result result = new deleteHypothesis_result();
      receiveBase(result, "deleteHypothesis");
      return;
    }

    public int getShardCount() throws org.apache.thrift.TException
    {
      send_getShardCount();
      return recv_getShardCount();
    }

    public void send_getShardCount() throws org.apache.thrift.TException
    {
      getShardCount_args args = new getShardCount_args();
      sendBase("getShardCount", args);
    }

    public int recv_getShardCount() throws org.apache.thrift.TException
    {
      getShardCount_result result = new getShardCount_result();
      receiveBase(result, "getShardCount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getShardCount failed: unknown result");
    }

    public int getHashCount() throws org.apache.thrift.TException
    {
      send_getHashCount();
      return recv_getHashCount();
    }

    public void send_getHashCount() throws org.apache.thrift.TException
    {
      getHashCount_args args = new getHashCount_args();
      sendBase("getHashCount", args);
    }

    public int recv_getHashCount() throws org.apache.thrift.TException
    {
      getHashCount_result result = new getHashCount_result();
      receiveBase(result, "getHashCount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getHashCount failed: unknown result");
    }

    public List<com._42six.amino.common.thrift.TQueryResult> listResults(long start, long count, String userid, Set<String> visibilities) throws org.apache.thrift.TException
    {
      send_listResults(start, count, userid, visibilities);
      return recv_listResults();
    }

    public void send_listResults(long start, long count, String userid, Set<String> visibilities) throws org.apache.thrift.TException
    {
      listResults_args args = new listResults_args();
      args.setStart(start);
      args.setCount(count);
      args.setUserid(userid);
      args.setVisibilities(visibilities);
      sendBase("listResults", args);
    }

    public List<com._42six.amino.common.thrift.TQueryResult> recv_listResults() throws org.apache.thrift.TException
    {
      listResults_result result = new listResults_result();
      receiveBase(result, "listResults");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listResults failed: unknown result");
    }

    public com._42six.amino.common.thrift.TQueryResult getResult(String requester, String owner, String id, Set<String> visibilities) throws org.apache.thrift.TException
    {
      send_getResult(requester, owner, id, visibilities);
      return recv_getResult();
    }

    public void send_getResult(String requester, String owner, String id, Set<String> visibilities) throws org.apache.thrift.TException
    {
      getResult_args args = new getResult_args();
      args.setRequester(requester);
      args.setOwner(owner);
      args.setId(id);
      args.setVisibilities(visibilities);
      sendBase("getResult", args);
    }

    public com._42six.amino.common.thrift.TQueryResult recv_getResult() throws org.apache.thrift.TException
    {
      getResult_result result = new getResult_result();
      receiveBase(result, "getResult");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getResult failed: unknown result");
    }

    public com._42six.amino.common.thrift.TQueryResult createResult(String owner, String hypothesisId, int maxResults, String justification, String userid, Set<String> visibilities) throws org.apache.thrift.TException
    {
      send_createResult(owner, hypothesisId, maxResults, justification, userid, visibilities);
      return recv_createResult();
    }

    public void send_createResult(String owner, String hypothesisId, int maxResults, String justification, String userid, Set<String> visibilities) throws org.apache.thrift.TException
    {
      createResult_args args = new createResult_args();
      args.setOwner(owner);
      args.setHypothesisId(hypothesisId);
      args.setMaxResults(maxResults);
      args.setJustification(justification);
      args.setUserid(userid);
      args.setVisibilities(visibilities);
      sendBase("createResult", args);
    }

    public com._42six.amino.common.thrift.TQueryResult recv_createResult() throws org.apache.thrift.TException
    {
      createResult_result result = new createResult_result();
      receiveBase(result, "createResult");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createResult failed: unknown result");
    }

    public void deleteResult(String owner, String id, Set<String> visibilities) throws org.apache.thrift.TException
    {
      send_deleteResult(owner, id, visibilities);
      recv_deleteResult();
    }

    public void send_deleteResult(String owner, String id, Set<String> visibilities) throws org.apache.thrift.TException
    {
      deleteResult_args args = new deleteResult_args();
      args.setOwner(owner);
      args.setId(id);
      args.setVisibilities(visibilities);
      sendBase("deleteResult", args);
    }

    public void recv_deleteResult() throws org.apache.thrift.TException
    {
      deleteResult_result result = new deleteResult_result();
      receiveBase(result, "deleteResult");
      return;
    }

    public int getCountForHypothesisFeature(String featureId, String bucketName, String beginRange, String endRange, Set<String> visibilities) throws org.apache.thrift.TException
    {
      send_getCountForHypothesisFeature(featureId, bucketName, beginRange, endRange, visibilities);
      return recv_getCountForHypothesisFeature();
    }

    public void send_getCountForHypothesisFeature(String featureId, String bucketName, String beginRange, String endRange, Set<String> visibilities) throws org.apache.thrift.TException
    {
      getCountForHypothesisFeature_args args = new getCountForHypothesisFeature_args();
      args.setFeatureId(featureId);
      args.setBucketName(bucketName);
      args.setBeginRange(beginRange);
      args.setEndRange(endRange);
      args.setVisibilities(visibilities);
      sendBase("getCountForHypothesisFeature", args);
    }

    public int recv_getCountForHypothesisFeature() throws org.apache.thrift.TException
    {
      getCountForHypothesisFeature_result result = new getCountForHypothesisFeature_result();
      receiveBase(result, "getCountForHypothesisFeature");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCountForHypothesisFeature failed: unknown result");
    }

    public List<com._42six.amino.common.thrift.THypothesis> createNonPersistedHypothesisListForBucketValue(String datasourceid, String bucketid, List<String> bucketValues, Set<String> visibilities, String userid, String justification, List<String> featureIds, long timeout) throws org.apache.thrift.TException
    {
      send_createNonPersistedHypothesisListForBucketValue(datasourceid, bucketid, bucketValues, visibilities, userid, justification, featureIds, timeout);
      return recv_createNonPersistedHypothesisListForBucketValue();
    }

    public void send_createNonPersistedHypothesisListForBucketValue(String datasourceid, String bucketid, List<String> bucketValues, Set<String> visibilities, String userid, String justification, List<String> featureIds, long timeout) throws org.apache.thrift.TException
    {
      createNonPersistedHypothesisListForBucketValue_args args = new createNonPersistedHypothesisListForBucketValue_args();
      args.setDatasourceid(datasourceid);
      args.setBucketid(bucketid);
      args.setBucketValues(bucketValues);
      args.setVisibilities(visibilities);
      args.setUserid(userid);
      args.setJustification(justification);
      args.setFeatureIds(featureIds);
      args.setTimeout(timeout);
      sendBase("createNonPersistedHypothesisListForBucketValue", args);
    }

    public List<com._42six.amino.common.thrift.THypothesis> recv_createNonPersistedHypothesisListForBucketValue() throws org.apache.thrift.TException
    {
      createNonPersistedHypothesisListForBucketValue_result result = new createNonPersistedHypothesisListForBucketValue_result();
      receiveBase(result, "createNonPersistedHypothesisListForBucketValue");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createNonPersistedHypothesisListForBucketValue failed: unknown result");
    }

    public List<com._42six.amino.common.thrift.THypothesis> getHypothesesByBucketValues(com._42six.amino.common.thrift.TByValuesRequest bvRequest) throws org.apache.thrift.TException
    {
      send_getHypothesesByBucketValues(bvRequest);
      return recv_getHypothesesByBucketValues();
    }

    public void send_getHypothesesByBucketValues(com._42six.amino.common.thrift.TByValuesRequest bvRequest) throws org.apache.thrift.TException
    {
      getHypothesesByBucketValues_args args = new getHypothesesByBucketValues_args();
      args.setBvRequest(bvRequest);
      sendBase("getHypothesesByBucketValues", args);
    }

    public List<com._42six.amino.common.thrift.THypothesis> recv_getHypothesesByBucketValues() throws org.apache.thrift.TException
    {
      getHypothesesByBucketValues_result result = new getHypothesesByBucketValues_result();
      receiveBase(result, "getHypothesesByBucketValues");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getHypothesesByBucketValues failed: unknown result");
    }

    public double getUniqueness(String featureId, String bucketName, int count, Set<String> visibilities) throws org.apache.thrift.TException
    {
      send_getUniqueness(featureId, bucketName, count, visibilities);
      return recv_getUniqueness();
    }

    public void send_getUniqueness(String featureId, String bucketName, int count, Set<String> visibilities) throws org.apache.thrift.TException
    {
      getUniqueness_args args = new getUniqueness_args();
      args.setFeatureId(featureId);
      args.setBucketName(bucketName);
      args.setCount(count);
      args.setVisibilities(visibilities);
      sendBase("getUniqueness", args);
    }

    public double recv_getUniqueness() throws org.apache.thrift.TException
    {
      getUniqueness_result result = new getUniqueness_result();
      receiveBase(result, "getUniqueness");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getUniqueness failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void verifyGroupExists(String group, Set<String> visibilities, org.apache.thrift.async.AsyncMethodCallback<verifyGroupExists_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      verifyGroupExists_call method_call = new verifyGroupExists_call(group, visibilities, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class verifyGroupExists_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String group;
      private Set<String> visibilities;
      public verifyGroupExists_call(String group, Set<String> visibilities, org.apache.thrift.async.AsyncMethodCallback<verifyGroupExists_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.group = group;
        this.visibilities = visibilities;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("verifyGroupExists", org.apache.thrift.protocol.TMessageType.CALL, 0));
        verifyGroupExists_args args = new verifyGroupExists_args();
        args.setGroup(group);
        args.setVisibilities(visibilities);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_verifyGroupExists();
      }
    }

    public void verifyUserExists(String user, Set<String> visibilities, org.apache.thrift.async.AsyncMethodCallback<verifyUserExists_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      verifyUserExists_call method_call = new verifyUserExists_call(user, visibilities, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class verifyUserExists_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String user;
      private Set<String> visibilities;
      public verifyUserExists_call(String user, Set<String> visibilities, org.apache.thrift.async.AsyncMethodCallback<verifyUserExists_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.user = user;
        this.visibilities = visibilities;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("verifyUserExists", org.apache.thrift.protocol.TMessageType.CALL, 0));
        verifyUserExists_args args = new verifyUserExists_args();
        args.setUser(user);
        args.setVisibilities(visibilities);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_verifyUserExists();
      }
    }

    public void addToGroup(com._42six.amino.common.thrift.TAddUsersRequest request, org.apache.thrift.async.AsyncMethodCallback<addToGroup_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addToGroup_call method_call = new addToGroup_call(request, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addToGroup_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com._42six.amino.common.thrift.TAddUsersRequest request;
      public addToGroup_call(com._42six.amino.common.thrift.TAddUsersRequest request, org.apache.thrift.async.AsyncMethodCallback<addToGroup_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.request = request;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addToGroup", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addToGroup_args args = new addToGroup_args();
        args.setRequest(request);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_addToGroup();
      }
    }

    public void createGroup(com._42six.amino.common.thrift.TCreateGroupRequest request, org.apache.thrift.async.AsyncMethodCallback<createGroup_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createGroup_call method_call = new createGroup_call(request, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createGroup_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com._42six.amino.common.thrift.TCreateGroupRequest request;
      public createGroup_call(com._42six.amino.common.thrift.TCreateGroupRequest request, org.apache.thrift.async.AsyncMethodCallback<createGroup_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.request = request;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createGroup", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createGroup_args args = new createGroup_args();
        args.setRequest(request);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_createGroup();
      }
    }

    public void listGroups(String userId, Set<String> visibilities, org.apache.thrift.async.AsyncMethodCallback<listGroups_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listGroups_call method_call = new listGroups_call(userId, visibilities, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listGroups_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String userId;
      private Set<String> visibilities;
      public listGroups_call(String userId, Set<String> visibilities, org.apache.thrift.async.AsyncMethodCallback<listGroups_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
        this.visibilities = visibilities;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listGroups", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listGroups_args args = new listGroups_args();
        args.setUserId(userId);
        args.setVisibilities(visibilities);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Set<String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listGroups();
      }
    }

    public void getGroupsForUser(String userId, Set<String> visibilities, org.apache.thrift.async.AsyncMethodCallback<getGroupsForUser_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getGroupsForUser_call method_call = new getGroupsForUser_call(userId, visibilities, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getGroupsForUser_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String userId;
      private Set<String> visibilities;
      public getGroupsForUser_call(String userId, Set<String> visibilities, org.apache.thrift.async.AsyncMethodCallback<getGroupsForUser_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
        this.visibilities = visibilities;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getGroupsForUser", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getGroupsForUser_args args = new getGroupsForUser_args();
        args.setUserId(userId);
        args.setVisibilities(visibilities);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Set<String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getGroupsForUser();
      }
    }

    public void removeUserFromGroups(String requester, String userId, Set<String> groups, Set<String> visibilities, org.apache.thrift.async.AsyncMethodCallback<removeUserFromGroups_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      removeUserFromGroups_call method_call = new removeUserFromGroups_call(requester, userId, groups, visibilities, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class removeUserFromGroups_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String requester;
      private String userId;
      private Set<String> groups;
      private Set<String> visibilities;
      public removeUserFromGroups_call(String requester, String userId, Set<String> groups, Set<String> visibilities, org.apache.thrift.async.AsyncMethodCallback<removeUserFromGroups_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.requester = requester;
        this.userId = userId;
        this.groups = groups;
        this.visibilities = visibilities;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("removeUserFromGroups", org.apache.thrift.protocol.TMessageType.CALL, 0));
        removeUserFromGroups_args args = new removeUserFromGroups_args();
        args.setRequester(requester);
        args.setUserId(userId);
        args.setGroups(groups);
        args.setVisibilities(visibilities);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_removeUserFromGroups();
      }
    }

    public void removeUsersFromGroup(String requester, String group, Set<String> users, Set<String> visibilities, org.apache.thrift.async.AsyncMethodCallback<removeUsersFromGroup_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      removeUsersFromGroup_call method_call = new removeUsersFromGroup_call(requester, group, users, visibilities, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class removeUsersFromGroup_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String requester;
      private String group;
      private Set<String> users;
      private Set<String> visibilities;
      public removeUsersFromGroup_call(String requester, String group, Set<String> users, Set<String> visibilities, org.apache.thrift.async.AsyncMethodCallback<removeUsersFromGroup_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.requester = requester;
        this.group = group;
        this.users = users;
        this.visibilities = visibilities;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("removeUsersFromGroup", org.apache.thrift.protocol.TMessageType.CALL, 0));
        removeUsersFromGroup_args args = new removeUsersFromGroup_args();
        args.setRequester(requester);
        args.setGroup(group);
        args.setUsers(users);
        args.setVisibilities(visibilities);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_removeUsersFromGroup();
      }
    }

    public void getGroupHypothesesForUser(String userId, Set<String> visibilities, boolean userOwned, org.apache.thrift.async.AsyncMethodCallback<getGroupHypothesesForUser_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getGroupHypothesesForUser_call method_call = new getGroupHypothesesForUser_call(userId, visibilities, userOwned, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getGroupHypothesesForUser_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String userId;
      private Set<String> visibilities;
      private boolean userOwned;
      public getGroupHypothesesForUser_call(String userId, Set<String> visibilities, boolean userOwned, org.apache.thrift.async.AsyncMethodCallback<getGroupHypothesesForUser_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
        this.visibilities = visibilities;
        this.userOwned = userOwned;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getGroupHypothesesForUser", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getGroupHypothesesForUser_args args = new getGroupHypothesesForUser_args();
        args.setUserId(userId);
        args.setVisibilities(visibilities);
        args.setUserOwned(userOwned);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com._42six.amino.common.thrift.THypothesis> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getGroupHypothesesForUser();
      }
    }

    public void getGroup(String requester, String group, Set<String> visibilities, org.apache.thrift.async.AsyncMethodCallback<getGroup_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getGroup_call method_call = new getGroup_call(requester, group, visibilities, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getGroup_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String requester;
      private String group;
      private Set<String> visibilities;
      public getGroup_call(String requester, String group, Set<String> visibilities, org.apache.thrift.async.AsyncMethodCallback<getGroup_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.requester = requester;
        this.group = group;
        this.visibilities = visibilities;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getGroup", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getGroup_args args = new getGroup_args();
        args.setRequester(requester);
        args.setGroup(group);
        args.setVisibilities(visibilities);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com._42six.amino.common.thrift.TGroup getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getGroup();
      }
    }

    public void listDataSources(Set<String> visibilities, org.apache.thrift.async.AsyncMethodCallback<listDataSources_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listDataSources_call method_call = new listDataSources_call(visibilities, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listDataSources_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Set<String> visibilities;
      public listDataSources_call(Set<String> visibilities, org.apache.thrift.async.AsyncMethodCallback<listDataSources_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.visibilities = visibilities;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listDataSources", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listDataSources_args args = new listDataSources_args();
        args.setVisibilities(visibilities);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com._42six.amino.common.thrift.TDatasourceMetadata> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listDataSources();
      }
    }

    public void listFeatures(String datasourceId, Set<String> visibilities, org.apache.thrift.async.AsyncMethodCallback<listFeatures_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listFeatures_call method_call = new listFeatures_call(datasourceId, visibilities, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listFeatures_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String datasourceId;
      private Set<String> visibilities;
      public listFeatures_call(String datasourceId, Set<String> visibilities, org.apache.thrift.async.AsyncMethodCallback<listFeatures_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.datasourceId = datasourceId;
        this.visibilities = visibilities;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listFeatures", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listFeatures_args args = new listFeatures_args();
        args.setDatasourceId(datasourceId);
        args.setVisibilities(visibilities);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com._42six.amino.common.thrift.TFeatureMetadata> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listFeatures();
      }
    }

    public void listBuckets(String datasourceId, Set<String> visibilities, org.apache.thrift.async.AsyncMethodCallback<listBuckets_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listBuckets_call method_call = new listBuckets_call(datasourceId, visibilities, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listBuckets_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String datasourceId;
      private Set<String> visibilities;
      public listBuckets_call(String datasourceId, Set<String> visibilities, org.apache.thrift.async.AsyncMethodCallback<listBuckets_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.datasourceId = datasourceId;
        this.visibilities = visibilities;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listBuckets", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listBuckets_args args = new listBuckets_args();
        args.setDatasourceId(datasourceId);
        args.setVisibilities(visibilities);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com._42six.amino.common.thrift.TBucketMetadata> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listBuckets();
      }
    }

    public void getDataSource(String dataSourceId, Set<String> visibilities, org.apache.thrift.async.AsyncMethodCallback<getDataSource_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getDataSource_call method_call = new getDataSource_call(dataSourceId, visibilities, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getDataSource_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String dataSourceId;
      private Set<String> visibilities;
      public getDataSource_call(String dataSourceId, Set<String> visibilities, org.apache.thrift.async.AsyncMethodCallback<getDataSource_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.dataSourceId = dataSourceId;
        this.visibilities = visibilities;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getDataSource", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getDataSource_args args = new getDataSource_args();
        args.setDataSourceId(dataSourceId);
        args.setVisibilities(visibilities);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com._42six.amino.common.thrift.TDatasourceMetadata getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getDataSource();
      }
    }

    public void getFeature(String id, Set<String> visibilities, org.apache.thrift.async.AsyncMethodCallback<getFeature_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getFeature_call method_call = new getFeature_call(id, visibilities, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getFeature_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String id;
      private Set<String> visibilities;
      public getFeature_call(String id, Set<String> visibilities, org.apache.thrift.async.AsyncMethodCallback<getFeature_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
        this.visibilities = visibilities;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFeature", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getFeature_args args = new getFeature_args();
        args.setId(id);
        args.setVisibilities(visibilities);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com._42six.amino.common.thrift.TFeatureMetadata getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getFeature();
      }
    }

    public void getBucket(String id, Set<String> visibilities, org.apache.thrift.async.AsyncMethodCallback<getBucket_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getBucket_call method_call = new getBucket_call(id, visibilities, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getBucket_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String id;
      private Set<String> visibilities;
      public getBucket_call(String id, Set<String> visibilities, org.apache.thrift.async.AsyncMethodCallback<getBucket_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
        this.visibilities = visibilities;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getBucket", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getBucket_args args = new getBucket_args();
        args.setId(id);
        args.setVisibilities(visibilities);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com._42six.amino.common.thrift.TBucketMetadata getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getBucket();
      }
    }

    public void getHypothesis(String userId, String owner, String hypothesisId, Set<String> visibilities, org.apache.thrift.async.AsyncMethodCallback<getHypothesis_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getHypothesis_call method_call = new getHypothesis_call(userId, owner, hypothesisId, visibilities, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getHypothesis_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String userId;
      private String owner;
      private String hypothesisId;
      private Set<String> visibilities;
      public getHypothesis_call(String userId, String owner, String hypothesisId, Set<String> visibilities, org.apache.thrift.async.AsyncMethodCallback<getHypothesis_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
        this.owner = owner;
        this.hypothesisId = hypothesisId;
        this.visibilities = visibilities;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getHypothesis", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getHypothesis_args args = new getHypothesis_args();
        args.setUserId(userId);
        args.setOwner(owner);
        args.setHypothesisId(hypothesisId);
        args.setVisibilities(visibilities);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com._42six.amino.common.thrift.THypothesis getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getHypothesis();
      }
    }

    public void listHypotheses(String userId, Set<String> visibilities, org.apache.thrift.async.AsyncMethodCallback<listHypotheses_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listHypotheses_call method_call = new listHypotheses_call(userId, visibilities, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listHypotheses_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String userId;
      private Set<String> visibilities;
      public listHypotheses_call(String userId, Set<String> visibilities, org.apache.thrift.async.AsyncMethodCallback<listHypotheses_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
        this.visibilities = visibilities;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listHypotheses", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listHypotheses_args args = new listHypotheses_args();
        args.setUserId(userId);
        args.setVisibilities(visibilities);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com._42six.amino.common.thrift.THypothesis> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listHypotheses();
      }
    }

    public void createHypothesis(com._42six.amino.common.thrift.THypothesis hypothesis, String userId, Set<String> visibilities, org.apache.thrift.async.AsyncMethodCallback<createHypothesis_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createHypothesis_call method_call = new createHypothesis_call(hypothesis, userId, visibilities, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createHypothesis_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com._42six.amino.common.thrift.THypothesis hypothesis;
      private String userId;
      private Set<String> visibilities;
      public createHypothesis_call(com._42six.amino.common.thrift.THypothesis hypothesis, String userId, Set<String> visibilities, org.apache.thrift.async.AsyncMethodCallback<createHypothesis_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.hypothesis = hypothesis;
        this.userId = userId;
        this.visibilities = visibilities;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createHypothesis", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createHypothesis_args args = new createHypothesis_args();
        args.setHypothesis(hypothesis);
        args.setUserId(userId);
        args.setVisibilities(visibilities);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com._42six.amino.common.thrift.THypothesis getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createHypothesis();
      }
    }

    public void updateHypothesis(com._42six.amino.common.thrift.THypothesis hypothesis, String requester, Set<String> visibilities, org.apache.thrift.async.AsyncMethodCallback<updateHypothesis_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateHypothesis_call method_call = new updateHypothesis_call(hypothesis, requester, visibilities, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateHypothesis_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com._42six.amino.common.thrift.THypothesis hypothesis;
      private String requester;
      private Set<String> visibilities;
      public updateHypothesis_call(com._42six.amino.common.thrift.THypothesis hypothesis, String requester, Set<String> visibilities, org.apache.thrift.async.AsyncMethodCallback<updateHypothesis_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.hypothesis = hypothesis;
        this.requester = requester;
        this.visibilities = visibilities;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateHypothesis", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateHypothesis_args args = new updateHypothesis_args();
        args.setHypothesis(hypothesis);
        args.setRequester(requester);
        args.setVisibilities(visibilities);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com._42six.amino.common.thrift.THypothesis getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateHypothesis();
      }
    }

    public void deleteHypothesis(String owner, String id, Set<String> visibilities, org.apache.thrift.async.AsyncMethodCallback<deleteHypothesis_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteHypothesis_call method_call = new deleteHypothesis_call(owner, id, visibilities, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteHypothesis_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String owner;
      private String id;
      private Set<String> visibilities;
      public deleteHypothesis_call(String owner, String id, Set<String> visibilities, org.apache.thrift.async.AsyncMethodCallback<deleteHypothesis_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.owner = owner;
        this.id = id;
        this.visibilities = visibilities;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteHypothesis", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteHypothesis_args args = new deleteHypothesis_args();
        args.setOwner(owner);
        args.setId(id);
        args.setVisibilities(visibilities);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_deleteHypothesis();
      }
    }

    public void getShardCount(org.apache.thrift.async.AsyncMethodCallback<getShardCount_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getShardCount_call method_call = new getShardCount_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getShardCount_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getShardCount_call(org.apache.thrift.async.AsyncMethodCallback<getShardCount_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getShardCount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getShardCount_args args = new getShardCount_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getShardCount();
      }
    }

    public void getHashCount(org.apache.thrift.async.AsyncMethodCallback<getHashCount_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getHashCount_call method_call = new getHashCount_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getHashCount_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getHashCount_call(org.apache.thrift.async.AsyncMethodCallback<getHashCount_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getHashCount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getHashCount_args args = new getHashCount_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getHashCount();
      }
    }

    public void listResults(long start, long count, String userid, Set<String> visibilities, org.apache.thrift.async.AsyncMethodCallback<listResults_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listResults_call method_call = new listResults_call(start, count, userid, visibilities, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listResults_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long start;
      private long count;
      private String userid;
      private Set<String> visibilities;
      public listResults_call(long start, long count, String userid, Set<String> visibilities, org.apache.thrift.async.AsyncMethodCallback<listResults_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.start = start;
        this.count = count;
        this.userid = userid;
        this.visibilities = visibilities;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listResults", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listResults_args args = new listResults_args();
        args.setStart(start);
        args.setCount(count);
        args.setUserid(userid);
        args.setVisibilities(visibilities);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com._42six.amino.common.thrift.TQueryResult> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listResults();
      }
    }

    public void getResult(String requester, String owner, String id, Set<String> visibilities, org.apache.thrift.async.AsyncMethodCallback<getResult_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getResult_call method_call = new getResult_call(requester, owner, id, visibilities, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getResult_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String requester;
      private String owner;
      private String id;
      private Set<String> visibilities;
      public getResult_call(String requester, String owner, String id, Set<String> visibilities, org.apache.thrift.async.AsyncMethodCallback<getResult_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.requester = requester;
        this.owner = owner;
        this.id = id;
        this.visibilities = visibilities;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getResult", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getResult_args args = new getResult_args();
        args.setRequester(requester);
        args.setOwner(owner);
        args.setId(id);
        args.setVisibilities(visibilities);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com._42six.amino.common.thrift.TQueryResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getResult();
      }
    }

    public void createResult(String owner, String hypothesisId, int maxResults, String justification, String userid, Set<String> visibilities, org.apache.thrift.async.AsyncMethodCallback<createResult_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createResult_call method_call = new createResult_call(owner, hypothesisId, maxResults, justification, userid, visibilities, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createResult_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String owner;
      private String hypothesisId;
      private int maxResults;
      private String justification;
      private String userid;
      private Set<String> visibilities;
      public createResult_call(String owner, String hypothesisId, int maxResults, String justification, String userid, Set<String> visibilities, org.apache.thrift.async.AsyncMethodCallback<createResult_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.owner = owner;
        this.hypothesisId = hypothesisId;
        this.maxResults = maxResults;
        this.justification = justification;
        this.userid = userid;
        this.visibilities = visibilities;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createResult", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createResult_args args = new createResult_args();
        args.setOwner(owner);
        args.setHypothesisId(hypothesisId);
        args.setMaxResults(maxResults);
        args.setJustification(justification);
        args.setUserid(userid);
        args.setVisibilities(visibilities);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com._42six.amino.common.thrift.TQueryResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createResult();
      }
    }

    public void deleteResult(String owner, String id, Set<String> visibilities, org.apache.thrift.async.AsyncMethodCallback<deleteResult_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteResult_call method_call = new deleteResult_call(owner, id, visibilities, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteResult_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String owner;
      private String id;
      private Set<String> visibilities;
      public deleteResult_call(String owner, String id, Set<String> visibilities, org.apache.thrift.async.AsyncMethodCallback<deleteResult_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.owner = owner;
        this.id = id;
        this.visibilities = visibilities;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteResult", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteResult_args args = new deleteResult_args();
        args.setOwner(owner);
        args.setId(id);
        args.setVisibilities(visibilities);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_deleteResult();
      }
    }

    public void getCountForHypothesisFeature(String featureId, String bucketName, String beginRange, String endRange, Set<String> visibilities, org.apache.thrift.async.AsyncMethodCallback<getCountForHypothesisFeature_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getCountForHypothesisFeature_call method_call = new getCountForHypothesisFeature_call(featureId, bucketName, beginRange, endRange, visibilities, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getCountForHypothesisFeature_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String featureId;
      private String bucketName;
      private String beginRange;
      private String endRange;
      private Set<String> visibilities;
      public getCountForHypothesisFeature_call(String featureId, String bucketName, String beginRange, String endRange, Set<String> visibilities, org.apache.thrift.async.AsyncMethodCallback<getCountForHypothesisFeature_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.featureId = featureId;
        this.bucketName = bucketName;
        this.beginRange = beginRange;
        this.endRange = endRange;
        this.visibilities = visibilities;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCountForHypothesisFeature", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getCountForHypothesisFeature_args args = new getCountForHypothesisFeature_args();
        args.setFeatureId(featureId);
        args.setBucketName(bucketName);
        args.setBeginRange(beginRange);
        args.setEndRange(endRange);
        args.setVisibilities(visibilities);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getCountForHypothesisFeature();
      }
    }

    public void createNonPersistedHypothesisListForBucketValue(String datasourceid, String bucketid, List<String> bucketValues, Set<String> visibilities, String userid, String justification, List<String> featureIds, long timeout, org.apache.thrift.async.AsyncMethodCallback<createNonPersistedHypothesisListForBucketValue_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createNonPersistedHypothesisListForBucketValue_call method_call = new createNonPersistedHypothesisListForBucketValue_call(datasourceid, bucketid, bucketValues, visibilities, userid, justification, featureIds, timeout, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createNonPersistedHypothesisListForBucketValue_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String datasourceid;
      private String bucketid;
      private List<String> bucketValues;
      private Set<String> visibilities;
      private String userid;
      private String justification;
      private List<String> featureIds;
      private long timeout;
      public createNonPersistedHypothesisListForBucketValue_call(String datasourceid, String bucketid, List<String> bucketValues, Set<String> visibilities, String userid, String justification, List<String> featureIds, long timeout, org.apache.thrift.async.AsyncMethodCallback<createNonPersistedHypothesisListForBucketValue_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.datasourceid = datasourceid;
        this.bucketid = bucketid;
        this.bucketValues = bucketValues;
        this.visibilities = visibilities;
        this.userid = userid;
        this.justification = justification;
        this.featureIds = featureIds;
        this.timeout = timeout;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createNonPersistedHypothesisListForBucketValue", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createNonPersistedHypothesisListForBucketValue_args args = new createNonPersistedHypothesisListForBucketValue_args();
        args.setDatasourceid(datasourceid);
        args.setBucketid(bucketid);
        args.setBucketValues(bucketValues);
        args.setVisibilities(visibilities);
        args.setUserid(userid);
        args.setJustification(justification);
        args.setFeatureIds(featureIds);
        args.setTimeout(timeout);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com._42six.amino.common.thrift.THypothesis> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createNonPersistedHypothesisListForBucketValue();
      }
    }

    public void getHypothesesByBucketValues(com._42six.amino.common.thrift.TByValuesRequest bvRequest, org.apache.thrift.async.AsyncMethodCallback<getHypothesesByBucketValues_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getHypothesesByBucketValues_call method_call = new getHypothesesByBucketValues_call(bvRequest, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getHypothesesByBucketValues_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com._42six.amino.common.thrift.TByValuesRequest bvRequest;
      public getHypothesesByBucketValues_call(com._42six.amino.common.thrift.TByValuesRequest bvRequest, org.apache.thrift.async.AsyncMethodCallback<getHypothesesByBucketValues_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bvRequest = bvRequest;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getHypothesesByBucketValues", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getHypothesesByBucketValues_args args = new getHypothesesByBucketValues_args();
        args.setBvRequest(bvRequest);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com._42six.amino.common.thrift.THypothesis> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getHypothesesByBucketValues();
      }
    }

    public void getUniqueness(String featureId, String bucketName, int count, Set<String> visibilities, org.apache.thrift.async.AsyncMethodCallback<getUniqueness_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getUniqueness_call method_call = new getUniqueness_call(featureId, bucketName, count, visibilities, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getUniqueness_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String featureId;
      private String bucketName;
      private int count;
      private Set<String> visibilities;
      public getUniqueness_call(String featureId, String bucketName, int count, Set<String> visibilities, org.apache.thrift.async.AsyncMethodCallback<getUniqueness_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.featureId = featureId;
        this.bucketName = bucketName;
        this.count = count;
        this.visibilities = visibilities;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getUniqueness", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getUniqueness_args args = new getUniqueness_args();
        args.setFeatureId(featureId);
        args.setBucketName(bucketName);
        args.setCount(count);
        args.setVisibilities(visibilities);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public double getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getUniqueness();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("verifyGroupExists", new verifyGroupExists());
      processMap.put("verifyUserExists", new verifyUserExists());
      processMap.put("addToGroup", new addToGroup());
      processMap.put("createGroup", new createGroup());
      processMap.put("listGroups", new listGroups());
      processMap.put("getGroupsForUser", new getGroupsForUser());
      processMap.put("removeUserFromGroups", new removeUserFromGroups());
      processMap.put("removeUsersFromGroup", new removeUsersFromGroup());
      processMap.put("getGroupHypothesesForUser", new getGroupHypothesesForUser());
      processMap.put("getGroup", new getGroup());
      processMap.put("listDataSources", new listDataSources());
      processMap.put("listFeatures", new listFeatures());
      processMap.put("listBuckets", new listBuckets());
      processMap.put("getDataSource", new getDataSource());
      processMap.put("getFeature", new getFeature());
      processMap.put("getBucket", new getBucket());
      processMap.put("getHypothesis", new getHypothesis());
      processMap.put("listHypotheses", new listHypotheses());
      processMap.put("createHypothesis", new createHypothesis());
      processMap.put("updateHypothesis", new updateHypothesis());
      processMap.put("deleteHypothesis", new deleteHypothesis());
      processMap.put("getShardCount", new getShardCount());
      processMap.put("getHashCount", new getHashCount());
      processMap.put("listResults", new listResults());
      processMap.put("getResult", new getResult());
      processMap.put("createResult", new createResult());
      processMap.put("deleteResult", new deleteResult());
      processMap.put("getCountForHypothesisFeature", new getCountForHypothesisFeature());
      processMap.put("createNonPersistedHypothesisListForBucketValue", new createNonPersistedHypothesisListForBucketValue());
      processMap.put("getHypothesesByBucketValues", new getHypothesesByBucketValues());
      processMap.put("getUniqueness", new getUniqueness());
      return processMap;
    }

    public static class verifyGroupExists<I extends Iface> extends org.apache.thrift.ProcessFunction<I, verifyGroupExists_args> {
      public verifyGroupExists() {
        super("verifyGroupExists");
      }

      public verifyGroupExists_args getEmptyArgsInstance() {
        return new verifyGroupExists_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public verifyGroupExists_result getResult(I iface, verifyGroupExists_args args) throws org.apache.thrift.TException {
        verifyGroupExists_result result = new verifyGroupExists_result();
        result.success = iface.verifyGroupExists(args.group, args.visibilities);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class verifyUserExists<I extends Iface> extends org.apache.thrift.ProcessFunction<I, verifyUserExists_args> {
      public verifyUserExists() {
        super("verifyUserExists");
      }

      public verifyUserExists_args getEmptyArgsInstance() {
        return new verifyUserExists_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public verifyUserExists_result getResult(I iface, verifyUserExists_args args) throws org.apache.thrift.TException {
        verifyUserExists_result result = new verifyUserExists_result();
        result.success = iface.verifyUserExists(args.user, args.visibilities);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class addToGroup<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addToGroup_args> {
      public addToGroup() {
        super("addToGroup");
      }

      public addToGroup_args getEmptyArgsInstance() {
        return new addToGroup_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addToGroup_result getResult(I iface, addToGroup_args args) throws org.apache.thrift.TException {
        addToGroup_result result = new addToGroup_result();
        iface.addToGroup(args.request);
        return result;
      }
    }

    public static class createGroup<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createGroup_args> {
      public createGroup() {
        super("createGroup");
      }

      public createGroup_args getEmptyArgsInstance() {
        return new createGroup_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createGroup_result getResult(I iface, createGroup_args args) throws org.apache.thrift.TException {
        createGroup_result result = new createGroup_result();
        iface.createGroup(args.request);
        return result;
      }
    }

    public static class listGroups<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listGroups_args> {
      public listGroups() {
        super("listGroups");
      }

      public listGroups_args getEmptyArgsInstance() {
        return new listGroups_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public listGroups_result getResult(I iface, listGroups_args args) throws org.apache.thrift.TException {
        listGroups_result result = new listGroups_result();
        result.success = iface.listGroups(args.userId, args.visibilities);
        return result;
      }
    }

    public static class getGroupsForUser<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getGroupsForUser_args> {
      public getGroupsForUser() {
        super("getGroupsForUser");
      }

      public getGroupsForUser_args getEmptyArgsInstance() {
        return new getGroupsForUser_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getGroupsForUser_result getResult(I iface, getGroupsForUser_args args) throws org.apache.thrift.TException {
        getGroupsForUser_result result = new getGroupsForUser_result();
        result.success = iface.getGroupsForUser(args.userId, args.visibilities);
        return result;
      }
    }

    public static class removeUserFromGroups<I extends Iface> extends org.apache.thrift.ProcessFunction<I, removeUserFromGroups_args> {
      public removeUserFromGroups() {
        super("removeUserFromGroups");
      }

      public removeUserFromGroups_args getEmptyArgsInstance() {
        return new removeUserFromGroups_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public removeUserFromGroups_result getResult(I iface, removeUserFromGroups_args args) throws org.apache.thrift.TException {
        removeUserFromGroups_result result = new removeUserFromGroups_result();
        iface.removeUserFromGroups(args.requester, args.userId, args.groups, args.visibilities);
        return result;
      }
    }

    public static class removeUsersFromGroup<I extends Iface> extends org.apache.thrift.ProcessFunction<I, removeUsersFromGroup_args> {
      public removeUsersFromGroup() {
        super("removeUsersFromGroup");
      }

      public removeUsersFromGroup_args getEmptyArgsInstance() {
        return new removeUsersFromGroup_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public removeUsersFromGroup_result getResult(I iface, removeUsersFromGroup_args args) throws org.apache.thrift.TException {
        removeUsersFromGroup_result result = new removeUsersFromGroup_result();
        iface.removeUsersFromGroup(args.requester, args.group, args.users, args.visibilities);
        return result;
      }
    }

    public static class getGroupHypothesesForUser<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getGroupHypothesesForUser_args> {
      public getGroupHypothesesForUser() {
        super("getGroupHypothesesForUser");
      }

      public getGroupHypothesesForUser_args getEmptyArgsInstance() {
        return new getGroupHypothesesForUser_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getGroupHypothesesForUser_result getResult(I iface, getGroupHypothesesForUser_args args) throws org.apache.thrift.TException {
        getGroupHypothesesForUser_result result = new getGroupHypothesesForUser_result();
        result.success = iface.getGroupHypothesesForUser(args.userId, args.visibilities, args.userOwned);
        return result;
      }
    }

    public static class getGroup<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getGroup_args> {
      public getGroup() {
        super("getGroup");
      }

      public getGroup_args getEmptyArgsInstance() {
        return new getGroup_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getGroup_result getResult(I iface, getGroup_args args) throws org.apache.thrift.TException {
        getGroup_result result = new getGroup_result();
        result.success = iface.getGroup(args.requester, args.group, args.visibilities);
        return result;
      }
    }

    public static class listDataSources<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listDataSources_args> {
      public listDataSources() {
        super("listDataSources");
      }

      public listDataSources_args getEmptyArgsInstance() {
        return new listDataSources_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public listDataSources_result getResult(I iface, listDataSources_args args) throws org.apache.thrift.TException {
        listDataSources_result result = new listDataSources_result();
        result.success = iface.listDataSources(args.visibilities);
        return result;
      }
    }

    public static class listFeatures<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listFeatures_args> {
      public listFeatures() {
        super("listFeatures");
      }

      public listFeatures_args getEmptyArgsInstance() {
        return new listFeatures_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public listFeatures_result getResult(I iface, listFeatures_args args) throws org.apache.thrift.TException {
        listFeatures_result result = new listFeatures_result();
        result.success = iface.listFeatures(args.datasourceId, args.visibilities);
        return result;
      }
    }

    public static class listBuckets<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listBuckets_args> {
      public listBuckets() {
        super("listBuckets");
      }

      public listBuckets_args getEmptyArgsInstance() {
        return new listBuckets_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public listBuckets_result getResult(I iface, listBuckets_args args) throws org.apache.thrift.TException {
        listBuckets_result result = new listBuckets_result();
        result.success = iface.listBuckets(args.datasourceId, args.visibilities);
        return result;
      }
    }

    public static class getDataSource<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getDataSource_args> {
      public getDataSource() {
        super("getDataSource");
      }

      public getDataSource_args getEmptyArgsInstance() {
        return new getDataSource_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getDataSource_result getResult(I iface, getDataSource_args args) throws org.apache.thrift.TException {
        getDataSource_result result = new getDataSource_result();
        result.success = iface.getDataSource(args.dataSourceId, args.visibilities);
        return result;
      }
    }

    public static class getFeature<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getFeature_args> {
      public getFeature() {
        super("getFeature");
      }

      public getFeature_args getEmptyArgsInstance() {
        return new getFeature_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getFeature_result getResult(I iface, getFeature_args args) throws org.apache.thrift.TException {
        getFeature_result result = new getFeature_result();
        result.success = iface.getFeature(args.id, args.visibilities);
        return result;
      }
    }

    public static class getBucket<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getBucket_args> {
      public getBucket() {
        super("getBucket");
      }

      public getBucket_args getEmptyArgsInstance() {
        return new getBucket_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getBucket_result getResult(I iface, getBucket_args args) throws org.apache.thrift.TException {
        getBucket_result result = new getBucket_result();
        result.success = iface.getBucket(args.id, args.visibilities);
        return result;
      }
    }

    public static class getHypothesis<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getHypothesis_args> {
      public getHypothesis() {
        super("getHypothesis");
      }

      public getHypothesis_args getEmptyArgsInstance() {
        return new getHypothesis_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getHypothesis_result getResult(I iface, getHypothesis_args args) throws org.apache.thrift.TException {
        getHypothesis_result result = new getHypothesis_result();
        result.success = iface.getHypothesis(args.userId, args.owner, args.hypothesisId, args.visibilities);
        return result;
      }
    }

    public static class listHypotheses<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listHypotheses_args> {
      public listHypotheses() {
        super("listHypotheses");
      }

      public listHypotheses_args getEmptyArgsInstance() {
        return new listHypotheses_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public listHypotheses_result getResult(I iface, listHypotheses_args args) throws org.apache.thrift.TException {
        listHypotheses_result result = new listHypotheses_result();
        result.success = iface.listHypotheses(args.userId, args.visibilities);
        return result;
      }
    }

    public static class createHypothesis<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createHypothesis_args> {
      public createHypothesis() {
        super("createHypothesis");
      }

      public createHypothesis_args getEmptyArgsInstance() {
        return new createHypothesis_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createHypothesis_result getResult(I iface, createHypothesis_args args) throws org.apache.thrift.TException {
        createHypothesis_result result = new createHypothesis_result();
        result.success = iface.createHypothesis(args.hypothesis, args.userId, args.visibilities);
        return result;
      }
    }

    public static class updateHypothesis<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateHypothesis_args> {
      public updateHypothesis() {
        super("updateHypothesis");
      }

      public updateHypothesis_args getEmptyArgsInstance() {
        return new updateHypothesis_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateHypothesis_result getResult(I iface, updateHypothesis_args args) throws org.apache.thrift.TException {
        updateHypothesis_result result = new updateHypothesis_result();
        result.success = iface.updateHypothesis(args.hypothesis, args.requester, args.visibilities);
        return result;
      }
    }

    public static class deleteHypothesis<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteHypothesis_args> {
      public deleteHypothesis() {
        super("deleteHypothesis");
      }

      public deleteHypothesis_args getEmptyArgsInstance() {
        return new deleteHypothesis_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteHypothesis_result getResult(I iface, deleteHypothesis_args args) throws org.apache.thrift.TException {
        deleteHypothesis_result result = new deleteHypothesis_result();
        iface.deleteHypothesis(args.owner, args.id, args.visibilities);
        return result;
      }
    }

    public static class getShardCount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getShardCount_args> {
      public getShardCount() {
        super("getShardCount");
      }

      public getShardCount_args getEmptyArgsInstance() {
        return new getShardCount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getShardCount_result getResult(I iface, getShardCount_args args) throws org.apache.thrift.TException {
        getShardCount_result result = new getShardCount_result();
        result.success = iface.getShardCount();
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getHashCount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getHashCount_args> {
      public getHashCount() {
        super("getHashCount");
      }

      public getHashCount_args getEmptyArgsInstance() {
        return new getHashCount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getHashCount_result getResult(I iface, getHashCount_args args) throws org.apache.thrift.TException {
        getHashCount_result result = new getHashCount_result();
        result.success = iface.getHashCount();
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class listResults<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listResults_args> {
      public listResults() {
        super("listResults");
      }

      public listResults_args getEmptyArgsInstance() {
        return new listResults_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public listResults_result getResult(I iface, listResults_args args) throws org.apache.thrift.TException {
        listResults_result result = new listResults_result();
        result.success = iface.listResults(args.start, args.count, args.userid, args.visibilities);
        return result;
      }
    }

    public static class getResult<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getResult_args> {
      public getResult() {
        super("getResult");
      }

      public getResult_args getEmptyArgsInstance() {
        return new getResult_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getResult_result getResult(I iface, getResult_args args) throws org.apache.thrift.TException {
        getResult_result result = new getResult_result();
        result.success = iface.getResult(args.requester, args.owner, args.id, args.visibilities);
        return result;
      }
    }

    public static class createResult<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createResult_args> {
      public createResult() {
        super("createResult");
      }

      public createResult_args getEmptyArgsInstance() {
        return new createResult_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createResult_result getResult(I iface, createResult_args args) throws org.apache.thrift.TException {
        createResult_result result = new createResult_result();
        result.success = iface.createResult(args.owner, args.hypothesisId, args.maxResults, args.justification, args.userid, args.visibilities);
        return result;
      }
    }

    public static class deleteResult<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteResult_args> {
      public deleteResult() {
        super("deleteResult");
      }

      public deleteResult_args getEmptyArgsInstance() {
        return new deleteResult_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteResult_result getResult(I iface, deleteResult_args args) throws org.apache.thrift.TException {
        deleteResult_result result = new deleteResult_result();
        iface.deleteResult(args.owner, args.id, args.visibilities);
        return result;
      }
    }

    public static class getCountForHypothesisFeature<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCountForHypothesisFeature_args> {
      public getCountForHypothesisFeature() {
        super("getCountForHypothesisFeature");
      }

      public getCountForHypothesisFeature_args getEmptyArgsInstance() {
        return new getCountForHypothesisFeature_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getCountForHypothesisFeature_result getResult(I iface, getCountForHypothesisFeature_args args) throws org.apache.thrift.TException {
        getCountForHypothesisFeature_result result = new getCountForHypothesisFeature_result();
        result.success = iface.getCountForHypothesisFeature(args.featureId, args.bucketName, args.beginRange, args.endRange, args.visibilities);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class createNonPersistedHypothesisListForBucketValue<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createNonPersistedHypothesisListForBucketValue_args> {
      public createNonPersistedHypothesisListForBucketValue() {
        super("createNonPersistedHypothesisListForBucketValue");
      }

      public createNonPersistedHypothesisListForBucketValue_args getEmptyArgsInstance() {
        return new createNonPersistedHypothesisListForBucketValue_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createNonPersistedHypothesisListForBucketValue_result getResult(I iface, createNonPersistedHypothesisListForBucketValue_args args) throws org.apache.thrift.TException {
        createNonPersistedHypothesisListForBucketValue_result result = new createNonPersistedHypothesisListForBucketValue_result();
        result.success = iface.createNonPersistedHypothesisListForBucketValue(args.datasourceid, args.bucketid, args.bucketValues, args.visibilities, args.userid, args.justification, args.featureIds, args.timeout);
        return result;
      }
    }

    public static class getHypothesesByBucketValues<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getHypothesesByBucketValues_args> {
      public getHypothesesByBucketValues() {
        super("getHypothesesByBucketValues");
      }

      public getHypothesesByBucketValues_args getEmptyArgsInstance() {
        return new getHypothesesByBucketValues_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getHypothesesByBucketValues_result getResult(I iface, getHypothesesByBucketValues_args args) throws org.apache.thrift.TException {
        getHypothesesByBucketValues_result result = new getHypothesesByBucketValues_result();
        result.success = iface.getHypothesesByBucketValues(args.bvRequest);
        return result;
      }
    }

    public static class getUniqueness<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getUniqueness_args> {
      public getUniqueness() {
        super("getUniqueness");
      }

      public getUniqueness_args getEmptyArgsInstance() {
        return new getUniqueness_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getUniqueness_result getResult(I iface, getUniqueness_args args) throws org.apache.thrift.TException {
        getUniqueness_result result = new getUniqueness_result();
        result.success = iface.getUniqueness(args.featureId, args.bucketName, args.count, args.visibilities);
        result.setSuccessIsSet(true);
        return result;
      }
    }

  }

  public static class verifyGroupExists_args implements org.apache.thrift.TBase<verifyGroupExists_args, verifyGroupExists_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("verifyGroupExists_args");

    private static final org.apache.thrift.protocol.TField GROUP_FIELD_DESC = new org.apache.thrift.protocol.TField("group", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField VISIBILITIES_FIELD_DESC = new org.apache.thrift.protocol.TField("visibilities", org.apache.thrift.protocol.TType.SET, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new verifyGroupExists_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new verifyGroupExists_argsTupleSchemeFactory());
    }

    public String group; // required
    public Set<String> visibilities; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      GROUP((short)1, "group"),
      VISIBILITIES((short)2, "visibilities");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // GROUP
            return GROUP;
          case 2: // VISIBILITIES
            return VISIBILITIES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.GROUP, new org.apache.thrift.meta_data.FieldMetaData("group", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.VISIBILITIES, new org.apache.thrift.meta_data.FieldMetaData("visibilities", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(verifyGroupExists_args.class, metaDataMap);
    }

    public verifyGroupExists_args() {
    }

    public verifyGroupExists_args(
      String group,
      Set<String> visibilities)
    {
      this();
      this.group = group;
      this.visibilities = visibilities;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public verifyGroupExists_args(verifyGroupExists_args other) {
      if (other.isSetGroup()) {
        this.group = other.group;
      }
      if (other.isSetVisibilities()) {
        Set<String> __this__visibilities = new HashSet<String>();
        for (String other_element : other.visibilities) {
          __this__visibilities.add(other_element);
        }
        this.visibilities = __this__visibilities;
      }
    }

    public verifyGroupExists_args deepCopy() {
      return new verifyGroupExists_args(this);
    }

    @Override
    public void clear() {
      this.group = null;
      this.visibilities = null;
    }

    public String getGroup() {
      return this.group;
    }

    public verifyGroupExists_args setGroup(String group) {
      this.group = group;
      return this;
    }

    public void unsetGroup() {
      this.group = null;
    }

    /** Returns true if field group is set (has been assigned a value) and false otherwise */
    public boolean isSetGroup() {
      return this.group != null;
    }

    public void setGroupIsSet(boolean value) {
      if (!value) {
        this.group = null;
      }
    }

    public int getVisibilitiesSize() {
      return (this.visibilities == null) ? 0 : this.visibilities.size();
    }

    public java.util.Iterator<String> getVisibilitiesIterator() {
      return (this.visibilities == null) ? null : this.visibilities.iterator();
    }

    public void addToVisibilities(String elem) {
      if (this.visibilities == null) {
        this.visibilities = new HashSet<String>();
      }
      this.visibilities.add(elem);
    }

    public Set<String> getVisibilities() {
      return this.visibilities;
    }

    public verifyGroupExists_args setVisibilities(Set<String> visibilities) {
      this.visibilities = visibilities;
      return this;
    }

    public void unsetVisibilities() {
      this.visibilities = null;
    }

    /** Returns true if field visibilities is set (has been assigned a value) and false otherwise */
    public boolean isSetVisibilities() {
      return this.visibilities != null;
    }

    public void setVisibilitiesIsSet(boolean value) {
      if (!value) {
        this.visibilities = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case GROUP:
        if (value == null) {
          unsetGroup();
        } else {
          setGroup((String)value);
        }
        break;

      case VISIBILITIES:
        if (value == null) {
          unsetVisibilities();
        } else {
          setVisibilities((Set<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case GROUP:
        return getGroup();

      case VISIBILITIES:
        return getVisibilities();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case GROUP:
        return isSetGroup();
      case VISIBILITIES:
        return isSetVisibilities();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof verifyGroupExists_args)
        return this.equals((verifyGroupExists_args)that);
      return false;
    }

    public boolean equals(verifyGroupExists_args that) {
      if (that == null)
        return false;

      boolean this_present_group = true && this.isSetGroup();
      boolean that_present_group = true && that.isSetGroup();
      if (this_present_group || that_present_group) {
        if (!(this_present_group && that_present_group))
          return false;
        if (!this.group.equals(that.group))
          return false;
      }

      boolean this_present_visibilities = true && this.isSetVisibilities();
      boolean that_present_visibilities = true && that.isSetVisibilities();
      if (this_present_visibilities || that_present_visibilities) {
        if (!(this_present_visibilities && that_present_visibilities))
          return false;
        if (!this.visibilities.equals(that.visibilities))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(verifyGroupExists_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      verifyGroupExists_args typedOther = (verifyGroupExists_args)other;

      lastComparison = Boolean.valueOf(isSetGroup()).compareTo(typedOther.isSetGroup());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGroup()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.group, typedOther.group);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVisibilities()).compareTo(typedOther.isSetVisibilities());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVisibilities()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.visibilities, typedOther.visibilities);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("verifyGroupExists_args(");
      boolean first = true;

      sb.append("group:");
      if (this.group == null) {
        sb.append("null");
      } else {
        sb.append(this.group);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("visibilities:");
      if (this.visibilities == null) {
        sb.append("null");
      } else {
        sb.append(this.visibilities);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class verifyGroupExists_argsStandardSchemeFactory implements SchemeFactory {
      public verifyGroupExists_argsStandardScheme getScheme() {
        return new verifyGroupExists_argsStandardScheme();
      }
    }

    private static class verifyGroupExists_argsStandardScheme extends StandardScheme<verifyGroupExists_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, verifyGroupExists_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // GROUP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.group = iprot.readString();
                struct.setGroupIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VISIBILITIES
              if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                {
                  org.apache.thrift.protocol.TSet _set0 = iprot.readSetBegin();
                  struct.visibilities = new HashSet<String>(2*_set0.size);
                  for (int _i1 = 0; _i1 < _set0.size; ++_i1)
                  {
                    String _elem2; // required
                    _elem2 = iprot.readString();
                    struct.visibilities.add(_elem2);
                  }
                  iprot.readSetEnd();
                }
                struct.setVisibilitiesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, verifyGroupExists_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.group != null) {
          oprot.writeFieldBegin(GROUP_FIELD_DESC);
          oprot.writeString(struct.group);
          oprot.writeFieldEnd();
        }
        if (struct.visibilities != null) {
          oprot.writeFieldBegin(VISIBILITIES_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.visibilities.size()));
            for (String _iter3 : struct.visibilities)
            {
              oprot.writeString(_iter3);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class verifyGroupExists_argsTupleSchemeFactory implements SchemeFactory {
      public verifyGroupExists_argsTupleScheme getScheme() {
        return new verifyGroupExists_argsTupleScheme();
      }
    }

    private static class verifyGroupExists_argsTupleScheme extends TupleScheme<verifyGroupExists_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, verifyGroupExists_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetGroup()) {
          optionals.set(0);
        }
        if (struct.isSetVisibilities()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetGroup()) {
          oprot.writeString(struct.group);
        }
        if (struct.isSetVisibilities()) {
          {
            oprot.writeI32(struct.visibilities.size());
            for (String _iter4 : struct.visibilities)
            {
              oprot.writeString(_iter4);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, verifyGroupExists_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.group = iprot.readString();
          struct.setGroupIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TSet _set5 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.visibilities = new HashSet<String>(2*_set5.size);
            for (int _i6 = 0; _i6 < _set5.size; ++_i6)
            {
              String _elem7; // required
              _elem7 = iprot.readString();
              struct.visibilities.add(_elem7);
            }
          }
          struct.setVisibilitiesIsSet(true);
        }
      }
    }

  }

  public static class verifyGroupExists_result implements org.apache.thrift.TBase<verifyGroupExists_result, verifyGroupExists_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("verifyGroupExists_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new verifyGroupExists_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new verifyGroupExists_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(verifyGroupExists_result.class, metaDataMap);
    }

    public verifyGroupExists_result() {
    }

    public verifyGroupExists_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public verifyGroupExists_result(verifyGroupExists_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public verifyGroupExists_result deepCopy() {
      return new verifyGroupExists_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public verifyGroupExists_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof verifyGroupExists_result)
        return this.equals((verifyGroupExists_result)that);
      return false;
    }

    public boolean equals(verifyGroupExists_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(verifyGroupExists_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      verifyGroupExists_result typedOther = (verifyGroupExists_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("verifyGroupExists_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class verifyGroupExists_resultStandardSchemeFactory implements SchemeFactory {
      public verifyGroupExists_resultStandardScheme getScheme() {
        return new verifyGroupExists_resultStandardScheme();
      }
    }

    private static class verifyGroupExists_resultStandardScheme extends StandardScheme<verifyGroupExists_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, verifyGroupExists_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, verifyGroupExists_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class verifyGroupExists_resultTupleSchemeFactory implements SchemeFactory {
      public verifyGroupExists_resultTupleScheme getScheme() {
        return new verifyGroupExists_resultTupleScheme();
      }
    }

    private static class verifyGroupExists_resultTupleScheme extends TupleScheme<verifyGroupExists_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, verifyGroupExists_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, verifyGroupExists_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class verifyUserExists_args implements org.apache.thrift.TBase<verifyUserExists_args, verifyUserExists_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("verifyUserExists_args");

    private static final org.apache.thrift.protocol.TField USER_FIELD_DESC = new org.apache.thrift.protocol.TField("user", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField VISIBILITIES_FIELD_DESC = new org.apache.thrift.protocol.TField("visibilities", org.apache.thrift.protocol.TType.SET, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new verifyUserExists_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new verifyUserExists_argsTupleSchemeFactory());
    }

    public String user; // required
    public Set<String> visibilities; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER((short)1, "user"),
      VISIBILITIES((short)2, "visibilities");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER
            return USER;
          case 2: // VISIBILITIES
            return VISIBILITIES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER, new org.apache.thrift.meta_data.FieldMetaData("user", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.VISIBILITIES, new org.apache.thrift.meta_data.FieldMetaData("visibilities", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(verifyUserExists_args.class, metaDataMap);
    }

    public verifyUserExists_args() {
    }

    public verifyUserExists_args(
      String user,
      Set<String> visibilities)
    {
      this();
      this.user = user;
      this.visibilities = visibilities;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public verifyUserExists_args(verifyUserExists_args other) {
      if (other.isSetUser()) {
        this.user = other.user;
      }
      if (other.isSetVisibilities()) {
        Set<String> __this__visibilities = new HashSet<String>();
        for (String other_element : other.visibilities) {
          __this__visibilities.add(other_element);
        }
        this.visibilities = __this__visibilities;
      }
    }

    public verifyUserExists_args deepCopy() {
      return new verifyUserExists_args(this);
    }

    @Override
    public void clear() {
      this.user = null;
      this.visibilities = null;
    }

    public String getUser() {
      return this.user;
    }

    public verifyUserExists_args setUser(String user) {
      this.user = user;
      return this;
    }

    public void unsetUser() {
      this.user = null;
    }

    /** Returns true if field user is set (has been assigned a value) and false otherwise */
    public boolean isSetUser() {
      return this.user != null;
    }

    public void setUserIsSet(boolean value) {
      if (!value) {
        this.user = null;
      }
    }

    public int getVisibilitiesSize() {
      return (this.visibilities == null) ? 0 : this.visibilities.size();
    }

    public java.util.Iterator<String> getVisibilitiesIterator() {
      return (this.visibilities == null) ? null : this.visibilities.iterator();
    }

    public void addToVisibilities(String elem) {
      if (this.visibilities == null) {
        this.visibilities = new HashSet<String>();
      }
      this.visibilities.add(elem);
    }

    public Set<String> getVisibilities() {
      return this.visibilities;
    }

    public verifyUserExists_args setVisibilities(Set<String> visibilities) {
      this.visibilities = visibilities;
      return this;
    }

    public void unsetVisibilities() {
      this.visibilities = null;
    }

    /** Returns true if field visibilities is set (has been assigned a value) and false otherwise */
    public boolean isSetVisibilities() {
      return this.visibilities != null;
    }

    public void setVisibilitiesIsSet(boolean value) {
      if (!value) {
        this.visibilities = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER:
        if (value == null) {
          unsetUser();
        } else {
          setUser((String)value);
        }
        break;

      case VISIBILITIES:
        if (value == null) {
          unsetVisibilities();
        } else {
          setVisibilities((Set<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER:
        return getUser();

      case VISIBILITIES:
        return getVisibilities();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER:
        return isSetUser();
      case VISIBILITIES:
        return isSetVisibilities();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof verifyUserExists_args)
        return this.equals((verifyUserExists_args)that);
      return false;
    }

    public boolean equals(verifyUserExists_args that) {
      if (that == null)
        return false;

      boolean this_present_user = true && this.isSetUser();
      boolean that_present_user = true && that.isSetUser();
      if (this_present_user || that_present_user) {
        if (!(this_present_user && that_present_user))
          return false;
        if (!this.user.equals(that.user))
          return false;
      }

      boolean this_present_visibilities = true && this.isSetVisibilities();
      boolean that_present_visibilities = true && that.isSetVisibilities();
      if (this_present_visibilities || that_present_visibilities) {
        if (!(this_present_visibilities && that_present_visibilities))
          return false;
        if (!this.visibilities.equals(that.visibilities))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(verifyUserExists_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      verifyUserExists_args typedOther = (verifyUserExists_args)other;

      lastComparison = Boolean.valueOf(isSetUser()).compareTo(typedOther.isSetUser());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user, typedOther.user);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVisibilities()).compareTo(typedOther.isSetVisibilities());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVisibilities()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.visibilities, typedOther.visibilities);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("verifyUserExists_args(");
      boolean first = true;

      sb.append("user:");
      if (this.user == null) {
        sb.append("null");
      } else {
        sb.append(this.user);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("visibilities:");
      if (this.visibilities == null) {
        sb.append("null");
      } else {
        sb.append(this.visibilities);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class verifyUserExists_argsStandardSchemeFactory implements SchemeFactory {
      public verifyUserExists_argsStandardScheme getScheme() {
        return new verifyUserExists_argsStandardScheme();
      }
    }

    private static class verifyUserExists_argsStandardScheme extends StandardScheme<verifyUserExists_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, verifyUserExists_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.user = iprot.readString();
                struct.setUserIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VISIBILITIES
              if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                {
                  org.apache.thrift.protocol.TSet _set8 = iprot.readSetBegin();
                  struct.visibilities = new HashSet<String>(2*_set8.size);
                  for (int _i9 = 0; _i9 < _set8.size; ++_i9)
                  {
                    String _elem10; // required
                    _elem10 = iprot.readString();
                    struct.visibilities.add(_elem10);
                  }
                  iprot.readSetEnd();
                }
                struct.setVisibilitiesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, verifyUserExists_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.user != null) {
          oprot.writeFieldBegin(USER_FIELD_DESC);
          oprot.writeString(struct.user);
          oprot.writeFieldEnd();
        }
        if (struct.visibilities != null) {
          oprot.writeFieldBegin(VISIBILITIES_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.visibilities.size()));
            for (String _iter11 : struct.visibilities)
            {
              oprot.writeString(_iter11);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class verifyUserExists_argsTupleSchemeFactory implements SchemeFactory {
      public verifyUserExists_argsTupleScheme getScheme() {
        return new verifyUserExists_argsTupleScheme();
      }
    }

    private static class verifyUserExists_argsTupleScheme extends TupleScheme<verifyUserExists_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, verifyUserExists_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUser()) {
          optionals.set(0);
        }
        if (struct.isSetVisibilities()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUser()) {
          oprot.writeString(struct.user);
        }
        if (struct.isSetVisibilities()) {
          {
            oprot.writeI32(struct.visibilities.size());
            for (String _iter12 : struct.visibilities)
            {
              oprot.writeString(_iter12);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, verifyUserExists_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.user = iprot.readString();
          struct.setUserIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TSet _set13 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.visibilities = new HashSet<String>(2*_set13.size);
            for (int _i14 = 0; _i14 < _set13.size; ++_i14)
            {
              String _elem15; // required
              _elem15 = iprot.readString();
              struct.visibilities.add(_elem15);
            }
          }
          struct.setVisibilitiesIsSet(true);
        }
      }
    }

  }

  public static class verifyUserExists_result implements org.apache.thrift.TBase<verifyUserExists_result, verifyUserExists_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("verifyUserExists_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new verifyUserExists_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new verifyUserExists_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(verifyUserExists_result.class, metaDataMap);
    }

    public verifyUserExists_result() {
    }

    public verifyUserExists_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public verifyUserExists_result(verifyUserExists_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public verifyUserExists_result deepCopy() {
      return new verifyUserExists_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public verifyUserExists_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof verifyUserExists_result)
        return this.equals((verifyUserExists_result)that);
      return false;
    }

    public boolean equals(verifyUserExists_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(verifyUserExists_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      verifyUserExists_result typedOther = (verifyUserExists_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("verifyUserExists_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class verifyUserExists_resultStandardSchemeFactory implements SchemeFactory {
      public verifyUserExists_resultStandardScheme getScheme() {
        return new verifyUserExists_resultStandardScheme();
      }
    }

    private static class verifyUserExists_resultStandardScheme extends StandardScheme<verifyUserExists_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, verifyUserExists_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, verifyUserExists_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class verifyUserExists_resultTupleSchemeFactory implements SchemeFactory {
      public verifyUserExists_resultTupleScheme getScheme() {
        return new verifyUserExists_resultTupleScheme();
      }
    }

    private static class verifyUserExists_resultTupleScheme extends TupleScheme<verifyUserExists_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, verifyUserExists_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, verifyUserExists_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addToGroup_args implements org.apache.thrift.TBase<addToGroup_args, addToGroup_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addToGroup_args");

    private static final org.apache.thrift.protocol.TField REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("request", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addToGroup_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addToGroup_argsTupleSchemeFactory());
    }

    public com._42six.amino.common.thrift.TAddUsersRequest request; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST((short)1, "request");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST
            return REQUEST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST, new org.apache.thrift.meta_data.FieldMetaData("request", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com._42six.amino.common.thrift.TAddUsersRequest.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addToGroup_args.class, metaDataMap);
    }

    public addToGroup_args() {
    }

    public addToGroup_args(
      com._42six.amino.common.thrift.TAddUsersRequest request)
    {
      this();
      this.request = request;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addToGroup_args(addToGroup_args other) {
      if (other.isSetRequest()) {
        this.request = new com._42six.amino.common.thrift.TAddUsersRequest(other.request);
      }
    }

    public addToGroup_args deepCopy() {
      return new addToGroup_args(this);
    }

    @Override
    public void clear() {
      this.request = null;
    }

    public com._42six.amino.common.thrift.TAddUsersRequest getRequest() {
      return this.request;
    }

    public addToGroup_args setRequest(com._42six.amino.common.thrift.TAddUsersRequest request) {
      this.request = request;
      return this;
    }

    public void unsetRequest() {
      this.request = null;
    }

    /** Returns true if field request is set (has been assigned a value) and false otherwise */
    public boolean isSetRequest() {
      return this.request != null;
    }

    public void setRequestIsSet(boolean value) {
      if (!value) {
        this.request = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUEST:
        if (value == null) {
          unsetRequest();
        } else {
          setRequest((com._42six.amino.common.thrift.TAddUsersRequest)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST:
        return getRequest();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUEST:
        return isSetRequest();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addToGroup_args)
        return this.equals((addToGroup_args)that);
      return false;
    }

    public boolean equals(addToGroup_args that) {
      if (that == null)
        return false;

      boolean this_present_request = true && this.isSetRequest();
      boolean that_present_request = true && that.isSetRequest();
      if (this_present_request || that_present_request) {
        if (!(this_present_request && that_present_request))
          return false;
        if (!this.request.equals(that.request))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addToGroup_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addToGroup_args typedOther = (addToGroup_args)other;

      lastComparison = Boolean.valueOf(isSetRequest()).compareTo(typedOther.isSetRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.request, typedOther.request);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addToGroup_args(");
      boolean first = true;

      sb.append("request:");
      if (this.request == null) {
        sb.append("null");
      } else {
        sb.append(this.request);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (request != null) {
        request.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addToGroup_argsStandardSchemeFactory implements SchemeFactory {
      public addToGroup_argsStandardScheme getScheme() {
        return new addToGroup_argsStandardScheme();
      }
    }

    private static class addToGroup_argsStandardScheme extends StandardScheme<addToGroup_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addToGroup_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.request = new com._42six.amino.common.thrift.TAddUsersRequest();
                struct.request.read(iprot);
                struct.setRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addToGroup_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.request != null) {
          oprot.writeFieldBegin(REQUEST_FIELD_DESC);
          struct.request.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addToGroup_argsTupleSchemeFactory implements SchemeFactory {
      public addToGroup_argsTupleScheme getScheme() {
        return new addToGroup_argsTupleScheme();
      }
    }

    private static class addToGroup_argsTupleScheme extends TupleScheme<addToGroup_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addToGroup_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequest()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRequest()) {
          struct.request.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addToGroup_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.request = new com._42six.amino.common.thrift.TAddUsersRequest();
          struct.request.read(iprot);
          struct.setRequestIsSet(true);
        }
      }
    }

  }

  public static class addToGroup_result implements org.apache.thrift.TBase<addToGroup_result, addToGroup_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addToGroup_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addToGroup_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addToGroup_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addToGroup_result.class, metaDataMap);
    }

    public addToGroup_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addToGroup_result(addToGroup_result other) {
    }

    public addToGroup_result deepCopy() {
      return new addToGroup_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addToGroup_result)
        return this.equals((addToGroup_result)that);
      return false;
    }

    public boolean equals(addToGroup_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addToGroup_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addToGroup_result typedOther = (addToGroup_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addToGroup_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addToGroup_resultStandardSchemeFactory implements SchemeFactory {
      public addToGroup_resultStandardScheme getScheme() {
        return new addToGroup_resultStandardScheme();
      }
    }

    private static class addToGroup_resultStandardScheme extends StandardScheme<addToGroup_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addToGroup_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addToGroup_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addToGroup_resultTupleSchemeFactory implements SchemeFactory {
      public addToGroup_resultTupleScheme getScheme() {
        return new addToGroup_resultTupleScheme();
      }
    }

    private static class addToGroup_resultTupleScheme extends TupleScheme<addToGroup_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addToGroup_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addToGroup_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class createGroup_args implements org.apache.thrift.TBase<createGroup_args, createGroup_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createGroup_args");

    private static final org.apache.thrift.protocol.TField REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("request", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createGroup_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createGroup_argsTupleSchemeFactory());
    }

    public com._42six.amino.common.thrift.TCreateGroupRequest request; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST((short)1, "request");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST
            return REQUEST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST, new org.apache.thrift.meta_data.FieldMetaData("request", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com._42six.amino.common.thrift.TCreateGroupRequest.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createGroup_args.class, metaDataMap);
    }

    public createGroup_args() {
    }

    public createGroup_args(
      com._42six.amino.common.thrift.TCreateGroupRequest request)
    {
      this();
      this.request = request;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createGroup_args(createGroup_args other) {
      if (other.isSetRequest()) {
        this.request = new com._42six.amino.common.thrift.TCreateGroupRequest(other.request);
      }
    }

    public createGroup_args deepCopy() {
      return new createGroup_args(this);
    }

    @Override
    public void clear() {
      this.request = null;
    }

    public com._42six.amino.common.thrift.TCreateGroupRequest getRequest() {
      return this.request;
    }

    public createGroup_args setRequest(com._42six.amino.common.thrift.TCreateGroupRequest request) {
      this.request = request;
      return this;
    }

    public void unsetRequest() {
      this.request = null;
    }

    /** Returns true if field request is set (has been assigned a value) and false otherwise */
    public boolean isSetRequest() {
      return this.request != null;
    }

    public void setRequestIsSet(boolean value) {
      if (!value) {
        this.request = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUEST:
        if (value == null) {
          unsetRequest();
        } else {
          setRequest((com._42six.amino.common.thrift.TCreateGroupRequest)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST:
        return getRequest();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUEST:
        return isSetRequest();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createGroup_args)
        return this.equals((createGroup_args)that);
      return false;
    }

    public boolean equals(createGroup_args that) {
      if (that == null)
        return false;

      boolean this_present_request = true && this.isSetRequest();
      boolean that_present_request = true && that.isSetRequest();
      if (this_present_request || that_present_request) {
        if (!(this_present_request && that_present_request))
          return false;
        if (!this.request.equals(that.request))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(createGroup_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      createGroup_args typedOther = (createGroup_args)other;

      lastComparison = Boolean.valueOf(isSetRequest()).compareTo(typedOther.isSetRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.request, typedOther.request);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createGroup_args(");
      boolean first = true;

      sb.append("request:");
      if (this.request == null) {
        sb.append("null");
      } else {
        sb.append(this.request);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (request != null) {
        request.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createGroup_argsStandardSchemeFactory implements SchemeFactory {
      public createGroup_argsStandardScheme getScheme() {
        return new createGroup_argsStandardScheme();
      }
    }

    private static class createGroup_argsStandardScheme extends StandardScheme<createGroup_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createGroup_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.request = new com._42six.amino.common.thrift.TCreateGroupRequest();
                struct.request.read(iprot);
                struct.setRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createGroup_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.request != null) {
          oprot.writeFieldBegin(REQUEST_FIELD_DESC);
          struct.request.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createGroup_argsTupleSchemeFactory implements SchemeFactory {
      public createGroup_argsTupleScheme getScheme() {
        return new createGroup_argsTupleScheme();
      }
    }

    private static class createGroup_argsTupleScheme extends TupleScheme<createGroup_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createGroup_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequest()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRequest()) {
          struct.request.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createGroup_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.request = new com._42six.amino.common.thrift.TCreateGroupRequest();
          struct.request.read(iprot);
          struct.setRequestIsSet(true);
        }
      }
    }

  }

  public static class createGroup_result implements org.apache.thrift.TBase<createGroup_result, createGroup_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createGroup_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createGroup_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createGroup_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createGroup_result.class, metaDataMap);
    }

    public createGroup_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createGroup_result(createGroup_result other) {
    }

    public createGroup_result deepCopy() {
      return new createGroup_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createGroup_result)
        return this.equals((createGroup_result)that);
      return false;
    }

    public boolean equals(createGroup_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(createGroup_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      createGroup_result typedOther = (createGroup_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createGroup_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createGroup_resultStandardSchemeFactory implements SchemeFactory {
      public createGroup_resultStandardScheme getScheme() {
        return new createGroup_resultStandardScheme();
      }
    }

    private static class createGroup_resultStandardScheme extends StandardScheme<createGroup_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createGroup_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createGroup_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createGroup_resultTupleSchemeFactory implements SchemeFactory {
      public createGroup_resultTupleScheme getScheme() {
        return new createGroup_resultTupleScheme();
      }
    }

    private static class createGroup_resultTupleScheme extends TupleScheme<createGroup_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createGroup_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createGroup_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class listGroups_args implements org.apache.thrift.TBase<listGroups_args, listGroups_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listGroups_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField VISIBILITIES_FIELD_DESC = new org.apache.thrift.protocol.TField("visibilities", org.apache.thrift.protocol.TType.SET, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listGroups_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listGroups_argsTupleSchemeFactory());
    }

    public String userId; // required
    public Set<String> visibilities; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId"),
      VISIBILITIES((short)2, "visibilities");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          case 2: // VISIBILITIES
            return VISIBILITIES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.VISIBILITIES, new org.apache.thrift.meta_data.FieldMetaData("visibilities", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listGroups_args.class, metaDataMap);
    }

    public listGroups_args() {
    }

    public listGroups_args(
      String userId,
      Set<String> visibilities)
    {
      this();
      this.userId = userId;
      this.visibilities = visibilities;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listGroups_args(listGroups_args other) {
      if (other.isSetUserId()) {
        this.userId = other.userId;
      }
      if (other.isSetVisibilities()) {
        Set<String> __this__visibilities = new HashSet<String>();
        for (String other_element : other.visibilities) {
          __this__visibilities.add(other_element);
        }
        this.visibilities = __this__visibilities;
      }
    }

    public listGroups_args deepCopy() {
      return new listGroups_args(this);
    }

    @Override
    public void clear() {
      this.userId = null;
      this.visibilities = null;
    }

    public String getUserId() {
      return this.userId;
    }

    public listGroups_args setUserId(String userId) {
      this.userId = userId;
      return this;
    }

    public void unsetUserId() {
      this.userId = null;
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return this.userId != null;
    }

    public void setUserIdIsSet(boolean value) {
      if (!value) {
        this.userId = null;
      }
    }

    public int getVisibilitiesSize() {
      return (this.visibilities == null) ? 0 : this.visibilities.size();
    }

    public java.util.Iterator<String> getVisibilitiesIterator() {
      return (this.visibilities == null) ? null : this.visibilities.iterator();
    }

    public void addToVisibilities(String elem) {
      if (this.visibilities == null) {
        this.visibilities = new HashSet<String>();
      }
      this.visibilities.add(elem);
    }

    public Set<String> getVisibilities() {
      return this.visibilities;
    }

    public listGroups_args setVisibilities(Set<String> visibilities) {
      this.visibilities = visibilities;
      return this;
    }

    public void unsetVisibilities() {
      this.visibilities = null;
    }

    /** Returns true if field visibilities is set (has been assigned a value) and false otherwise */
    public boolean isSetVisibilities() {
      return this.visibilities != null;
    }

    public void setVisibilitiesIsSet(boolean value) {
      if (!value) {
        this.visibilities = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((String)value);
        }
        break;

      case VISIBILITIES:
        if (value == null) {
          unsetVisibilities();
        } else {
          setVisibilities((Set<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return getUserId();

      case VISIBILITIES:
        return getVisibilities();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUserId();
      case VISIBILITIES:
        return isSetVisibilities();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listGroups_args)
        return this.equals((listGroups_args)that);
      return false;
    }

    public boolean equals(listGroups_args that) {
      if (that == null)
        return false;

      boolean this_present_userId = true && this.isSetUserId();
      boolean that_present_userId = true && that.isSetUserId();
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (!this.userId.equals(that.userId))
          return false;
      }

      boolean this_present_visibilities = true && this.isSetVisibilities();
      boolean that_present_visibilities = true && that.isSetVisibilities();
      if (this_present_visibilities || that_present_visibilities) {
        if (!(this_present_visibilities && that_present_visibilities))
          return false;
        if (!this.visibilities.equals(that.visibilities))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(listGroups_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      listGroups_args typedOther = (listGroups_args)other;

      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(typedOther.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, typedOther.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVisibilities()).compareTo(typedOther.isSetVisibilities());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVisibilities()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.visibilities, typedOther.visibilities);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listGroups_args(");
      boolean first = true;

      sb.append("userId:");
      if (this.userId == null) {
        sb.append("null");
      } else {
        sb.append(this.userId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("visibilities:");
      if (this.visibilities == null) {
        sb.append("null");
      } else {
        sb.append(this.visibilities);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listGroups_argsStandardSchemeFactory implements SchemeFactory {
      public listGroups_argsStandardScheme getScheme() {
        return new listGroups_argsStandardScheme();
      }
    }

    private static class listGroups_argsStandardScheme extends StandardScheme<listGroups_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listGroups_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userId = iprot.readString();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VISIBILITIES
              if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                {
                  org.apache.thrift.protocol.TSet _set16 = iprot.readSetBegin();
                  struct.visibilities = new HashSet<String>(2*_set16.size);
                  for (int _i17 = 0; _i17 < _set16.size; ++_i17)
                  {
                    String _elem18; // required
                    _elem18 = iprot.readString();
                    struct.visibilities.add(_elem18);
                  }
                  iprot.readSetEnd();
                }
                struct.setVisibilitiesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listGroups_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userId != null) {
          oprot.writeFieldBegin(USER_ID_FIELD_DESC);
          oprot.writeString(struct.userId);
          oprot.writeFieldEnd();
        }
        if (struct.visibilities != null) {
          oprot.writeFieldBegin(VISIBILITIES_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.visibilities.size()));
            for (String _iter19 : struct.visibilities)
            {
              oprot.writeString(_iter19);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listGroups_argsTupleSchemeFactory implements SchemeFactory {
      public listGroups_argsTupleScheme getScheme() {
        return new listGroups_argsTupleScheme();
      }
    }

    private static class listGroups_argsTupleScheme extends TupleScheme<listGroups_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listGroups_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserId()) {
          optionals.set(0);
        }
        if (struct.isSetVisibilities()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUserId()) {
          oprot.writeString(struct.userId);
        }
        if (struct.isSetVisibilities()) {
          {
            oprot.writeI32(struct.visibilities.size());
            for (String _iter20 : struct.visibilities)
            {
              oprot.writeString(_iter20);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listGroups_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.userId = iprot.readString();
          struct.setUserIdIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TSet _set21 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.visibilities = new HashSet<String>(2*_set21.size);
            for (int _i22 = 0; _i22 < _set21.size; ++_i22)
            {
              String _elem23; // required
              _elem23 = iprot.readString();
              struct.visibilities.add(_elem23);
            }
          }
          struct.setVisibilitiesIsSet(true);
        }
      }
    }

  }

  public static class listGroups_result implements org.apache.thrift.TBase<listGroups_result, listGroups_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listGroups_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.SET, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listGroups_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listGroups_resultTupleSchemeFactory());
    }

    public Set<String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listGroups_result.class, metaDataMap);
    }

    public listGroups_result() {
    }

    public listGroups_result(
      Set<String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listGroups_result(listGroups_result other) {
      if (other.isSetSuccess()) {
        Set<String> __this__success = new HashSet<String>();
        for (String other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
    }

    public listGroups_result deepCopy() {
      return new listGroups_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new HashSet<String>();
      }
      this.success.add(elem);
    }

    public Set<String> getSuccess() {
      return this.success;
    }

    public listGroups_result setSuccess(Set<String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Set<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listGroups_result)
        return this.equals((listGroups_result)that);
      return false;
    }

    public boolean equals(listGroups_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(listGroups_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      listGroups_result typedOther = (listGroups_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listGroups_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listGroups_resultStandardSchemeFactory implements SchemeFactory {
      public listGroups_resultStandardScheme getScheme() {
        return new listGroups_resultStandardScheme();
      }
    }

    private static class listGroups_resultStandardScheme extends StandardScheme<listGroups_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listGroups_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                {
                  org.apache.thrift.protocol.TSet _set24 = iprot.readSetBegin();
                  struct.success = new HashSet<String>(2*_set24.size);
                  for (int _i25 = 0; _i25 < _set24.size; ++_i25)
                  {
                    String _elem26; // required
                    _elem26 = iprot.readString();
                    struct.success.add(_elem26);
                  }
                  iprot.readSetEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listGroups_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (String _iter27 : struct.success)
            {
              oprot.writeString(_iter27);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listGroups_resultTupleSchemeFactory implements SchemeFactory {
      public listGroups_resultTupleScheme getScheme() {
        return new listGroups_resultTupleScheme();
      }
    }

    private static class listGroups_resultTupleScheme extends TupleScheme<listGroups_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listGroups_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter28 : struct.success)
            {
              oprot.writeString(_iter28);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listGroups_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TSet _set29 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new HashSet<String>(2*_set29.size);
            for (int _i30 = 0; _i30 < _set29.size; ++_i30)
            {
              String _elem31; // required
              _elem31 = iprot.readString();
              struct.success.add(_elem31);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getGroupsForUser_args implements org.apache.thrift.TBase<getGroupsForUser_args, getGroupsForUser_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getGroupsForUser_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField VISIBILITIES_FIELD_DESC = new org.apache.thrift.protocol.TField("visibilities", org.apache.thrift.protocol.TType.SET, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getGroupsForUser_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getGroupsForUser_argsTupleSchemeFactory());
    }

    public String userId; // required
    public Set<String> visibilities; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId"),
      VISIBILITIES((short)2, "visibilities");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          case 2: // VISIBILITIES
            return VISIBILITIES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.VISIBILITIES, new org.apache.thrift.meta_data.FieldMetaData("visibilities", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getGroupsForUser_args.class, metaDataMap);
    }

    public getGroupsForUser_args() {
    }

    public getGroupsForUser_args(
      String userId,
      Set<String> visibilities)
    {
      this();
      this.userId = userId;
      this.visibilities = visibilities;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getGroupsForUser_args(getGroupsForUser_args other) {
      if (other.isSetUserId()) {
        this.userId = other.userId;
      }
      if (other.isSetVisibilities()) {
        Set<String> __this__visibilities = new HashSet<String>();
        for (String other_element : other.visibilities) {
          __this__visibilities.add(other_element);
        }
        this.visibilities = __this__visibilities;
      }
    }

    public getGroupsForUser_args deepCopy() {
      return new getGroupsForUser_args(this);
    }

    @Override
    public void clear() {
      this.userId = null;
      this.visibilities = null;
    }

    public String getUserId() {
      return this.userId;
    }

    public getGroupsForUser_args setUserId(String userId) {
      this.userId = userId;
      return this;
    }

    public void unsetUserId() {
      this.userId = null;
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return this.userId != null;
    }

    public void setUserIdIsSet(boolean value) {
      if (!value) {
        this.userId = null;
      }
    }

    public int getVisibilitiesSize() {
      return (this.visibilities == null) ? 0 : this.visibilities.size();
    }

    public java.util.Iterator<String> getVisibilitiesIterator() {
      return (this.visibilities == null) ? null : this.visibilities.iterator();
    }

    public void addToVisibilities(String elem) {
      if (this.visibilities == null) {
        this.visibilities = new HashSet<String>();
      }
      this.visibilities.add(elem);
    }

    public Set<String> getVisibilities() {
      return this.visibilities;
    }

    public getGroupsForUser_args setVisibilities(Set<String> visibilities) {
      this.visibilities = visibilities;
      return this;
    }

    public void unsetVisibilities() {
      this.visibilities = null;
    }

    /** Returns true if field visibilities is set (has been assigned a value) and false otherwise */
    public boolean isSetVisibilities() {
      return this.visibilities != null;
    }

    public void setVisibilitiesIsSet(boolean value) {
      if (!value) {
        this.visibilities = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((String)value);
        }
        break;

      case VISIBILITIES:
        if (value == null) {
          unsetVisibilities();
        } else {
          setVisibilities((Set<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return getUserId();

      case VISIBILITIES:
        return getVisibilities();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUserId();
      case VISIBILITIES:
        return isSetVisibilities();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getGroupsForUser_args)
        return this.equals((getGroupsForUser_args)that);
      return false;
    }

    public boolean equals(getGroupsForUser_args that) {
      if (that == null)
        return false;

      boolean this_present_userId = true && this.isSetUserId();
      boolean that_present_userId = true && that.isSetUserId();
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (!this.userId.equals(that.userId))
          return false;
      }

      boolean this_present_visibilities = true && this.isSetVisibilities();
      boolean that_present_visibilities = true && that.isSetVisibilities();
      if (this_present_visibilities || that_present_visibilities) {
        if (!(this_present_visibilities && that_present_visibilities))
          return false;
        if (!this.visibilities.equals(that.visibilities))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getGroupsForUser_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getGroupsForUser_args typedOther = (getGroupsForUser_args)other;

      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(typedOther.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, typedOther.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVisibilities()).compareTo(typedOther.isSetVisibilities());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVisibilities()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.visibilities, typedOther.visibilities);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getGroupsForUser_args(");
      boolean first = true;

      sb.append("userId:");
      if (this.userId == null) {
        sb.append("null");
      } else {
        sb.append(this.userId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("visibilities:");
      if (this.visibilities == null) {
        sb.append("null");
      } else {
        sb.append(this.visibilities);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getGroupsForUser_argsStandardSchemeFactory implements SchemeFactory {
      public getGroupsForUser_argsStandardScheme getScheme() {
        return new getGroupsForUser_argsStandardScheme();
      }
    }

    private static class getGroupsForUser_argsStandardScheme extends StandardScheme<getGroupsForUser_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getGroupsForUser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userId = iprot.readString();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VISIBILITIES
              if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                {
                  org.apache.thrift.protocol.TSet _set32 = iprot.readSetBegin();
                  struct.visibilities = new HashSet<String>(2*_set32.size);
                  for (int _i33 = 0; _i33 < _set32.size; ++_i33)
                  {
                    String _elem34; // required
                    _elem34 = iprot.readString();
                    struct.visibilities.add(_elem34);
                  }
                  iprot.readSetEnd();
                }
                struct.setVisibilitiesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getGroupsForUser_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userId != null) {
          oprot.writeFieldBegin(USER_ID_FIELD_DESC);
          oprot.writeString(struct.userId);
          oprot.writeFieldEnd();
        }
        if (struct.visibilities != null) {
          oprot.writeFieldBegin(VISIBILITIES_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.visibilities.size()));
            for (String _iter35 : struct.visibilities)
            {
              oprot.writeString(_iter35);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getGroupsForUser_argsTupleSchemeFactory implements SchemeFactory {
      public getGroupsForUser_argsTupleScheme getScheme() {
        return new getGroupsForUser_argsTupleScheme();
      }
    }

    private static class getGroupsForUser_argsTupleScheme extends TupleScheme<getGroupsForUser_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getGroupsForUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserId()) {
          optionals.set(0);
        }
        if (struct.isSetVisibilities()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUserId()) {
          oprot.writeString(struct.userId);
        }
        if (struct.isSetVisibilities()) {
          {
            oprot.writeI32(struct.visibilities.size());
            for (String _iter36 : struct.visibilities)
            {
              oprot.writeString(_iter36);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getGroupsForUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.userId = iprot.readString();
          struct.setUserIdIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TSet _set37 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.visibilities = new HashSet<String>(2*_set37.size);
            for (int _i38 = 0; _i38 < _set37.size; ++_i38)
            {
              String _elem39; // required
              _elem39 = iprot.readString();
              struct.visibilities.add(_elem39);
            }
          }
          struct.setVisibilitiesIsSet(true);
        }
      }
    }

  }

  public static class getGroupsForUser_result implements org.apache.thrift.TBase<getGroupsForUser_result, getGroupsForUser_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getGroupsForUser_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.SET, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getGroupsForUser_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getGroupsForUser_resultTupleSchemeFactory());
    }

    public Set<String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getGroupsForUser_result.class, metaDataMap);
    }

    public getGroupsForUser_result() {
    }

    public getGroupsForUser_result(
      Set<String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getGroupsForUser_result(getGroupsForUser_result other) {
      if (other.isSetSuccess()) {
        Set<String> __this__success = new HashSet<String>();
        for (String other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
    }

    public getGroupsForUser_result deepCopy() {
      return new getGroupsForUser_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new HashSet<String>();
      }
      this.success.add(elem);
    }

    public Set<String> getSuccess() {
      return this.success;
    }

    public getGroupsForUser_result setSuccess(Set<String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Set<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getGroupsForUser_result)
        return this.equals((getGroupsForUser_result)that);
      return false;
    }

    public boolean equals(getGroupsForUser_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getGroupsForUser_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getGroupsForUser_result typedOther = (getGroupsForUser_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getGroupsForUser_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getGroupsForUser_resultStandardSchemeFactory implements SchemeFactory {
      public getGroupsForUser_resultStandardScheme getScheme() {
        return new getGroupsForUser_resultStandardScheme();
      }
    }

    private static class getGroupsForUser_resultStandardScheme extends StandardScheme<getGroupsForUser_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getGroupsForUser_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                {
                  org.apache.thrift.protocol.TSet _set40 = iprot.readSetBegin();
                  struct.success = new HashSet<String>(2*_set40.size);
                  for (int _i41 = 0; _i41 < _set40.size; ++_i41)
                  {
                    String _elem42; // required
                    _elem42 = iprot.readString();
                    struct.success.add(_elem42);
                  }
                  iprot.readSetEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getGroupsForUser_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (String _iter43 : struct.success)
            {
              oprot.writeString(_iter43);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getGroupsForUser_resultTupleSchemeFactory implements SchemeFactory {
      public getGroupsForUser_resultTupleScheme getScheme() {
        return new getGroupsForUser_resultTupleScheme();
      }
    }

    private static class getGroupsForUser_resultTupleScheme extends TupleScheme<getGroupsForUser_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getGroupsForUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter44 : struct.success)
            {
              oprot.writeString(_iter44);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getGroupsForUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TSet _set45 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new HashSet<String>(2*_set45.size);
            for (int _i46 = 0; _i46 < _set45.size; ++_i46)
            {
              String _elem47; // required
              _elem47 = iprot.readString();
              struct.success.add(_elem47);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class removeUserFromGroups_args implements org.apache.thrift.TBase<removeUserFromGroups_args, removeUserFromGroups_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeUserFromGroups_args");

    private static final org.apache.thrift.protocol.TField REQUESTER_FIELD_DESC = new org.apache.thrift.protocol.TField("requester", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField GROUPS_FIELD_DESC = new org.apache.thrift.protocol.TField("groups", org.apache.thrift.protocol.TType.SET, (short)3);
    private static final org.apache.thrift.protocol.TField VISIBILITIES_FIELD_DESC = new org.apache.thrift.protocol.TField("visibilities", org.apache.thrift.protocol.TType.SET, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeUserFromGroups_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeUserFromGroups_argsTupleSchemeFactory());
    }

    public String requester; // required
    public String userId; // required
    public Set<String> groups; // required
    public Set<String> visibilities; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUESTER((short)1, "requester"),
      USER_ID((short)2, "userId"),
      GROUPS((short)3, "groups"),
      VISIBILITIES((short)4, "visibilities");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUESTER
            return REQUESTER;
          case 2: // USER_ID
            return USER_ID;
          case 3: // GROUPS
            return GROUPS;
          case 4: // VISIBILITIES
            return VISIBILITIES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUESTER, new org.apache.thrift.meta_data.FieldMetaData("requester", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.GROUPS, new org.apache.thrift.meta_data.FieldMetaData("groups", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.VISIBILITIES, new org.apache.thrift.meta_data.FieldMetaData("visibilities", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeUserFromGroups_args.class, metaDataMap);
    }

    public removeUserFromGroups_args() {
    }

    public removeUserFromGroups_args(
      String requester,
      String userId,
      Set<String> groups,
      Set<String> visibilities)
    {
      this();
      this.requester = requester;
      this.userId = userId;
      this.groups = groups;
      this.visibilities = visibilities;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeUserFromGroups_args(removeUserFromGroups_args other) {
      if (other.isSetRequester()) {
        this.requester = other.requester;
      }
      if (other.isSetUserId()) {
        this.userId = other.userId;
      }
      if (other.isSetGroups()) {
        Set<String> __this__groups = new HashSet<String>();
        for (String other_element : other.groups) {
          __this__groups.add(other_element);
        }
        this.groups = __this__groups;
      }
      if (other.isSetVisibilities()) {
        Set<String> __this__visibilities = new HashSet<String>();
        for (String other_element : other.visibilities) {
          __this__visibilities.add(other_element);
        }
        this.visibilities = __this__visibilities;
      }
    }

    public removeUserFromGroups_args deepCopy() {
      return new removeUserFromGroups_args(this);
    }

    @Override
    public void clear() {
      this.requester = null;
      this.userId = null;
      this.groups = null;
      this.visibilities = null;
    }

    public String getRequester() {
      return this.requester;
    }

    public removeUserFromGroups_args setRequester(String requester) {
      this.requester = requester;
      return this;
    }

    public void unsetRequester() {
      this.requester = null;
    }

    /** Returns true if field requester is set (has been assigned a value) and false otherwise */
    public boolean isSetRequester() {
      return this.requester != null;
    }

    public void setRequesterIsSet(boolean value) {
      if (!value) {
        this.requester = null;
      }
    }

    public String getUserId() {
      return this.userId;
    }

    public removeUserFromGroups_args setUserId(String userId) {
      this.userId = userId;
      return this;
    }

    public void unsetUserId() {
      this.userId = null;
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return this.userId != null;
    }

    public void setUserIdIsSet(boolean value) {
      if (!value) {
        this.userId = null;
      }
    }

    public int getGroupsSize() {
      return (this.groups == null) ? 0 : this.groups.size();
    }

    public java.util.Iterator<String> getGroupsIterator() {
      return (this.groups == null) ? null : this.groups.iterator();
    }

    public void addToGroups(String elem) {
      if (this.groups == null) {
        this.groups = new HashSet<String>();
      }
      this.groups.add(elem);
    }

    public Set<String> getGroups() {
      return this.groups;
    }

    public removeUserFromGroups_args setGroups(Set<String> groups) {
      this.groups = groups;
      return this;
    }

    public void unsetGroups() {
      this.groups = null;
    }

    /** Returns true if field groups is set (has been assigned a value) and false otherwise */
    public boolean isSetGroups() {
      return this.groups != null;
    }

    public void setGroupsIsSet(boolean value) {
      if (!value) {
        this.groups = null;
      }
    }

    public int getVisibilitiesSize() {
      return (this.visibilities == null) ? 0 : this.visibilities.size();
    }

    public java.util.Iterator<String> getVisibilitiesIterator() {
      return (this.visibilities == null) ? null : this.visibilities.iterator();
    }

    public void addToVisibilities(String elem) {
      if (this.visibilities == null) {
        this.visibilities = new HashSet<String>();
      }
      this.visibilities.add(elem);
    }

    public Set<String> getVisibilities() {
      return this.visibilities;
    }

    public removeUserFromGroups_args setVisibilities(Set<String> visibilities) {
      this.visibilities = visibilities;
      return this;
    }

    public void unsetVisibilities() {
      this.visibilities = null;
    }

    /** Returns true if field visibilities is set (has been assigned a value) and false otherwise */
    public boolean isSetVisibilities() {
      return this.visibilities != null;
    }

    public void setVisibilitiesIsSet(boolean value) {
      if (!value) {
        this.visibilities = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUESTER:
        if (value == null) {
          unsetRequester();
        } else {
          setRequester((String)value);
        }
        break;

      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((String)value);
        }
        break;

      case GROUPS:
        if (value == null) {
          unsetGroups();
        } else {
          setGroups((Set<String>)value);
        }
        break;

      case VISIBILITIES:
        if (value == null) {
          unsetVisibilities();
        } else {
          setVisibilities((Set<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUESTER:
        return getRequester();

      case USER_ID:
        return getUserId();

      case GROUPS:
        return getGroups();

      case VISIBILITIES:
        return getVisibilities();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUESTER:
        return isSetRequester();
      case USER_ID:
        return isSetUserId();
      case GROUPS:
        return isSetGroups();
      case VISIBILITIES:
        return isSetVisibilities();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeUserFromGroups_args)
        return this.equals((removeUserFromGroups_args)that);
      return false;
    }

    public boolean equals(removeUserFromGroups_args that) {
      if (that == null)
        return false;

      boolean this_present_requester = true && this.isSetRequester();
      boolean that_present_requester = true && that.isSetRequester();
      if (this_present_requester || that_present_requester) {
        if (!(this_present_requester && that_present_requester))
          return false;
        if (!this.requester.equals(that.requester))
          return false;
      }

      boolean this_present_userId = true && this.isSetUserId();
      boolean that_present_userId = true && that.isSetUserId();
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (!this.userId.equals(that.userId))
          return false;
      }

      boolean this_present_groups = true && this.isSetGroups();
      boolean that_present_groups = true && that.isSetGroups();
      if (this_present_groups || that_present_groups) {
        if (!(this_present_groups && that_present_groups))
          return false;
        if (!this.groups.equals(that.groups))
          return false;
      }

      boolean this_present_visibilities = true && this.isSetVisibilities();
      boolean that_present_visibilities = true && that.isSetVisibilities();
      if (this_present_visibilities || that_present_visibilities) {
        if (!(this_present_visibilities && that_present_visibilities))
          return false;
        if (!this.visibilities.equals(that.visibilities))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(removeUserFromGroups_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      removeUserFromGroups_args typedOther = (removeUserFromGroups_args)other;

      lastComparison = Boolean.valueOf(isSetRequester()).compareTo(typedOther.isSetRequester());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequester()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requester, typedOther.requester);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(typedOther.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, typedOther.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGroups()).compareTo(typedOther.isSetGroups());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGroups()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groups, typedOther.groups);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVisibilities()).compareTo(typedOther.isSetVisibilities());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVisibilities()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.visibilities, typedOther.visibilities);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeUserFromGroups_args(");
      boolean first = true;

      sb.append("requester:");
      if (this.requester == null) {
        sb.append("null");
      } else {
        sb.append(this.requester);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userId:");
      if (this.userId == null) {
        sb.append("null");
      } else {
        sb.append(this.userId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("groups:");
      if (this.groups == null) {
        sb.append("null");
      } else {
        sb.append(this.groups);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("visibilities:");
      if (this.visibilities == null) {
        sb.append("null");
      } else {
        sb.append(this.visibilities);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeUserFromGroups_argsStandardSchemeFactory implements SchemeFactory {
      public removeUserFromGroups_argsStandardScheme getScheme() {
        return new removeUserFromGroups_argsStandardScheme();
      }
    }

    private static class removeUserFromGroups_argsStandardScheme extends StandardScheme<removeUserFromGroups_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeUserFromGroups_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUESTER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.requester = iprot.readString();
                struct.setRequesterIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userId = iprot.readString();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // GROUPS
              if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                {
                  org.apache.thrift.protocol.TSet _set48 = iprot.readSetBegin();
                  struct.groups = new HashSet<String>(2*_set48.size);
                  for (int _i49 = 0; _i49 < _set48.size; ++_i49)
                  {
                    String _elem50; // required
                    _elem50 = iprot.readString();
                    struct.groups.add(_elem50);
                  }
                  iprot.readSetEnd();
                }
                struct.setGroupsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // VISIBILITIES
              if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                {
                  org.apache.thrift.protocol.TSet _set51 = iprot.readSetBegin();
                  struct.visibilities = new HashSet<String>(2*_set51.size);
                  for (int _i52 = 0; _i52 < _set51.size; ++_i52)
                  {
                    String _elem53; // required
                    _elem53 = iprot.readString();
                    struct.visibilities.add(_elem53);
                  }
                  iprot.readSetEnd();
                }
                struct.setVisibilitiesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeUserFromGroups_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.requester != null) {
          oprot.writeFieldBegin(REQUESTER_FIELD_DESC);
          oprot.writeString(struct.requester);
          oprot.writeFieldEnd();
        }
        if (struct.userId != null) {
          oprot.writeFieldBegin(USER_ID_FIELD_DESC);
          oprot.writeString(struct.userId);
          oprot.writeFieldEnd();
        }
        if (struct.groups != null) {
          oprot.writeFieldBegin(GROUPS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.groups.size()));
            for (String _iter54 : struct.groups)
            {
              oprot.writeString(_iter54);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.visibilities != null) {
          oprot.writeFieldBegin(VISIBILITIES_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.visibilities.size()));
            for (String _iter55 : struct.visibilities)
            {
              oprot.writeString(_iter55);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeUserFromGroups_argsTupleSchemeFactory implements SchemeFactory {
      public removeUserFromGroups_argsTupleScheme getScheme() {
        return new removeUserFromGroups_argsTupleScheme();
      }
    }

    private static class removeUserFromGroups_argsTupleScheme extends TupleScheme<removeUserFromGroups_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeUserFromGroups_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequester()) {
          optionals.set(0);
        }
        if (struct.isSetUserId()) {
          optionals.set(1);
        }
        if (struct.isSetGroups()) {
          optionals.set(2);
        }
        if (struct.isSetVisibilities()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetRequester()) {
          oprot.writeString(struct.requester);
        }
        if (struct.isSetUserId()) {
          oprot.writeString(struct.userId);
        }
        if (struct.isSetGroups()) {
          {
            oprot.writeI32(struct.groups.size());
            for (String _iter56 : struct.groups)
            {
              oprot.writeString(_iter56);
            }
          }
        }
        if (struct.isSetVisibilities()) {
          {
            oprot.writeI32(struct.visibilities.size());
            for (String _iter57 : struct.visibilities)
            {
              oprot.writeString(_iter57);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeUserFromGroups_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.requester = iprot.readString();
          struct.setRequesterIsSet(true);
        }
        if (incoming.get(1)) {
          struct.userId = iprot.readString();
          struct.setUserIdIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TSet _set58 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.groups = new HashSet<String>(2*_set58.size);
            for (int _i59 = 0; _i59 < _set58.size; ++_i59)
            {
              String _elem60; // required
              _elem60 = iprot.readString();
              struct.groups.add(_elem60);
            }
          }
          struct.setGroupsIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TSet _set61 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.visibilities = new HashSet<String>(2*_set61.size);
            for (int _i62 = 0; _i62 < _set61.size; ++_i62)
            {
              String _elem63; // required
              _elem63 = iprot.readString();
              struct.visibilities.add(_elem63);
            }
          }
          struct.setVisibilitiesIsSet(true);
        }
      }
    }

  }

  public static class removeUserFromGroups_result implements org.apache.thrift.TBase<removeUserFromGroups_result, removeUserFromGroups_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeUserFromGroups_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeUserFromGroups_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeUserFromGroups_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeUserFromGroups_result.class, metaDataMap);
    }

    public removeUserFromGroups_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeUserFromGroups_result(removeUserFromGroups_result other) {
    }

    public removeUserFromGroups_result deepCopy() {
      return new removeUserFromGroups_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeUserFromGroups_result)
        return this.equals((removeUserFromGroups_result)that);
      return false;
    }

    public boolean equals(removeUserFromGroups_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(removeUserFromGroups_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      removeUserFromGroups_result typedOther = (removeUserFromGroups_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeUserFromGroups_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeUserFromGroups_resultStandardSchemeFactory implements SchemeFactory {
      public removeUserFromGroups_resultStandardScheme getScheme() {
        return new removeUserFromGroups_resultStandardScheme();
      }
    }

    private static class removeUserFromGroups_resultStandardScheme extends StandardScheme<removeUserFromGroups_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeUserFromGroups_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeUserFromGroups_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeUserFromGroups_resultTupleSchemeFactory implements SchemeFactory {
      public removeUserFromGroups_resultTupleScheme getScheme() {
        return new removeUserFromGroups_resultTupleScheme();
      }
    }

    private static class removeUserFromGroups_resultTupleScheme extends TupleScheme<removeUserFromGroups_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeUserFromGroups_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeUserFromGroups_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class removeUsersFromGroup_args implements org.apache.thrift.TBase<removeUsersFromGroup_args, removeUsersFromGroup_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeUsersFromGroup_args");

    private static final org.apache.thrift.protocol.TField REQUESTER_FIELD_DESC = new org.apache.thrift.protocol.TField("requester", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField GROUP_FIELD_DESC = new org.apache.thrift.protocol.TField("group", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField USERS_FIELD_DESC = new org.apache.thrift.protocol.TField("users", org.apache.thrift.protocol.TType.SET, (short)3);
    private static final org.apache.thrift.protocol.TField VISIBILITIES_FIELD_DESC = new org.apache.thrift.protocol.TField("visibilities", org.apache.thrift.protocol.TType.SET, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeUsersFromGroup_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeUsersFromGroup_argsTupleSchemeFactory());
    }

    public String requester; // required
    public String group; // required
    public Set<String> users; // required
    public Set<String> visibilities; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUESTER((short)1, "requester"),
      GROUP((short)2, "group"),
      USERS((short)3, "users"),
      VISIBILITIES((short)4, "visibilities");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUESTER
            return REQUESTER;
          case 2: // GROUP
            return GROUP;
          case 3: // USERS
            return USERS;
          case 4: // VISIBILITIES
            return VISIBILITIES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUESTER, new org.apache.thrift.meta_data.FieldMetaData("requester", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.GROUP, new org.apache.thrift.meta_data.FieldMetaData("group", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USERS, new org.apache.thrift.meta_data.FieldMetaData("users", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.VISIBILITIES, new org.apache.thrift.meta_data.FieldMetaData("visibilities", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeUsersFromGroup_args.class, metaDataMap);
    }

    public removeUsersFromGroup_args() {
    }

    public removeUsersFromGroup_args(
      String requester,
      String group,
      Set<String> users,
      Set<String> visibilities)
    {
      this();
      this.requester = requester;
      this.group = group;
      this.users = users;
      this.visibilities = visibilities;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeUsersFromGroup_args(removeUsersFromGroup_args other) {
      if (other.isSetRequester()) {
        this.requester = other.requester;
      }
      if (other.isSetGroup()) {
        this.group = other.group;
      }
      if (other.isSetUsers()) {
        Set<String> __this__users = new HashSet<String>();
        for (String other_element : other.users) {
          __this__users.add(other_element);
        }
        this.users = __this__users;
      }
      if (other.isSetVisibilities()) {
        Set<String> __this__visibilities = new HashSet<String>();
        for (String other_element : other.visibilities) {
          __this__visibilities.add(other_element);
        }
        this.visibilities = __this__visibilities;
      }
    }

    public removeUsersFromGroup_args deepCopy() {
      return new removeUsersFromGroup_args(this);
    }

    @Override
    public void clear() {
      this.requester = null;
      this.group = null;
      this.users = null;
      this.visibilities = null;
    }

    public String getRequester() {
      return this.requester;
    }

    public removeUsersFromGroup_args setRequester(String requester) {
      this.requester = requester;
      return this;
    }

    public void unsetRequester() {
      this.requester = null;
    }

    /** Returns true if field requester is set (has been assigned a value) and false otherwise */
    public boolean isSetRequester() {
      return this.requester != null;
    }

    public void setRequesterIsSet(boolean value) {
      if (!value) {
        this.requester = null;
      }
    }

    public String getGroup() {
      return this.group;
    }

    public removeUsersFromGroup_args setGroup(String group) {
      this.group = group;
      return this;
    }

    public void unsetGroup() {
      this.group = null;
    }

    /** Returns true if field group is set (has been assigned a value) and false otherwise */
    public boolean isSetGroup() {
      return this.group != null;
    }

    public void setGroupIsSet(boolean value) {
      if (!value) {
        this.group = null;
      }
    }

    public int getUsersSize() {
      return (this.users == null) ? 0 : this.users.size();
    }

    public java.util.Iterator<String> getUsersIterator() {
      return (this.users == null) ? null : this.users.iterator();
    }

    public void addToUsers(String elem) {
      if (this.users == null) {
        this.users = new HashSet<String>();
      }
      this.users.add(elem);
    }

    public Set<String> getUsers() {
      return this.users;
    }

    public removeUsersFromGroup_args setUsers(Set<String> users) {
      this.users = users;
      return this;
    }

    public void unsetUsers() {
      this.users = null;
    }

    /** Returns true if field users is set (has been assigned a value) and false otherwise */
    public boolean isSetUsers() {
      return this.users != null;
    }

    public void setUsersIsSet(boolean value) {
      if (!value) {
        this.users = null;
      }
    }

    public int getVisibilitiesSize() {
      return (this.visibilities == null) ? 0 : this.visibilities.size();
    }

    public java.util.Iterator<String> getVisibilitiesIterator() {
      return (this.visibilities == null) ? null : this.visibilities.iterator();
    }

    public void addToVisibilities(String elem) {
      if (this.visibilities == null) {
        this.visibilities = new HashSet<String>();
      }
      this.visibilities.add(elem);
    }

    public Set<String> getVisibilities() {
      return this.visibilities;
    }

    public removeUsersFromGroup_args setVisibilities(Set<String> visibilities) {
      this.visibilities = visibilities;
      return this;
    }

    public void unsetVisibilities() {
      this.visibilities = null;
    }

    /** Returns true if field visibilities is set (has been assigned a value) and false otherwise */
    public boolean isSetVisibilities() {
      return this.visibilities != null;
    }

    public void setVisibilitiesIsSet(boolean value) {
      if (!value) {
        this.visibilities = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUESTER:
        if (value == null) {
          unsetRequester();
        } else {
          setRequester((String)value);
        }
        break;

      case GROUP:
        if (value == null) {
          unsetGroup();
        } else {
          setGroup((String)value);
        }
        break;

      case USERS:
        if (value == null) {
          unsetUsers();
        } else {
          setUsers((Set<String>)value);
        }
        break;

      case VISIBILITIES:
        if (value == null) {
          unsetVisibilities();
        } else {
          setVisibilities((Set<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUESTER:
        return getRequester();

      case GROUP:
        return getGroup();

      case USERS:
        return getUsers();

      case VISIBILITIES:
        return getVisibilities();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUESTER:
        return isSetRequester();
      case GROUP:
        return isSetGroup();
      case USERS:
        return isSetUsers();
      case VISIBILITIES:
        return isSetVisibilities();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeUsersFromGroup_args)
        return this.equals((removeUsersFromGroup_args)that);
      return false;
    }

    public boolean equals(removeUsersFromGroup_args that) {
      if (that == null)
        return false;

      boolean this_present_requester = true && this.isSetRequester();
      boolean that_present_requester = true && that.isSetRequester();
      if (this_present_requester || that_present_requester) {
        if (!(this_present_requester && that_present_requester))
          return false;
        if (!this.requester.equals(that.requester))
          return false;
      }

      boolean this_present_group = true && this.isSetGroup();
      boolean that_present_group = true && that.isSetGroup();
      if (this_present_group || that_present_group) {
        if (!(this_present_group && that_present_group))
          return false;
        if (!this.group.equals(that.group))
          return false;
      }

      boolean this_present_users = true && this.isSetUsers();
      boolean that_present_users = true && that.isSetUsers();
      if (this_present_users || that_present_users) {
        if (!(this_present_users && that_present_users))
          return false;
        if (!this.users.equals(that.users))
          return false;
      }

      boolean this_present_visibilities = true && this.isSetVisibilities();
      boolean that_present_visibilities = true && that.isSetVisibilities();
      if (this_present_visibilities || that_present_visibilities) {
        if (!(this_present_visibilities && that_present_visibilities))
          return false;
        if (!this.visibilities.equals(that.visibilities))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(removeUsersFromGroup_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      removeUsersFromGroup_args typedOther = (removeUsersFromGroup_args)other;

      lastComparison = Boolean.valueOf(isSetRequester()).compareTo(typedOther.isSetRequester());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequester()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requester, typedOther.requester);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGroup()).compareTo(typedOther.isSetGroup());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGroup()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.group, typedOther.group);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUsers()).compareTo(typedOther.isSetUsers());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUsers()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.users, typedOther.users);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVisibilities()).compareTo(typedOther.isSetVisibilities());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVisibilities()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.visibilities, typedOther.visibilities);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeUsersFromGroup_args(");
      boolean first = true;

      sb.append("requester:");
      if (this.requester == null) {
        sb.append("null");
      } else {
        sb.append(this.requester);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("group:");
      if (this.group == null) {
        sb.append("null");
      } else {
        sb.append(this.group);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("users:");
      if (this.users == null) {
        sb.append("null");
      } else {
        sb.append(this.users);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("visibilities:");
      if (this.visibilities == null) {
        sb.append("null");
      } else {
        sb.append(this.visibilities);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeUsersFromGroup_argsStandardSchemeFactory implements SchemeFactory {
      public removeUsersFromGroup_argsStandardScheme getScheme() {
        return new removeUsersFromGroup_argsStandardScheme();
      }
    }

    private static class removeUsersFromGroup_argsStandardScheme extends StandardScheme<removeUsersFromGroup_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeUsersFromGroup_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUESTER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.requester = iprot.readString();
                struct.setRequesterIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // GROUP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.group = iprot.readString();
                struct.setGroupIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // USERS
              if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                {
                  org.apache.thrift.protocol.TSet _set64 = iprot.readSetBegin();
                  struct.users = new HashSet<String>(2*_set64.size);
                  for (int _i65 = 0; _i65 < _set64.size; ++_i65)
                  {
                    String _elem66; // required
                    _elem66 = iprot.readString();
                    struct.users.add(_elem66);
                  }
                  iprot.readSetEnd();
                }
                struct.setUsersIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // VISIBILITIES
              if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                {
                  org.apache.thrift.protocol.TSet _set67 = iprot.readSetBegin();
                  struct.visibilities = new HashSet<String>(2*_set67.size);
                  for (int _i68 = 0; _i68 < _set67.size; ++_i68)
                  {
                    String _elem69; // required
                    _elem69 = iprot.readString();
                    struct.visibilities.add(_elem69);
                  }
                  iprot.readSetEnd();
                }
                struct.setVisibilitiesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeUsersFromGroup_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.requester != null) {
          oprot.writeFieldBegin(REQUESTER_FIELD_DESC);
          oprot.writeString(struct.requester);
          oprot.writeFieldEnd();
        }
        if (struct.group != null) {
          oprot.writeFieldBegin(GROUP_FIELD_DESC);
          oprot.writeString(struct.group);
          oprot.writeFieldEnd();
        }
        if (struct.users != null) {
          oprot.writeFieldBegin(USERS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.users.size()));
            for (String _iter70 : struct.users)
            {
              oprot.writeString(_iter70);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.visibilities != null) {
          oprot.writeFieldBegin(VISIBILITIES_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.visibilities.size()));
            for (String _iter71 : struct.visibilities)
            {
              oprot.writeString(_iter71);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeUsersFromGroup_argsTupleSchemeFactory implements SchemeFactory {
      public removeUsersFromGroup_argsTupleScheme getScheme() {
        return new removeUsersFromGroup_argsTupleScheme();
      }
    }

    private static class removeUsersFromGroup_argsTupleScheme extends TupleScheme<removeUsersFromGroup_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeUsersFromGroup_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequester()) {
          optionals.set(0);
        }
        if (struct.isSetGroup()) {
          optionals.set(1);
        }
        if (struct.isSetUsers()) {
          optionals.set(2);
        }
        if (struct.isSetVisibilities()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetRequester()) {
          oprot.writeString(struct.requester);
        }
        if (struct.isSetGroup()) {
          oprot.writeString(struct.group);
        }
        if (struct.isSetUsers()) {
          {
            oprot.writeI32(struct.users.size());
            for (String _iter72 : struct.users)
            {
              oprot.writeString(_iter72);
            }
          }
        }
        if (struct.isSetVisibilities()) {
          {
            oprot.writeI32(struct.visibilities.size());
            for (String _iter73 : struct.visibilities)
            {
              oprot.writeString(_iter73);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeUsersFromGroup_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.requester = iprot.readString();
          struct.setRequesterIsSet(true);
        }
        if (incoming.get(1)) {
          struct.group = iprot.readString();
          struct.setGroupIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TSet _set74 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.users = new HashSet<String>(2*_set74.size);
            for (int _i75 = 0; _i75 < _set74.size; ++_i75)
            {
              String _elem76; // required
              _elem76 = iprot.readString();
              struct.users.add(_elem76);
            }
          }
          struct.setUsersIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TSet _set77 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.visibilities = new HashSet<String>(2*_set77.size);
            for (int _i78 = 0; _i78 < _set77.size; ++_i78)
            {
              String _elem79; // required
              _elem79 = iprot.readString();
              struct.visibilities.add(_elem79);
            }
          }
          struct.setVisibilitiesIsSet(true);
        }
      }
    }

  }

  public static class removeUsersFromGroup_result implements org.apache.thrift.TBase<removeUsersFromGroup_result, removeUsersFromGroup_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeUsersFromGroup_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeUsersFromGroup_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeUsersFromGroup_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeUsersFromGroup_result.class, metaDataMap);
    }

    public removeUsersFromGroup_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeUsersFromGroup_result(removeUsersFromGroup_result other) {
    }

    public removeUsersFromGroup_result deepCopy() {
      return new removeUsersFromGroup_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeUsersFromGroup_result)
        return this.equals((removeUsersFromGroup_result)that);
      return false;
    }

    public boolean equals(removeUsersFromGroup_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(removeUsersFromGroup_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      removeUsersFromGroup_result typedOther = (removeUsersFromGroup_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeUsersFromGroup_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeUsersFromGroup_resultStandardSchemeFactory implements SchemeFactory {
      public removeUsersFromGroup_resultStandardScheme getScheme() {
        return new removeUsersFromGroup_resultStandardScheme();
      }
    }

    private static class removeUsersFromGroup_resultStandardScheme extends StandardScheme<removeUsersFromGroup_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeUsersFromGroup_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeUsersFromGroup_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeUsersFromGroup_resultTupleSchemeFactory implements SchemeFactory {
      public removeUsersFromGroup_resultTupleScheme getScheme() {
        return new removeUsersFromGroup_resultTupleScheme();
      }
    }

    private static class removeUsersFromGroup_resultTupleScheme extends TupleScheme<removeUsersFromGroup_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeUsersFromGroup_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeUsersFromGroup_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getGroupHypothesesForUser_args implements org.apache.thrift.TBase<getGroupHypothesesForUser_args, getGroupHypothesesForUser_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getGroupHypothesesForUser_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField VISIBILITIES_FIELD_DESC = new org.apache.thrift.protocol.TField("visibilities", org.apache.thrift.protocol.TType.SET, (short)2);
    private static final org.apache.thrift.protocol.TField USER_OWNED_FIELD_DESC = new org.apache.thrift.protocol.TField("userOwned", org.apache.thrift.protocol.TType.BOOL, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getGroupHypothesesForUser_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getGroupHypothesesForUser_argsTupleSchemeFactory());
    }

    public String userId; // required
    public Set<String> visibilities; // required
    public boolean userOwned; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId"),
      VISIBILITIES((short)2, "visibilities"),
      USER_OWNED((short)3, "userOwned");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          case 2: // VISIBILITIES
            return VISIBILITIES;
          case 3: // USER_OWNED
            return USER_OWNED;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USEROWNED_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.VISIBILITIES, new org.apache.thrift.meta_data.FieldMetaData("visibilities", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.USER_OWNED, new org.apache.thrift.meta_data.FieldMetaData("userOwned", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getGroupHypothesesForUser_args.class, metaDataMap);
    }

    public getGroupHypothesesForUser_args() {
    }

    public getGroupHypothesesForUser_args(
      String userId,
      Set<String> visibilities,
      boolean userOwned)
    {
      this();
      this.userId = userId;
      this.visibilities = visibilities;
      this.userOwned = userOwned;
      setUserOwnedIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getGroupHypothesesForUser_args(getGroupHypothesesForUser_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetUserId()) {
        this.userId = other.userId;
      }
      if (other.isSetVisibilities()) {
        Set<String> __this__visibilities = new HashSet<String>();
        for (String other_element : other.visibilities) {
          __this__visibilities.add(other_element);
        }
        this.visibilities = __this__visibilities;
      }
      this.userOwned = other.userOwned;
    }

    public getGroupHypothesesForUser_args deepCopy() {
      return new getGroupHypothesesForUser_args(this);
    }

    @Override
    public void clear() {
      this.userId = null;
      this.visibilities = null;
      setUserOwnedIsSet(false);
      this.userOwned = false;
    }

    public String getUserId() {
      return this.userId;
    }

    public getGroupHypothesesForUser_args setUserId(String userId) {
      this.userId = userId;
      return this;
    }

    public void unsetUserId() {
      this.userId = null;
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return this.userId != null;
    }

    public void setUserIdIsSet(boolean value) {
      if (!value) {
        this.userId = null;
      }
    }

    public int getVisibilitiesSize() {
      return (this.visibilities == null) ? 0 : this.visibilities.size();
    }

    public java.util.Iterator<String> getVisibilitiesIterator() {
      return (this.visibilities == null) ? null : this.visibilities.iterator();
    }

    public void addToVisibilities(String elem) {
      if (this.visibilities == null) {
        this.visibilities = new HashSet<String>();
      }
      this.visibilities.add(elem);
    }

    public Set<String> getVisibilities() {
      return this.visibilities;
    }

    public getGroupHypothesesForUser_args setVisibilities(Set<String> visibilities) {
      this.visibilities = visibilities;
      return this;
    }

    public void unsetVisibilities() {
      this.visibilities = null;
    }

    /** Returns true if field visibilities is set (has been assigned a value) and false otherwise */
    public boolean isSetVisibilities() {
      return this.visibilities != null;
    }

    public void setVisibilitiesIsSet(boolean value) {
      if (!value) {
        this.visibilities = null;
      }
    }

    public boolean isUserOwned() {
      return this.userOwned;
    }

    public getGroupHypothesesForUser_args setUserOwned(boolean userOwned) {
      this.userOwned = userOwned;
      setUserOwnedIsSet(true);
      return this;
    }

    public void unsetUserOwned() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USEROWNED_ISSET_ID);
    }

    /** Returns true if field userOwned is set (has been assigned a value) and false otherwise */
    public boolean isSetUserOwned() {
      return EncodingUtils.testBit(__isset_bitfield, __USEROWNED_ISSET_ID);
    }

    public void setUserOwnedIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USEROWNED_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((String)value);
        }
        break;

      case VISIBILITIES:
        if (value == null) {
          unsetVisibilities();
        } else {
          setVisibilities((Set<String>)value);
        }
        break;

      case USER_OWNED:
        if (value == null) {
          unsetUserOwned();
        } else {
          setUserOwned((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return getUserId();

      case VISIBILITIES:
        return getVisibilities();

      case USER_OWNED:
        return Boolean.valueOf(isUserOwned());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUserId();
      case VISIBILITIES:
        return isSetVisibilities();
      case USER_OWNED:
        return isSetUserOwned();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getGroupHypothesesForUser_args)
        return this.equals((getGroupHypothesesForUser_args)that);
      return false;
    }

    public boolean equals(getGroupHypothesesForUser_args that) {
      if (that == null)
        return false;

      boolean this_present_userId = true && this.isSetUserId();
      boolean that_present_userId = true && that.isSetUserId();
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (!this.userId.equals(that.userId))
          return false;
      }

      boolean this_present_visibilities = true && this.isSetVisibilities();
      boolean that_present_visibilities = true && that.isSetVisibilities();
      if (this_present_visibilities || that_present_visibilities) {
        if (!(this_present_visibilities && that_present_visibilities))
          return false;
        if (!this.visibilities.equals(that.visibilities))
          return false;
      }

      boolean this_present_userOwned = true;
      boolean that_present_userOwned = true;
      if (this_present_userOwned || that_present_userOwned) {
        if (!(this_present_userOwned && that_present_userOwned))
          return false;
        if (this.userOwned != that.userOwned)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getGroupHypothesesForUser_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getGroupHypothesesForUser_args typedOther = (getGroupHypothesesForUser_args)other;

      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(typedOther.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, typedOther.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVisibilities()).compareTo(typedOther.isSetVisibilities());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVisibilities()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.visibilities, typedOther.visibilities);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserOwned()).compareTo(typedOther.isSetUserOwned());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserOwned()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userOwned, typedOther.userOwned);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getGroupHypothesesForUser_args(");
      boolean first = true;

      sb.append("userId:");
      if (this.userId == null) {
        sb.append("null");
      } else {
        sb.append(this.userId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("visibilities:");
      if (this.visibilities == null) {
        sb.append("null");
      } else {
        sb.append(this.visibilities);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userOwned:");
      sb.append(this.userOwned);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getGroupHypothesesForUser_argsStandardSchemeFactory implements SchemeFactory {
      public getGroupHypothesesForUser_argsStandardScheme getScheme() {
        return new getGroupHypothesesForUser_argsStandardScheme();
      }
    }

    private static class getGroupHypothesesForUser_argsStandardScheme extends StandardScheme<getGroupHypothesesForUser_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getGroupHypothesesForUser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userId = iprot.readString();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VISIBILITIES
              if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                {
                  org.apache.thrift.protocol.TSet _set80 = iprot.readSetBegin();
                  struct.visibilities = new HashSet<String>(2*_set80.size);
                  for (int _i81 = 0; _i81 < _set80.size; ++_i81)
                  {
                    String _elem82; // required
                    _elem82 = iprot.readString();
                    struct.visibilities.add(_elem82);
                  }
                  iprot.readSetEnd();
                }
                struct.setVisibilitiesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // USER_OWNED
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.userOwned = iprot.readBool();
                struct.setUserOwnedIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getGroupHypothesesForUser_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userId != null) {
          oprot.writeFieldBegin(USER_ID_FIELD_DESC);
          oprot.writeString(struct.userId);
          oprot.writeFieldEnd();
        }
        if (struct.visibilities != null) {
          oprot.writeFieldBegin(VISIBILITIES_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.visibilities.size()));
            for (String _iter83 : struct.visibilities)
            {
              oprot.writeString(_iter83);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(USER_OWNED_FIELD_DESC);
        oprot.writeBool(struct.userOwned);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getGroupHypothesesForUser_argsTupleSchemeFactory implements SchemeFactory {
      public getGroupHypothesesForUser_argsTupleScheme getScheme() {
        return new getGroupHypothesesForUser_argsTupleScheme();
      }
    }

    private static class getGroupHypothesesForUser_argsTupleScheme extends TupleScheme<getGroupHypothesesForUser_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getGroupHypothesesForUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserId()) {
          optionals.set(0);
        }
        if (struct.isSetVisibilities()) {
          optionals.set(1);
        }
        if (struct.isSetUserOwned()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetUserId()) {
          oprot.writeString(struct.userId);
        }
        if (struct.isSetVisibilities()) {
          {
            oprot.writeI32(struct.visibilities.size());
            for (String _iter84 : struct.visibilities)
            {
              oprot.writeString(_iter84);
            }
          }
        }
        if (struct.isSetUserOwned()) {
          oprot.writeBool(struct.userOwned);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getGroupHypothesesForUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.userId = iprot.readString();
          struct.setUserIdIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TSet _set85 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.visibilities = new HashSet<String>(2*_set85.size);
            for (int _i86 = 0; _i86 < _set85.size; ++_i86)
            {
              String _elem87; // required
              _elem87 = iprot.readString();
              struct.visibilities.add(_elem87);
            }
          }
          struct.setVisibilitiesIsSet(true);
        }
        if (incoming.get(2)) {
          struct.userOwned = iprot.readBool();
          struct.setUserOwnedIsSet(true);
        }
      }
    }

  }

  public static class getGroupHypothesesForUser_result implements org.apache.thrift.TBase<getGroupHypothesesForUser_result, getGroupHypothesesForUser_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getGroupHypothesesForUser_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getGroupHypothesesForUser_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getGroupHypothesesForUser_resultTupleSchemeFactory());
    }

    public List<com._42six.amino.common.thrift.THypothesis> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com._42six.amino.common.thrift.THypothesis.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getGroupHypothesesForUser_result.class, metaDataMap);
    }

    public getGroupHypothesesForUser_result() {
    }

    public getGroupHypothesesForUser_result(
      List<com._42six.amino.common.thrift.THypothesis> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getGroupHypothesesForUser_result(getGroupHypothesesForUser_result other) {
      if (other.isSetSuccess()) {
        List<com._42six.amino.common.thrift.THypothesis> __this__success = new ArrayList<com._42six.amino.common.thrift.THypothesis>();
        for (com._42six.amino.common.thrift.THypothesis other_element : other.success) {
          __this__success.add(new com._42six.amino.common.thrift.THypothesis(other_element));
        }
        this.success = __this__success;
      }
    }

    public getGroupHypothesesForUser_result deepCopy() {
      return new getGroupHypothesesForUser_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com._42six.amino.common.thrift.THypothesis> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com._42six.amino.common.thrift.THypothesis elem) {
      if (this.success == null) {
        this.success = new ArrayList<com._42six.amino.common.thrift.THypothesis>();
      }
      this.success.add(elem);
    }

    public List<com._42six.amino.common.thrift.THypothesis> getSuccess() {
      return this.success;
    }

    public getGroupHypothesesForUser_result setSuccess(List<com._42six.amino.common.thrift.THypothesis> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com._42six.amino.common.thrift.THypothesis>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getGroupHypothesesForUser_result)
        return this.equals((getGroupHypothesesForUser_result)that);
      return false;
    }

    public boolean equals(getGroupHypothesesForUser_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getGroupHypothesesForUser_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getGroupHypothesesForUser_result typedOther = (getGroupHypothesesForUser_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getGroupHypothesesForUser_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getGroupHypothesesForUser_resultStandardSchemeFactory implements SchemeFactory {
      public getGroupHypothesesForUser_resultStandardScheme getScheme() {
        return new getGroupHypothesesForUser_resultStandardScheme();
      }
    }

    private static class getGroupHypothesesForUser_resultStandardScheme extends StandardScheme<getGroupHypothesesForUser_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getGroupHypothesesForUser_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list88 = iprot.readListBegin();
                  struct.success = new ArrayList<com._42six.amino.common.thrift.THypothesis>(_list88.size);
                  for (int _i89 = 0; _i89 < _list88.size; ++_i89)
                  {
                    com._42six.amino.common.thrift.THypothesis _elem90; // required
                    _elem90 = new com._42six.amino.common.thrift.THypothesis();
                    _elem90.read(iprot);
                    struct.success.add(_elem90);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getGroupHypothesesForUser_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com._42six.amino.common.thrift.THypothesis _iter91 : struct.success)
            {
              _iter91.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getGroupHypothesesForUser_resultTupleSchemeFactory implements SchemeFactory {
      public getGroupHypothesesForUser_resultTupleScheme getScheme() {
        return new getGroupHypothesesForUser_resultTupleScheme();
      }
    }

    private static class getGroupHypothesesForUser_resultTupleScheme extends TupleScheme<getGroupHypothesesForUser_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getGroupHypothesesForUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com._42six.amino.common.thrift.THypothesis _iter92 : struct.success)
            {
              _iter92.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getGroupHypothesesForUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list93 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com._42six.amino.common.thrift.THypothesis>(_list93.size);
            for (int _i94 = 0; _i94 < _list93.size; ++_i94)
            {
              com._42six.amino.common.thrift.THypothesis _elem95; // required
              _elem95 = new com._42six.amino.common.thrift.THypothesis();
              _elem95.read(iprot);
              struct.success.add(_elem95);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getGroup_args implements org.apache.thrift.TBase<getGroup_args, getGroup_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getGroup_args");

    private static final org.apache.thrift.protocol.TField REQUESTER_FIELD_DESC = new org.apache.thrift.protocol.TField("requester", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField GROUP_FIELD_DESC = new org.apache.thrift.protocol.TField("group", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField VISIBILITIES_FIELD_DESC = new org.apache.thrift.protocol.TField("visibilities", org.apache.thrift.protocol.TType.SET, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getGroup_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getGroup_argsTupleSchemeFactory());
    }

    public String requester; // required
    public String group; // required
    public Set<String> visibilities; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUESTER((short)1, "requester"),
      GROUP((short)2, "group"),
      VISIBILITIES((short)3, "visibilities");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUESTER
            return REQUESTER;
          case 2: // GROUP
            return GROUP;
          case 3: // VISIBILITIES
            return VISIBILITIES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUESTER, new org.apache.thrift.meta_data.FieldMetaData("requester", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.GROUP, new org.apache.thrift.meta_data.FieldMetaData("group", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.VISIBILITIES, new org.apache.thrift.meta_data.FieldMetaData("visibilities", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getGroup_args.class, metaDataMap);
    }

    public getGroup_args() {
    }

    public getGroup_args(
      String requester,
      String group,
      Set<String> visibilities)
    {
      this();
      this.requester = requester;
      this.group = group;
      this.visibilities = visibilities;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getGroup_args(getGroup_args other) {
      if (other.isSetRequester()) {
        this.requester = other.requester;
      }
      if (other.isSetGroup()) {
        this.group = other.group;
      }
      if (other.isSetVisibilities()) {
        Set<String> __this__visibilities = new HashSet<String>();
        for (String other_element : other.visibilities) {
          __this__visibilities.add(other_element);
        }
        this.visibilities = __this__visibilities;
      }
    }

    public getGroup_args deepCopy() {
      return new getGroup_args(this);
    }

    @Override
    public void clear() {
      this.requester = null;
      this.group = null;
      this.visibilities = null;
    }

    public String getRequester() {
      return this.requester;
    }

    public getGroup_args setRequester(String requester) {
      this.requester = requester;
      return this;
    }

    public void unsetRequester() {
      this.requester = null;
    }

    /** Returns true if field requester is set (has been assigned a value) and false otherwise */
    public boolean isSetRequester() {
      return this.requester != null;
    }

    public void setRequesterIsSet(boolean value) {
      if (!value) {
        this.requester = null;
      }
    }

    public String getGroup() {
      return this.group;
    }

    public getGroup_args setGroup(String group) {
      this.group = group;
      return this;
    }

    public void unsetGroup() {
      this.group = null;
    }

    /** Returns true if field group is set (has been assigned a value) and false otherwise */
    public boolean isSetGroup() {
      return this.group != null;
    }

    public void setGroupIsSet(boolean value) {
      if (!value) {
        this.group = null;
      }
    }

    public int getVisibilitiesSize() {
      return (this.visibilities == null) ? 0 : this.visibilities.size();
    }

    public java.util.Iterator<String> getVisibilitiesIterator() {
      return (this.visibilities == null) ? null : this.visibilities.iterator();
    }

    public void addToVisibilities(String elem) {
      if (this.visibilities == null) {
        this.visibilities = new HashSet<String>();
      }
      this.visibilities.add(elem);
    }

    public Set<String> getVisibilities() {
      return this.visibilities;
    }

    public getGroup_args setVisibilities(Set<String> visibilities) {
      this.visibilities = visibilities;
      return this;
    }

    public void unsetVisibilities() {
      this.visibilities = null;
    }

    /** Returns true if field visibilities is set (has been assigned a value) and false otherwise */
    public boolean isSetVisibilities() {
      return this.visibilities != null;
    }

    public void setVisibilitiesIsSet(boolean value) {
      if (!value) {
        this.visibilities = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUESTER:
        if (value == null) {
          unsetRequester();
        } else {
          setRequester((String)value);
        }
        break;

      case GROUP:
        if (value == null) {
          unsetGroup();
        } else {
          setGroup((String)value);
        }
        break;

      case VISIBILITIES:
        if (value == null) {
          unsetVisibilities();
        } else {
          setVisibilities((Set<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUESTER:
        return getRequester();

      case GROUP:
        return getGroup();

      case VISIBILITIES:
        return getVisibilities();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUESTER:
        return isSetRequester();
      case GROUP:
        return isSetGroup();
      case VISIBILITIES:
        return isSetVisibilities();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getGroup_args)
        return this.equals((getGroup_args)that);
      return false;
    }

    public boolean equals(getGroup_args that) {
      if (that == null)
        return false;

      boolean this_present_requester = true && this.isSetRequester();
      boolean that_present_requester = true && that.isSetRequester();
      if (this_present_requester || that_present_requester) {
        if (!(this_present_requester && that_present_requester))
          return false;
        if (!this.requester.equals(that.requester))
          return false;
      }

      boolean this_present_group = true && this.isSetGroup();
      boolean that_present_group = true && that.isSetGroup();
      if (this_present_group || that_present_group) {
        if (!(this_present_group && that_present_group))
          return false;
        if (!this.group.equals(that.group))
          return false;
      }

      boolean this_present_visibilities = true && this.isSetVisibilities();
      boolean that_present_visibilities = true && that.isSetVisibilities();
      if (this_present_visibilities || that_present_visibilities) {
        if (!(this_present_visibilities && that_present_visibilities))
          return false;
        if (!this.visibilities.equals(that.visibilities))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getGroup_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getGroup_args typedOther = (getGroup_args)other;

      lastComparison = Boolean.valueOf(isSetRequester()).compareTo(typedOther.isSetRequester());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequester()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requester, typedOther.requester);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGroup()).compareTo(typedOther.isSetGroup());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGroup()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.group, typedOther.group);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVisibilities()).compareTo(typedOther.isSetVisibilities());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVisibilities()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.visibilities, typedOther.visibilities);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getGroup_args(");
      boolean first = true;

      sb.append("requester:");
      if (this.requester == null) {
        sb.append("null");
      } else {
        sb.append(this.requester);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("group:");
      if (this.group == null) {
        sb.append("null");
      } else {
        sb.append(this.group);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("visibilities:");
      if (this.visibilities == null) {
        sb.append("null");
      } else {
        sb.append(this.visibilities);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getGroup_argsStandardSchemeFactory implements SchemeFactory {
      public getGroup_argsStandardScheme getScheme() {
        return new getGroup_argsStandardScheme();
      }
    }

    private static class getGroup_argsStandardScheme extends StandardScheme<getGroup_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getGroup_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUESTER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.requester = iprot.readString();
                struct.setRequesterIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // GROUP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.group = iprot.readString();
                struct.setGroupIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // VISIBILITIES
              if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                {
                  org.apache.thrift.protocol.TSet _set96 = iprot.readSetBegin();
                  struct.visibilities = new HashSet<String>(2*_set96.size);
                  for (int _i97 = 0; _i97 < _set96.size; ++_i97)
                  {
                    String _elem98; // required
                    _elem98 = iprot.readString();
                    struct.visibilities.add(_elem98);
                  }
                  iprot.readSetEnd();
                }
                struct.setVisibilitiesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getGroup_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.requester != null) {
          oprot.writeFieldBegin(REQUESTER_FIELD_DESC);
          oprot.writeString(struct.requester);
          oprot.writeFieldEnd();
        }
        if (struct.group != null) {
          oprot.writeFieldBegin(GROUP_FIELD_DESC);
          oprot.writeString(struct.group);
          oprot.writeFieldEnd();
        }
        if (struct.visibilities != null) {
          oprot.writeFieldBegin(VISIBILITIES_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.visibilities.size()));
            for (String _iter99 : struct.visibilities)
            {
              oprot.writeString(_iter99);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getGroup_argsTupleSchemeFactory implements SchemeFactory {
      public getGroup_argsTupleScheme getScheme() {
        return new getGroup_argsTupleScheme();
      }
    }

    private static class getGroup_argsTupleScheme extends TupleScheme<getGroup_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getGroup_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequester()) {
          optionals.set(0);
        }
        if (struct.isSetGroup()) {
          optionals.set(1);
        }
        if (struct.isSetVisibilities()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetRequester()) {
          oprot.writeString(struct.requester);
        }
        if (struct.isSetGroup()) {
          oprot.writeString(struct.group);
        }
        if (struct.isSetVisibilities()) {
          {
            oprot.writeI32(struct.visibilities.size());
            for (String _iter100 : struct.visibilities)
            {
              oprot.writeString(_iter100);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getGroup_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.requester = iprot.readString();
          struct.setRequesterIsSet(true);
        }
        if (incoming.get(1)) {
          struct.group = iprot.readString();
          struct.setGroupIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TSet _set101 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.visibilities = new HashSet<String>(2*_set101.size);
            for (int _i102 = 0; _i102 < _set101.size; ++_i102)
            {
              String _elem103; // required
              _elem103 = iprot.readString();
              struct.visibilities.add(_elem103);
            }
          }
          struct.setVisibilitiesIsSet(true);
        }
      }
    }

  }

  public static class getGroup_result implements org.apache.thrift.TBase<getGroup_result, getGroup_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getGroup_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getGroup_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getGroup_resultTupleSchemeFactory());
    }

    public com._42six.amino.common.thrift.TGroup success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com._42six.amino.common.thrift.TGroup.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getGroup_result.class, metaDataMap);
    }

    public getGroup_result() {
    }

    public getGroup_result(
      com._42six.amino.common.thrift.TGroup success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getGroup_result(getGroup_result other) {
      if (other.isSetSuccess()) {
        this.success = new com._42six.amino.common.thrift.TGroup(other.success);
      }
    }

    public getGroup_result deepCopy() {
      return new getGroup_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com._42six.amino.common.thrift.TGroup getSuccess() {
      return this.success;
    }

    public getGroup_result setSuccess(com._42six.amino.common.thrift.TGroup success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com._42six.amino.common.thrift.TGroup)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getGroup_result)
        return this.equals((getGroup_result)that);
      return false;
    }

    public boolean equals(getGroup_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getGroup_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getGroup_result typedOther = (getGroup_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getGroup_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getGroup_resultStandardSchemeFactory implements SchemeFactory {
      public getGroup_resultStandardScheme getScheme() {
        return new getGroup_resultStandardScheme();
      }
    }

    private static class getGroup_resultStandardScheme extends StandardScheme<getGroup_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getGroup_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com._42six.amino.common.thrift.TGroup();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getGroup_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getGroup_resultTupleSchemeFactory implements SchemeFactory {
      public getGroup_resultTupleScheme getScheme() {
        return new getGroup_resultTupleScheme();
      }
    }

    private static class getGroup_resultTupleScheme extends TupleScheme<getGroup_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getGroup_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getGroup_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com._42six.amino.common.thrift.TGroup();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class listDataSources_args implements org.apache.thrift.TBase<listDataSources_args, listDataSources_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listDataSources_args");

    private static final org.apache.thrift.protocol.TField VISIBILITIES_FIELD_DESC = new org.apache.thrift.protocol.TField("visibilities", org.apache.thrift.protocol.TType.SET, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listDataSources_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listDataSources_argsTupleSchemeFactory());
    }

    public Set<String> visibilities; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VISIBILITIES((short)1, "visibilities");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VISIBILITIES
            return VISIBILITIES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VISIBILITIES, new org.apache.thrift.meta_data.FieldMetaData("visibilities", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listDataSources_args.class, metaDataMap);
    }

    public listDataSources_args() {
    }

    public listDataSources_args(
      Set<String> visibilities)
    {
      this();
      this.visibilities = visibilities;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listDataSources_args(listDataSources_args other) {
      if (other.isSetVisibilities()) {
        Set<String> __this__visibilities = new HashSet<String>();
        for (String other_element : other.visibilities) {
          __this__visibilities.add(other_element);
        }
        this.visibilities = __this__visibilities;
      }
    }

    public listDataSources_args deepCopy() {
      return new listDataSources_args(this);
    }

    @Override
    public void clear() {
      this.visibilities = null;
    }

    public int getVisibilitiesSize() {
      return (this.visibilities == null) ? 0 : this.visibilities.size();
    }

    public java.util.Iterator<String> getVisibilitiesIterator() {
      return (this.visibilities == null) ? null : this.visibilities.iterator();
    }

    public void addToVisibilities(String elem) {
      if (this.visibilities == null) {
        this.visibilities = new HashSet<String>();
      }
      this.visibilities.add(elem);
    }

    public Set<String> getVisibilities() {
      return this.visibilities;
    }

    public listDataSources_args setVisibilities(Set<String> visibilities) {
      this.visibilities = visibilities;
      return this;
    }

    public void unsetVisibilities() {
      this.visibilities = null;
    }

    /** Returns true if field visibilities is set (has been assigned a value) and false otherwise */
    public boolean isSetVisibilities() {
      return this.visibilities != null;
    }

    public void setVisibilitiesIsSet(boolean value) {
      if (!value) {
        this.visibilities = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case VISIBILITIES:
        if (value == null) {
          unsetVisibilities();
        } else {
          setVisibilities((Set<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case VISIBILITIES:
        return getVisibilities();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case VISIBILITIES:
        return isSetVisibilities();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listDataSources_args)
        return this.equals((listDataSources_args)that);
      return false;
    }

    public boolean equals(listDataSources_args that) {
      if (that == null)
        return false;

      boolean this_present_visibilities = true && this.isSetVisibilities();
      boolean that_present_visibilities = true && that.isSetVisibilities();
      if (this_present_visibilities || that_present_visibilities) {
        if (!(this_present_visibilities && that_present_visibilities))
          return false;
        if (!this.visibilities.equals(that.visibilities))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(listDataSources_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      listDataSources_args typedOther = (listDataSources_args)other;

      lastComparison = Boolean.valueOf(isSetVisibilities()).compareTo(typedOther.isSetVisibilities());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVisibilities()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.visibilities, typedOther.visibilities);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listDataSources_args(");
      boolean first = true;

      sb.append("visibilities:");
      if (this.visibilities == null) {
        sb.append("null");
      } else {
        sb.append(this.visibilities);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listDataSources_argsStandardSchemeFactory implements SchemeFactory {
      public listDataSources_argsStandardScheme getScheme() {
        return new listDataSources_argsStandardScheme();
      }
    }

    private static class listDataSources_argsStandardScheme extends StandardScheme<listDataSources_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listDataSources_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VISIBILITIES
              if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                {
                  org.apache.thrift.protocol.TSet _set104 = iprot.readSetBegin();
                  struct.visibilities = new HashSet<String>(2*_set104.size);
                  for (int _i105 = 0; _i105 < _set104.size; ++_i105)
                  {
                    String _elem106; // required
                    _elem106 = iprot.readString();
                    struct.visibilities.add(_elem106);
                  }
                  iprot.readSetEnd();
                }
                struct.setVisibilitiesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listDataSources_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.visibilities != null) {
          oprot.writeFieldBegin(VISIBILITIES_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.visibilities.size()));
            for (String _iter107 : struct.visibilities)
            {
              oprot.writeString(_iter107);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listDataSources_argsTupleSchemeFactory implements SchemeFactory {
      public listDataSources_argsTupleScheme getScheme() {
        return new listDataSources_argsTupleScheme();
      }
    }

    private static class listDataSources_argsTupleScheme extends TupleScheme<listDataSources_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listDataSources_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetVisibilities()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetVisibilities()) {
          {
            oprot.writeI32(struct.visibilities.size());
            for (String _iter108 : struct.visibilities)
            {
              oprot.writeString(_iter108);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listDataSources_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TSet _set109 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.visibilities = new HashSet<String>(2*_set109.size);
            for (int _i110 = 0; _i110 < _set109.size; ++_i110)
            {
              String _elem111; // required
              _elem111 = iprot.readString();
              struct.visibilities.add(_elem111);
            }
          }
          struct.setVisibilitiesIsSet(true);
        }
      }
    }

  }

  public static class listDataSources_result implements org.apache.thrift.TBase<listDataSources_result, listDataSources_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listDataSources_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listDataSources_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listDataSources_resultTupleSchemeFactory());
    }

    public List<com._42six.amino.common.thrift.TDatasourceMetadata> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com._42six.amino.common.thrift.TDatasourceMetadata.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listDataSources_result.class, metaDataMap);
    }

    public listDataSources_result() {
    }

    public listDataSources_result(
      List<com._42six.amino.common.thrift.TDatasourceMetadata> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listDataSources_result(listDataSources_result other) {
      if (other.isSetSuccess()) {
        List<com._42six.amino.common.thrift.TDatasourceMetadata> __this__success = new ArrayList<com._42six.amino.common.thrift.TDatasourceMetadata>();
        for (com._42six.amino.common.thrift.TDatasourceMetadata other_element : other.success) {
          __this__success.add(new com._42six.amino.common.thrift.TDatasourceMetadata(other_element));
        }
        this.success = __this__success;
      }
    }

    public listDataSources_result deepCopy() {
      return new listDataSources_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com._42six.amino.common.thrift.TDatasourceMetadata> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com._42six.amino.common.thrift.TDatasourceMetadata elem) {
      if (this.success == null) {
        this.success = new ArrayList<com._42six.amino.common.thrift.TDatasourceMetadata>();
      }
      this.success.add(elem);
    }

    public List<com._42six.amino.common.thrift.TDatasourceMetadata> getSuccess() {
      return this.success;
    }

    public listDataSources_result setSuccess(List<com._42six.amino.common.thrift.TDatasourceMetadata> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com._42six.amino.common.thrift.TDatasourceMetadata>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listDataSources_result)
        return this.equals((listDataSources_result)that);
      return false;
    }

    public boolean equals(listDataSources_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(listDataSources_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      listDataSources_result typedOther = (listDataSources_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listDataSources_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listDataSources_resultStandardSchemeFactory implements SchemeFactory {
      public listDataSources_resultStandardScheme getScheme() {
        return new listDataSources_resultStandardScheme();
      }
    }

    private static class listDataSources_resultStandardScheme extends StandardScheme<listDataSources_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listDataSources_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list112 = iprot.readListBegin();
                  struct.success = new ArrayList<com._42six.amino.common.thrift.TDatasourceMetadata>(_list112.size);
                  for (int _i113 = 0; _i113 < _list112.size; ++_i113)
                  {
                    com._42six.amino.common.thrift.TDatasourceMetadata _elem114; // required
                    _elem114 = new com._42six.amino.common.thrift.TDatasourceMetadata();
                    _elem114.read(iprot);
                    struct.success.add(_elem114);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listDataSources_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com._42six.amino.common.thrift.TDatasourceMetadata _iter115 : struct.success)
            {
              _iter115.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listDataSources_resultTupleSchemeFactory implements SchemeFactory {
      public listDataSources_resultTupleScheme getScheme() {
        return new listDataSources_resultTupleScheme();
      }
    }

    private static class listDataSources_resultTupleScheme extends TupleScheme<listDataSources_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listDataSources_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com._42six.amino.common.thrift.TDatasourceMetadata _iter116 : struct.success)
            {
              _iter116.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listDataSources_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list117 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com._42six.amino.common.thrift.TDatasourceMetadata>(_list117.size);
            for (int _i118 = 0; _i118 < _list117.size; ++_i118)
            {
              com._42six.amino.common.thrift.TDatasourceMetadata _elem119; // required
              _elem119 = new com._42six.amino.common.thrift.TDatasourceMetadata();
              _elem119.read(iprot);
              struct.success.add(_elem119);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class listFeatures_args implements org.apache.thrift.TBase<listFeatures_args, listFeatures_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listFeatures_args");

    private static final org.apache.thrift.protocol.TField DATASOURCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("datasourceId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField VISIBILITIES_FIELD_DESC = new org.apache.thrift.protocol.TField("visibilities", org.apache.thrift.protocol.TType.SET, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listFeatures_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listFeatures_argsTupleSchemeFactory());
    }

    public String datasourceId; // required
    public Set<String> visibilities; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATASOURCE_ID((short)1, "datasourceId"),
      VISIBILITIES((short)2, "visibilities");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATASOURCE_ID
            return DATASOURCE_ID;
          case 2: // VISIBILITIES
            return VISIBILITIES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATASOURCE_ID, new org.apache.thrift.meta_data.FieldMetaData("datasourceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.VISIBILITIES, new org.apache.thrift.meta_data.FieldMetaData("visibilities", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listFeatures_args.class, metaDataMap);
    }

    public listFeatures_args() {
    }

    public listFeatures_args(
      String datasourceId,
      Set<String> visibilities)
    {
      this();
      this.datasourceId = datasourceId;
      this.visibilities = visibilities;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listFeatures_args(listFeatures_args other) {
      if (other.isSetDatasourceId()) {
        this.datasourceId = other.datasourceId;
      }
      if (other.isSetVisibilities()) {
        Set<String> __this__visibilities = new HashSet<String>();
        for (String other_element : other.visibilities) {
          __this__visibilities.add(other_element);
        }
        this.visibilities = __this__visibilities;
      }
    }

    public listFeatures_args deepCopy() {
      return new listFeatures_args(this);
    }

    @Override
    public void clear() {
      this.datasourceId = null;
      this.visibilities = null;
    }

    public String getDatasourceId() {
      return this.datasourceId;
    }

    public listFeatures_args setDatasourceId(String datasourceId) {
      this.datasourceId = datasourceId;
      return this;
    }

    public void unsetDatasourceId() {
      this.datasourceId = null;
    }

    /** Returns true if field datasourceId is set (has been assigned a value) and false otherwise */
    public boolean isSetDatasourceId() {
      return this.datasourceId != null;
    }

    public void setDatasourceIdIsSet(boolean value) {
      if (!value) {
        this.datasourceId = null;
      }
    }

    public int getVisibilitiesSize() {
      return (this.visibilities == null) ? 0 : this.visibilities.size();
    }

    public java.util.Iterator<String> getVisibilitiesIterator() {
      return (this.visibilities == null) ? null : this.visibilities.iterator();
    }

    public void addToVisibilities(String elem) {
      if (this.visibilities == null) {
        this.visibilities = new HashSet<String>();
      }
      this.visibilities.add(elem);
    }

    public Set<String> getVisibilities() {
      return this.visibilities;
    }

    public listFeatures_args setVisibilities(Set<String> visibilities) {
      this.visibilities = visibilities;
      return this;
    }

    public void unsetVisibilities() {
      this.visibilities = null;
    }

    /** Returns true if field visibilities is set (has been assigned a value) and false otherwise */
    public boolean isSetVisibilities() {
      return this.visibilities != null;
    }

    public void setVisibilitiesIsSet(boolean value) {
      if (!value) {
        this.visibilities = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATASOURCE_ID:
        if (value == null) {
          unsetDatasourceId();
        } else {
          setDatasourceId((String)value);
        }
        break;

      case VISIBILITIES:
        if (value == null) {
          unsetVisibilities();
        } else {
          setVisibilities((Set<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATASOURCE_ID:
        return getDatasourceId();

      case VISIBILITIES:
        return getVisibilities();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATASOURCE_ID:
        return isSetDatasourceId();
      case VISIBILITIES:
        return isSetVisibilities();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listFeatures_args)
        return this.equals((listFeatures_args)that);
      return false;
    }

    public boolean equals(listFeatures_args that) {
      if (that == null)
        return false;

      boolean this_present_datasourceId = true && this.isSetDatasourceId();
      boolean that_present_datasourceId = true && that.isSetDatasourceId();
      if (this_present_datasourceId || that_present_datasourceId) {
        if (!(this_present_datasourceId && that_present_datasourceId))
          return false;
        if (!this.datasourceId.equals(that.datasourceId))
          return false;
      }

      boolean this_present_visibilities = true && this.isSetVisibilities();
      boolean that_present_visibilities = true && that.isSetVisibilities();
      if (this_present_visibilities || that_present_visibilities) {
        if (!(this_present_visibilities && that_present_visibilities))
          return false;
        if (!this.visibilities.equals(that.visibilities))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(listFeatures_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      listFeatures_args typedOther = (listFeatures_args)other;

      lastComparison = Boolean.valueOf(isSetDatasourceId()).compareTo(typedOther.isSetDatasourceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDatasourceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datasourceId, typedOther.datasourceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVisibilities()).compareTo(typedOther.isSetVisibilities());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVisibilities()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.visibilities, typedOther.visibilities);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listFeatures_args(");
      boolean first = true;

      sb.append("datasourceId:");
      if (this.datasourceId == null) {
        sb.append("null");
      } else {
        sb.append(this.datasourceId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("visibilities:");
      if (this.visibilities == null) {
        sb.append("null");
      } else {
        sb.append(this.visibilities);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listFeatures_argsStandardSchemeFactory implements SchemeFactory {
      public listFeatures_argsStandardScheme getScheme() {
        return new listFeatures_argsStandardScheme();
      }
    }

    private static class listFeatures_argsStandardScheme extends StandardScheme<listFeatures_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listFeatures_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATASOURCE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.datasourceId = iprot.readString();
                struct.setDatasourceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VISIBILITIES
              if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                {
                  org.apache.thrift.protocol.TSet _set120 = iprot.readSetBegin();
                  struct.visibilities = new HashSet<String>(2*_set120.size);
                  for (int _i121 = 0; _i121 < _set120.size; ++_i121)
                  {
                    String _elem122; // required
                    _elem122 = iprot.readString();
                    struct.visibilities.add(_elem122);
                  }
                  iprot.readSetEnd();
                }
                struct.setVisibilitiesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listFeatures_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.datasourceId != null) {
          oprot.writeFieldBegin(DATASOURCE_ID_FIELD_DESC);
          oprot.writeString(struct.datasourceId);
          oprot.writeFieldEnd();
        }
        if (struct.visibilities != null) {
          oprot.writeFieldBegin(VISIBILITIES_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.visibilities.size()));
            for (String _iter123 : struct.visibilities)
            {
              oprot.writeString(_iter123);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listFeatures_argsTupleSchemeFactory implements SchemeFactory {
      public listFeatures_argsTupleScheme getScheme() {
        return new listFeatures_argsTupleScheme();
      }
    }

    private static class listFeatures_argsTupleScheme extends TupleScheme<listFeatures_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listFeatures_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDatasourceId()) {
          optionals.set(0);
        }
        if (struct.isSetVisibilities()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetDatasourceId()) {
          oprot.writeString(struct.datasourceId);
        }
        if (struct.isSetVisibilities()) {
          {
            oprot.writeI32(struct.visibilities.size());
            for (String _iter124 : struct.visibilities)
            {
              oprot.writeString(_iter124);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listFeatures_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.datasourceId = iprot.readString();
          struct.setDatasourceIdIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TSet _set125 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.visibilities = new HashSet<String>(2*_set125.size);
            for (int _i126 = 0; _i126 < _set125.size; ++_i126)
            {
              String _elem127; // required
              _elem127 = iprot.readString();
              struct.visibilities.add(_elem127);
            }
          }
          struct.setVisibilitiesIsSet(true);
        }
      }
    }

  }

  public static class listFeatures_result implements org.apache.thrift.TBase<listFeatures_result, listFeatures_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listFeatures_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listFeatures_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listFeatures_resultTupleSchemeFactory());
    }

    public List<com._42six.amino.common.thrift.TFeatureMetadata> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com._42six.amino.common.thrift.TFeatureMetadata.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listFeatures_result.class, metaDataMap);
    }

    public listFeatures_result() {
    }

    public listFeatures_result(
      List<com._42six.amino.common.thrift.TFeatureMetadata> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listFeatures_result(listFeatures_result other) {
      if (other.isSetSuccess()) {
        List<com._42six.amino.common.thrift.TFeatureMetadata> __this__success = new ArrayList<com._42six.amino.common.thrift.TFeatureMetadata>();
        for (com._42six.amino.common.thrift.TFeatureMetadata other_element : other.success) {
          __this__success.add(new com._42six.amino.common.thrift.TFeatureMetadata(other_element));
        }
        this.success = __this__success;
      }
    }

    public listFeatures_result deepCopy() {
      return new listFeatures_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com._42six.amino.common.thrift.TFeatureMetadata> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com._42six.amino.common.thrift.TFeatureMetadata elem) {
      if (this.success == null) {
        this.success = new ArrayList<com._42six.amino.common.thrift.TFeatureMetadata>();
      }
      this.success.add(elem);
    }

    public List<com._42six.amino.common.thrift.TFeatureMetadata> getSuccess() {
      return this.success;
    }

    public listFeatures_result setSuccess(List<com._42six.amino.common.thrift.TFeatureMetadata> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com._42six.amino.common.thrift.TFeatureMetadata>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listFeatures_result)
        return this.equals((listFeatures_result)that);
      return false;
    }

    public boolean equals(listFeatures_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(listFeatures_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      listFeatures_result typedOther = (listFeatures_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listFeatures_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listFeatures_resultStandardSchemeFactory implements SchemeFactory {
      public listFeatures_resultStandardScheme getScheme() {
        return new listFeatures_resultStandardScheme();
      }
    }

    private static class listFeatures_resultStandardScheme extends StandardScheme<listFeatures_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listFeatures_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list128 = iprot.readListBegin();
                  struct.success = new ArrayList<com._42six.amino.common.thrift.TFeatureMetadata>(_list128.size);
                  for (int _i129 = 0; _i129 < _list128.size; ++_i129)
                  {
                    com._42six.amino.common.thrift.TFeatureMetadata _elem130; // required
                    _elem130 = new com._42six.amino.common.thrift.TFeatureMetadata();
                    _elem130.read(iprot);
                    struct.success.add(_elem130);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listFeatures_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com._42six.amino.common.thrift.TFeatureMetadata _iter131 : struct.success)
            {
              _iter131.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listFeatures_resultTupleSchemeFactory implements SchemeFactory {
      public listFeatures_resultTupleScheme getScheme() {
        return new listFeatures_resultTupleScheme();
      }
    }

    private static class listFeatures_resultTupleScheme extends TupleScheme<listFeatures_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listFeatures_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com._42six.amino.common.thrift.TFeatureMetadata _iter132 : struct.success)
            {
              _iter132.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listFeatures_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list133 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com._42six.amino.common.thrift.TFeatureMetadata>(_list133.size);
            for (int _i134 = 0; _i134 < _list133.size; ++_i134)
            {
              com._42six.amino.common.thrift.TFeatureMetadata _elem135; // required
              _elem135 = new com._42six.amino.common.thrift.TFeatureMetadata();
              _elem135.read(iprot);
              struct.success.add(_elem135);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class listBuckets_args implements org.apache.thrift.TBase<listBuckets_args, listBuckets_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listBuckets_args");

    private static final org.apache.thrift.protocol.TField DATASOURCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("datasourceId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField VISIBILITIES_FIELD_DESC = new org.apache.thrift.protocol.TField("visibilities", org.apache.thrift.protocol.TType.SET, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listBuckets_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listBuckets_argsTupleSchemeFactory());
    }

    public String datasourceId; // required
    public Set<String> visibilities; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATASOURCE_ID((short)1, "datasourceId"),
      VISIBILITIES((short)2, "visibilities");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATASOURCE_ID
            return DATASOURCE_ID;
          case 2: // VISIBILITIES
            return VISIBILITIES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATASOURCE_ID, new org.apache.thrift.meta_data.FieldMetaData("datasourceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.VISIBILITIES, new org.apache.thrift.meta_data.FieldMetaData("visibilities", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listBuckets_args.class, metaDataMap);
    }

    public listBuckets_args() {
    }

    public listBuckets_args(
      String datasourceId,
      Set<String> visibilities)
    {
      this();
      this.datasourceId = datasourceId;
      this.visibilities = visibilities;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listBuckets_args(listBuckets_args other) {
      if (other.isSetDatasourceId()) {
        this.datasourceId = other.datasourceId;
      }
      if (other.isSetVisibilities()) {
        Set<String> __this__visibilities = new HashSet<String>();
        for (String other_element : other.visibilities) {
          __this__visibilities.add(other_element);
        }
        this.visibilities = __this__visibilities;
      }
    }

    public listBuckets_args deepCopy() {
      return new listBuckets_args(this);
    }

    @Override
    public void clear() {
      this.datasourceId = null;
      this.visibilities = null;
    }

    public String getDatasourceId() {
      return this.datasourceId;
    }

    public listBuckets_args setDatasourceId(String datasourceId) {
      this.datasourceId = datasourceId;
      return this;
    }

    public void unsetDatasourceId() {
      this.datasourceId = null;
    }

    /** Returns true if field datasourceId is set (has been assigned a value) and false otherwise */
    public boolean isSetDatasourceId() {
      return this.datasourceId != null;
    }

    public void setDatasourceIdIsSet(boolean value) {
      if (!value) {
        this.datasourceId = null;
      }
    }

    public int getVisibilitiesSize() {
      return (this.visibilities == null) ? 0 : this.visibilities.size();
    }

    public java.util.Iterator<String> getVisibilitiesIterator() {
      return (this.visibilities == null) ? null : this.visibilities.iterator();
    }

    public void addToVisibilities(String elem) {
      if (this.visibilities == null) {
        this.visibilities = new HashSet<String>();
      }
      this.visibilities.add(elem);
    }

    public Set<String> getVisibilities() {
      return this.visibilities;
    }

    public listBuckets_args setVisibilities(Set<String> visibilities) {
      this.visibilities = visibilities;
      return this;
    }

    public void unsetVisibilities() {
      this.visibilities = null;
    }

    /** Returns true if field visibilities is set (has been assigned a value) and false otherwise */
    public boolean isSetVisibilities() {
      return this.visibilities != null;
    }

    public void setVisibilitiesIsSet(boolean value) {
      if (!value) {
        this.visibilities = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATASOURCE_ID:
        if (value == null) {
          unsetDatasourceId();
        } else {
          setDatasourceId((String)value);
        }
        break;

      case VISIBILITIES:
        if (value == null) {
          unsetVisibilities();
        } else {
          setVisibilities((Set<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATASOURCE_ID:
        return getDatasourceId();

      case VISIBILITIES:
        return getVisibilities();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATASOURCE_ID:
        return isSetDatasourceId();
      case VISIBILITIES:
        return isSetVisibilities();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listBuckets_args)
        return this.equals((listBuckets_args)that);
      return false;
    }

    public boolean equals(listBuckets_args that) {
      if (that == null)
        return false;

      boolean this_present_datasourceId = true && this.isSetDatasourceId();
      boolean that_present_datasourceId = true && that.isSetDatasourceId();
      if (this_present_datasourceId || that_present_datasourceId) {
        if (!(this_present_datasourceId && that_present_datasourceId))
          return false;
        if (!this.datasourceId.equals(that.datasourceId))
          return false;
      }

      boolean this_present_visibilities = true && this.isSetVisibilities();
      boolean that_present_visibilities = true && that.isSetVisibilities();
      if (this_present_visibilities || that_present_visibilities) {
        if (!(this_present_visibilities && that_present_visibilities))
          return false;
        if (!this.visibilities.equals(that.visibilities))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(listBuckets_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      listBuckets_args typedOther = (listBuckets_args)other;

      lastComparison = Boolean.valueOf(isSetDatasourceId()).compareTo(typedOther.isSetDatasourceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDatasourceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datasourceId, typedOther.datasourceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVisibilities()).compareTo(typedOther.isSetVisibilities());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVisibilities()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.visibilities, typedOther.visibilities);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listBuckets_args(");
      boolean first = true;

      sb.append("datasourceId:");
      if (this.datasourceId == null) {
        sb.append("null");
      } else {
        sb.append(this.datasourceId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("visibilities:");
      if (this.visibilities == null) {
        sb.append("null");
      } else {
        sb.append(this.visibilities);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listBuckets_argsStandardSchemeFactory implements SchemeFactory {
      public listBuckets_argsStandardScheme getScheme() {
        return new listBuckets_argsStandardScheme();
      }
    }

    private static class listBuckets_argsStandardScheme extends StandardScheme<listBuckets_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listBuckets_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATASOURCE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.datasourceId = iprot.readString();
                struct.setDatasourceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VISIBILITIES
              if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                {
                  org.apache.thrift.protocol.TSet _set136 = iprot.readSetBegin();
                  struct.visibilities = new HashSet<String>(2*_set136.size);
                  for (int _i137 = 0; _i137 < _set136.size; ++_i137)
                  {
                    String _elem138; // required
                    _elem138 = iprot.readString();
                    struct.visibilities.add(_elem138);
                  }
                  iprot.readSetEnd();
                }
                struct.setVisibilitiesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listBuckets_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.datasourceId != null) {
          oprot.writeFieldBegin(DATASOURCE_ID_FIELD_DESC);
          oprot.writeString(struct.datasourceId);
          oprot.writeFieldEnd();
        }
        if (struct.visibilities != null) {
          oprot.writeFieldBegin(VISIBILITIES_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.visibilities.size()));
            for (String _iter139 : struct.visibilities)
            {
              oprot.writeString(_iter139);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listBuckets_argsTupleSchemeFactory implements SchemeFactory {
      public listBuckets_argsTupleScheme getScheme() {
        return new listBuckets_argsTupleScheme();
      }
    }

    private static class listBuckets_argsTupleScheme extends TupleScheme<listBuckets_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listBuckets_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDatasourceId()) {
          optionals.set(0);
        }
        if (struct.isSetVisibilities()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetDatasourceId()) {
          oprot.writeString(struct.datasourceId);
        }
        if (struct.isSetVisibilities()) {
          {
            oprot.writeI32(struct.visibilities.size());
            for (String _iter140 : struct.visibilities)
            {
              oprot.writeString(_iter140);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listBuckets_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.datasourceId = iprot.readString();
          struct.setDatasourceIdIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TSet _set141 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.visibilities = new HashSet<String>(2*_set141.size);
            for (int _i142 = 0; _i142 < _set141.size; ++_i142)
            {
              String _elem143; // required
              _elem143 = iprot.readString();
              struct.visibilities.add(_elem143);
            }
          }
          struct.setVisibilitiesIsSet(true);
        }
      }
    }

  }

  public static class listBuckets_result implements org.apache.thrift.TBase<listBuckets_result, listBuckets_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listBuckets_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listBuckets_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listBuckets_resultTupleSchemeFactory());
    }

    public List<com._42six.amino.common.thrift.TBucketMetadata> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com._42six.amino.common.thrift.TBucketMetadata.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listBuckets_result.class, metaDataMap);
    }

    public listBuckets_result() {
    }

    public listBuckets_result(
      List<com._42six.amino.common.thrift.TBucketMetadata> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listBuckets_result(listBuckets_result other) {
      if (other.isSetSuccess()) {
        List<com._42six.amino.common.thrift.TBucketMetadata> __this__success = new ArrayList<com._42six.amino.common.thrift.TBucketMetadata>();
        for (com._42six.amino.common.thrift.TBucketMetadata other_element : other.success) {
          __this__success.add(new com._42six.amino.common.thrift.TBucketMetadata(other_element));
        }
        this.success = __this__success;
      }
    }

    public listBuckets_result deepCopy() {
      return new listBuckets_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com._42six.amino.common.thrift.TBucketMetadata> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com._42six.amino.common.thrift.TBucketMetadata elem) {
      if (this.success == null) {
        this.success = new ArrayList<com._42six.amino.common.thrift.TBucketMetadata>();
      }
      this.success.add(elem);
    }

    public List<com._42six.amino.common.thrift.TBucketMetadata> getSuccess() {
      return this.success;
    }

    public listBuckets_result setSuccess(List<com._42six.amino.common.thrift.TBucketMetadata> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com._42six.amino.common.thrift.TBucketMetadata>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listBuckets_result)
        return this.equals((listBuckets_result)that);
      return false;
    }

    public boolean equals(listBuckets_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(listBuckets_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      listBuckets_result typedOther = (listBuckets_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listBuckets_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listBuckets_resultStandardSchemeFactory implements SchemeFactory {
      public listBuckets_resultStandardScheme getScheme() {
        return new listBuckets_resultStandardScheme();
      }
    }

    private static class listBuckets_resultStandardScheme extends StandardScheme<listBuckets_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listBuckets_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list144 = iprot.readListBegin();
                  struct.success = new ArrayList<com._42six.amino.common.thrift.TBucketMetadata>(_list144.size);
                  for (int _i145 = 0; _i145 < _list144.size; ++_i145)
                  {
                    com._42six.amino.common.thrift.TBucketMetadata _elem146; // required
                    _elem146 = new com._42six.amino.common.thrift.TBucketMetadata();
                    _elem146.read(iprot);
                    struct.success.add(_elem146);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listBuckets_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com._42six.amino.common.thrift.TBucketMetadata _iter147 : struct.success)
            {
              _iter147.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listBuckets_resultTupleSchemeFactory implements SchemeFactory {
      public listBuckets_resultTupleScheme getScheme() {
        return new listBuckets_resultTupleScheme();
      }
    }

    private static class listBuckets_resultTupleScheme extends TupleScheme<listBuckets_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listBuckets_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com._42six.amino.common.thrift.TBucketMetadata _iter148 : struct.success)
            {
              _iter148.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listBuckets_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list149 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com._42six.amino.common.thrift.TBucketMetadata>(_list149.size);
            for (int _i150 = 0; _i150 < _list149.size; ++_i150)
            {
              com._42six.amino.common.thrift.TBucketMetadata _elem151; // required
              _elem151 = new com._42six.amino.common.thrift.TBucketMetadata();
              _elem151.read(iprot);
              struct.success.add(_elem151);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getDataSource_args implements org.apache.thrift.TBase<getDataSource_args, getDataSource_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDataSource_args");

    private static final org.apache.thrift.protocol.TField DATA_SOURCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("dataSourceId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField VISIBILITIES_FIELD_DESC = new org.apache.thrift.protocol.TField("visibilities", org.apache.thrift.protocol.TType.SET, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getDataSource_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getDataSource_argsTupleSchemeFactory());
    }

    public String dataSourceId; // required
    public Set<String> visibilities; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATA_SOURCE_ID((short)1, "dataSourceId"),
      VISIBILITIES((short)2, "visibilities");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATA_SOURCE_ID
            return DATA_SOURCE_ID;
          case 2: // VISIBILITIES
            return VISIBILITIES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATA_SOURCE_ID, new org.apache.thrift.meta_data.FieldMetaData("dataSourceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.VISIBILITIES, new org.apache.thrift.meta_data.FieldMetaData("visibilities", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDataSource_args.class, metaDataMap);
    }

    public getDataSource_args() {
    }

    public getDataSource_args(
      String dataSourceId,
      Set<String> visibilities)
    {
      this();
      this.dataSourceId = dataSourceId;
      this.visibilities = visibilities;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDataSource_args(getDataSource_args other) {
      if (other.isSetDataSourceId()) {
        this.dataSourceId = other.dataSourceId;
      }
      if (other.isSetVisibilities()) {
        Set<String> __this__visibilities = new HashSet<String>();
        for (String other_element : other.visibilities) {
          __this__visibilities.add(other_element);
        }
        this.visibilities = __this__visibilities;
      }
    }

    public getDataSource_args deepCopy() {
      return new getDataSource_args(this);
    }

    @Override
    public void clear() {
      this.dataSourceId = null;
      this.visibilities = null;
    }

    public String getDataSourceId() {
      return this.dataSourceId;
    }

    public getDataSource_args setDataSourceId(String dataSourceId) {
      this.dataSourceId = dataSourceId;
      return this;
    }

    public void unsetDataSourceId() {
      this.dataSourceId = null;
    }

    /** Returns true if field dataSourceId is set (has been assigned a value) and false otherwise */
    public boolean isSetDataSourceId() {
      return this.dataSourceId != null;
    }

    public void setDataSourceIdIsSet(boolean value) {
      if (!value) {
        this.dataSourceId = null;
      }
    }

    public int getVisibilitiesSize() {
      return (this.visibilities == null) ? 0 : this.visibilities.size();
    }

    public java.util.Iterator<String> getVisibilitiesIterator() {
      return (this.visibilities == null) ? null : this.visibilities.iterator();
    }

    public void addToVisibilities(String elem) {
      if (this.visibilities == null) {
        this.visibilities = new HashSet<String>();
      }
      this.visibilities.add(elem);
    }

    public Set<String> getVisibilities() {
      return this.visibilities;
    }

    public getDataSource_args setVisibilities(Set<String> visibilities) {
      this.visibilities = visibilities;
      return this;
    }

    public void unsetVisibilities() {
      this.visibilities = null;
    }

    /** Returns true if field visibilities is set (has been assigned a value) and false otherwise */
    public boolean isSetVisibilities() {
      return this.visibilities != null;
    }

    public void setVisibilitiesIsSet(boolean value) {
      if (!value) {
        this.visibilities = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATA_SOURCE_ID:
        if (value == null) {
          unsetDataSourceId();
        } else {
          setDataSourceId((String)value);
        }
        break;

      case VISIBILITIES:
        if (value == null) {
          unsetVisibilities();
        } else {
          setVisibilities((Set<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATA_SOURCE_ID:
        return getDataSourceId();

      case VISIBILITIES:
        return getVisibilities();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATA_SOURCE_ID:
        return isSetDataSourceId();
      case VISIBILITIES:
        return isSetVisibilities();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDataSource_args)
        return this.equals((getDataSource_args)that);
      return false;
    }

    public boolean equals(getDataSource_args that) {
      if (that == null)
        return false;

      boolean this_present_dataSourceId = true && this.isSetDataSourceId();
      boolean that_present_dataSourceId = true && that.isSetDataSourceId();
      if (this_present_dataSourceId || that_present_dataSourceId) {
        if (!(this_present_dataSourceId && that_present_dataSourceId))
          return false;
        if (!this.dataSourceId.equals(that.dataSourceId))
          return false;
      }

      boolean this_present_visibilities = true && this.isSetVisibilities();
      boolean that_present_visibilities = true && that.isSetVisibilities();
      if (this_present_visibilities || that_present_visibilities) {
        if (!(this_present_visibilities && that_present_visibilities))
          return false;
        if (!this.visibilities.equals(that.visibilities))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getDataSource_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getDataSource_args typedOther = (getDataSource_args)other;

      lastComparison = Boolean.valueOf(isSetDataSourceId()).compareTo(typedOther.isSetDataSourceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDataSourceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataSourceId, typedOther.dataSourceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVisibilities()).compareTo(typedOther.isSetVisibilities());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVisibilities()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.visibilities, typedOther.visibilities);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getDataSource_args(");
      boolean first = true;

      sb.append("dataSourceId:");
      if (this.dataSourceId == null) {
        sb.append("null");
      } else {
        sb.append(this.dataSourceId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("visibilities:");
      if (this.visibilities == null) {
        sb.append("null");
      } else {
        sb.append(this.visibilities);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDataSource_argsStandardSchemeFactory implements SchemeFactory {
      public getDataSource_argsStandardScheme getScheme() {
        return new getDataSource_argsStandardScheme();
      }
    }

    private static class getDataSource_argsStandardScheme extends StandardScheme<getDataSource_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDataSource_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATA_SOURCE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.dataSourceId = iprot.readString();
                struct.setDataSourceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VISIBILITIES
              if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                {
                  org.apache.thrift.protocol.TSet _set152 = iprot.readSetBegin();
                  struct.visibilities = new HashSet<String>(2*_set152.size);
                  for (int _i153 = 0; _i153 < _set152.size; ++_i153)
                  {
                    String _elem154; // required
                    _elem154 = iprot.readString();
                    struct.visibilities.add(_elem154);
                  }
                  iprot.readSetEnd();
                }
                struct.setVisibilitiesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDataSource_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.dataSourceId != null) {
          oprot.writeFieldBegin(DATA_SOURCE_ID_FIELD_DESC);
          oprot.writeString(struct.dataSourceId);
          oprot.writeFieldEnd();
        }
        if (struct.visibilities != null) {
          oprot.writeFieldBegin(VISIBILITIES_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.visibilities.size()));
            for (String _iter155 : struct.visibilities)
            {
              oprot.writeString(_iter155);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDataSource_argsTupleSchemeFactory implements SchemeFactory {
      public getDataSource_argsTupleScheme getScheme() {
        return new getDataSource_argsTupleScheme();
      }
    }

    private static class getDataSource_argsTupleScheme extends TupleScheme<getDataSource_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDataSource_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDataSourceId()) {
          optionals.set(0);
        }
        if (struct.isSetVisibilities()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetDataSourceId()) {
          oprot.writeString(struct.dataSourceId);
        }
        if (struct.isSetVisibilities()) {
          {
            oprot.writeI32(struct.visibilities.size());
            for (String _iter156 : struct.visibilities)
            {
              oprot.writeString(_iter156);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDataSource_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.dataSourceId = iprot.readString();
          struct.setDataSourceIdIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TSet _set157 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.visibilities = new HashSet<String>(2*_set157.size);
            for (int _i158 = 0; _i158 < _set157.size; ++_i158)
            {
              String _elem159; // required
              _elem159 = iprot.readString();
              struct.visibilities.add(_elem159);
            }
          }
          struct.setVisibilitiesIsSet(true);
        }
      }
    }

  }

  public static class getDataSource_result implements org.apache.thrift.TBase<getDataSource_result, getDataSource_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDataSource_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getDataSource_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getDataSource_resultTupleSchemeFactory());
    }

    public com._42six.amino.common.thrift.TDatasourceMetadata success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com._42six.amino.common.thrift.TDatasourceMetadata.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDataSource_result.class, metaDataMap);
    }

    public getDataSource_result() {
    }

    public getDataSource_result(
      com._42six.amino.common.thrift.TDatasourceMetadata success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDataSource_result(getDataSource_result other) {
      if (other.isSetSuccess()) {
        this.success = new com._42six.amino.common.thrift.TDatasourceMetadata(other.success);
      }
    }

    public getDataSource_result deepCopy() {
      return new getDataSource_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com._42six.amino.common.thrift.TDatasourceMetadata getSuccess() {
      return this.success;
    }

    public getDataSource_result setSuccess(com._42six.amino.common.thrift.TDatasourceMetadata success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com._42six.amino.common.thrift.TDatasourceMetadata)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDataSource_result)
        return this.equals((getDataSource_result)that);
      return false;
    }

    public boolean equals(getDataSource_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getDataSource_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getDataSource_result typedOther = (getDataSource_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getDataSource_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDataSource_resultStandardSchemeFactory implements SchemeFactory {
      public getDataSource_resultStandardScheme getScheme() {
        return new getDataSource_resultStandardScheme();
      }
    }

    private static class getDataSource_resultStandardScheme extends StandardScheme<getDataSource_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDataSource_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com._42six.amino.common.thrift.TDatasourceMetadata();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDataSource_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDataSource_resultTupleSchemeFactory implements SchemeFactory {
      public getDataSource_resultTupleScheme getScheme() {
        return new getDataSource_resultTupleScheme();
      }
    }

    private static class getDataSource_resultTupleScheme extends TupleScheme<getDataSource_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDataSource_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDataSource_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com._42six.amino.common.thrift.TDatasourceMetadata();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getFeature_args implements org.apache.thrift.TBase<getFeature_args, getFeature_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFeature_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField VISIBILITIES_FIELD_DESC = new org.apache.thrift.protocol.TField("visibilities", org.apache.thrift.protocol.TType.SET, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFeature_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFeature_argsTupleSchemeFactory());
    }

    public String id; // required
    public Set<String> visibilities; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id"),
      VISIBILITIES((short)2, "visibilities");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          case 2: // VISIBILITIES
            return VISIBILITIES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.VISIBILITIES, new org.apache.thrift.meta_data.FieldMetaData("visibilities", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFeature_args.class, metaDataMap);
    }

    public getFeature_args() {
    }

    public getFeature_args(
      String id,
      Set<String> visibilities)
    {
      this();
      this.id = id;
      this.visibilities = visibilities;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFeature_args(getFeature_args other) {
      if (other.isSetId()) {
        this.id = other.id;
      }
      if (other.isSetVisibilities()) {
        Set<String> __this__visibilities = new HashSet<String>();
        for (String other_element : other.visibilities) {
          __this__visibilities.add(other_element);
        }
        this.visibilities = __this__visibilities;
      }
    }

    public getFeature_args deepCopy() {
      return new getFeature_args(this);
    }

    @Override
    public void clear() {
      this.id = null;
      this.visibilities = null;
    }

    public String getId() {
      return this.id;
    }

    public getFeature_args setId(String id) {
      this.id = id;
      return this;
    }

    public void unsetId() {
      this.id = null;
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return this.id != null;
    }

    public void setIdIsSet(boolean value) {
      if (!value) {
        this.id = null;
      }
    }

    public int getVisibilitiesSize() {
      return (this.visibilities == null) ? 0 : this.visibilities.size();
    }

    public java.util.Iterator<String> getVisibilitiesIterator() {
      return (this.visibilities == null) ? null : this.visibilities.iterator();
    }

    public void addToVisibilities(String elem) {
      if (this.visibilities == null) {
        this.visibilities = new HashSet<String>();
      }
      this.visibilities.add(elem);
    }

    public Set<String> getVisibilities() {
      return this.visibilities;
    }

    public getFeature_args setVisibilities(Set<String> visibilities) {
      this.visibilities = visibilities;
      return this;
    }

    public void unsetVisibilities() {
      this.visibilities = null;
    }

    /** Returns true if field visibilities is set (has been assigned a value) and false otherwise */
    public boolean isSetVisibilities() {
      return this.visibilities != null;
    }

    public void setVisibilitiesIsSet(boolean value) {
      if (!value) {
        this.visibilities = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((String)value);
        }
        break;

      case VISIBILITIES:
        if (value == null) {
          unsetVisibilities();
        } else {
          setVisibilities((Set<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return getId();

      case VISIBILITIES:
        return getVisibilities();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      case VISIBILITIES:
        return isSetVisibilities();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFeature_args)
        return this.equals((getFeature_args)that);
      return false;
    }

    public boolean equals(getFeature_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true && this.isSetId();
      boolean that_present_id = true && that.isSetId();
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (!this.id.equals(that.id))
          return false;
      }

      boolean this_present_visibilities = true && this.isSetVisibilities();
      boolean that_present_visibilities = true && that.isSetVisibilities();
      if (this_present_visibilities || that_present_visibilities) {
        if (!(this_present_visibilities && that_present_visibilities))
          return false;
        if (!this.visibilities.equals(that.visibilities))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getFeature_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getFeature_args typedOther = (getFeature_args)other;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVisibilities()).compareTo(typedOther.isSetVisibilities());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVisibilities()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.visibilities, typedOther.visibilities);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFeature_args(");
      boolean first = true;

      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("visibilities:");
      if (this.visibilities == null) {
        sb.append("null");
      } else {
        sb.append(this.visibilities);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFeature_argsStandardSchemeFactory implements SchemeFactory {
      public getFeature_argsStandardScheme getScheme() {
        return new getFeature_argsStandardScheme();
      }
    }

    private static class getFeature_argsStandardScheme extends StandardScheme<getFeature_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFeature_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.id = iprot.readString();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VISIBILITIES
              if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                {
                  org.apache.thrift.protocol.TSet _set160 = iprot.readSetBegin();
                  struct.visibilities = new HashSet<String>(2*_set160.size);
                  for (int _i161 = 0; _i161 < _set160.size; ++_i161)
                  {
                    String _elem162; // required
                    _elem162 = iprot.readString();
                    struct.visibilities.add(_elem162);
                  }
                  iprot.readSetEnd();
                }
                struct.setVisibilitiesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFeature_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.id != null) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          oprot.writeString(struct.id);
          oprot.writeFieldEnd();
        }
        if (struct.visibilities != null) {
          oprot.writeFieldBegin(VISIBILITIES_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.visibilities.size()));
            for (String _iter163 : struct.visibilities)
            {
              oprot.writeString(_iter163);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFeature_argsTupleSchemeFactory implements SchemeFactory {
      public getFeature_argsTupleScheme getScheme() {
        return new getFeature_argsTupleScheme();
      }
    }

    private static class getFeature_argsTupleScheme extends TupleScheme<getFeature_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFeature_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        if (struct.isSetVisibilities()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetId()) {
          oprot.writeString(struct.id);
        }
        if (struct.isSetVisibilities()) {
          {
            oprot.writeI32(struct.visibilities.size());
            for (String _iter164 : struct.visibilities)
            {
              oprot.writeString(_iter164);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFeature_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.id = iprot.readString();
          struct.setIdIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TSet _set165 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.visibilities = new HashSet<String>(2*_set165.size);
            for (int _i166 = 0; _i166 < _set165.size; ++_i166)
            {
              String _elem167; // required
              _elem167 = iprot.readString();
              struct.visibilities.add(_elem167);
            }
          }
          struct.setVisibilitiesIsSet(true);
        }
      }
    }

  }

  public static class getFeature_result implements org.apache.thrift.TBase<getFeature_result, getFeature_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFeature_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFeature_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFeature_resultTupleSchemeFactory());
    }

    public com._42six.amino.common.thrift.TFeatureMetadata success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com._42six.amino.common.thrift.TFeatureMetadata.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFeature_result.class, metaDataMap);
    }

    public getFeature_result() {
    }

    public getFeature_result(
      com._42six.amino.common.thrift.TFeatureMetadata success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFeature_result(getFeature_result other) {
      if (other.isSetSuccess()) {
        this.success = new com._42six.amino.common.thrift.TFeatureMetadata(other.success);
      }
    }

    public getFeature_result deepCopy() {
      return new getFeature_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com._42six.amino.common.thrift.TFeatureMetadata getSuccess() {
      return this.success;
    }

    public getFeature_result setSuccess(com._42six.amino.common.thrift.TFeatureMetadata success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com._42six.amino.common.thrift.TFeatureMetadata)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFeature_result)
        return this.equals((getFeature_result)that);
      return false;
    }

    public boolean equals(getFeature_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getFeature_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getFeature_result typedOther = (getFeature_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFeature_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFeature_resultStandardSchemeFactory implements SchemeFactory {
      public getFeature_resultStandardScheme getScheme() {
        return new getFeature_resultStandardScheme();
      }
    }

    private static class getFeature_resultStandardScheme extends StandardScheme<getFeature_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFeature_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com._42six.amino.common.thrift.TFeatureMetadata();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFeature_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFeature_resultTupleSchemeFactory implements SchemeFactory {
      public getFeature_resultTupleScheme getScheme() {
        return new getFeature_resultTupleScheme();
      }
    }

    private static class getFeature_resultTupleScheme extends TupleScheme<getFeature_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFeature_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFeature_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com._42six.amino.common.thrift.TFeatureMetadata();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getBucket_args implements org.apache.thrift.TBase<getBucket_args, getBucket_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBucket_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField VISIBILITIES_FIELD_DESC = new org.apache.thrift.protocol.TField("visibilities", org.apache.thrift.protocol.TType.SET, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBucket_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBucket_argsTupleSchemeFactory());
    }

    public String id; // required
    public Set<String> visibilities; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id"),
      VISIBILITIES((short)2, "visibilities");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          case 2: // VISIBILITIES
            return VISIBILITIES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.VISIBILITIES, new org.apache.thrift.meta_data.FieldMetaData("visibilities", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBucket_args.class, metaDataMap);
    }

    public getBucket_args() {
    }

    public getBucket_args(
      String id,
      Set<String> visibilities)
    {
      this();
      this.id = id;
      this.visibilities = visibilities;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBucket_args(getBucket_args other) {
      if (other.isSetId()) {
        this.id = other.id;
      }
      if (other.isSetVisibilities()) {
        Set<String> __this__visibilities = new HashSet<String>();
        for (String other_element : other.visibilities) {
          __this__visibilities.add(other_element);
        }
        this.visibilities = __this__visibilities;
      }
    }

    public getBucket_args deepCopy() {
      return new getBucket_args(this);
    }

    @Override
    public void clear() {
      this.id = null;
      this.visibilities = null;
    }

    public String getId() {
      return this.id;
    }

    public getBucket_args setId(String id) {
      this.id = id;
      return this;
    }

    public void unsetId() {
      this.id = null;
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return this.id != null;
    }

    public void setIdIsSet(boolean value) {
      if (!value) {
        this.id = null;
      }
    }

    public int getVisibilitiesSize() {
      return (this.visibilities == null) ? 0 : this.visibilities.size();
    }

    public java.util.Iterator<String> getVisibilitiesIterator() {
      return (this.visibilities == null) ? null : this.visibilities.iterator();
    }

    public void addToVisibilities(String elem) {
      if (this.visibilities == null) {
        this.visibilities = new HashSet<String>();
      }
      this.visibilities.add(elem);
    }

    public Set<String> getVisibilities() {
      return this.visibilities;
    }

    public getBucket_args setVisibilities(Set<String> visibilities) {
      this.visibilities = visibilities;
      return this;
    }

    public void unsetVisibilities() {
      this.visibilities = null;
    }

    /** Returns true if field visibilities is set (has been assigned a value) and false otherwise */
    public boolean isSetVisibilities() {
      return this.visibilities != null;
    }

    public void setVisibilitiesIsSet(boolean value) {
      if (!value) {
        this.visibilities = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((String)value);
        }
        break;

      case VISIBILITIES:
        if (value == null) {
          unsetVisibilities();
        } else {
          setVisibilities((Set<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return getId();

      case VISIBILITIES:
        return getVisibilities();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      case VISIBILITIES:
        return isSetVisibilities();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBucket_args)
        return this.equals((getBucket_args)that);
      return false;
    }

    public boolean equals(getBucket_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true && this.isSetId();
      boolean that_present_id = true && that.isSetId();
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (!this.id.equals(that.id))
          return false;
      }

      boolean this_present_visibilities = true && this.isSetVisibilities();
      boolean that_present_visibilities = true && that.isSetVisibilities();
      if (this_present_visibilities || that_present_visibilities) {
        if (!(this_present_visibilities && that_present_visibilities))
          return false;
        if (!this.visibilities.equals(that.visibilities))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getBucket_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getBucket_args typedOther = (getBucket_args)other;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVisibilities()).compareTo(typedOther.isSetVisibilities());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVisibilities()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.visibilities, typedOther.visibilities);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBucket_args(");
      boolean first = true;

      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("visibilities:");
      if (this.visibilities == null) {
        sb.append("null");
      } else {
        sb.append(this.visibilities);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBucket_argsStandardSchemeFactory implements SchemeFactory {
      public getBucket_argsStandardScheme getScheme() {
        return new getBucket_argsStandardScheme();
      }
    }

    private static class getBucket_argsStandardScheme extends StandardScheme<getBucket_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBucket_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.id = iprot.readString();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VISIBILITIES
              if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                {
                  org.apache.thrift.protocol.TSet _set168 = iprot.readSetBegin();
                  struct.visibilities = new HashSet<String>(2*_set168.size);
                  for (int _i169 = 0; _i169 < _set168.size; ++_i169)
                  {
                    String _elem170; // required
                    _elem170 = iprot.readString();
                    struct.visibilities.add(_elem170);
                  }
                  iprot.readSetEnd();
                }
                struct.setVisibilitiesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBucket_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.id != null) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          oprot.writeString(struct.id);
          oprot.writeFieldEnd();
        }
        if (struct.visibilities != null) {
          oprot.writeFieldBegin(VISIBILITIES_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.visibilities.size()));
            for (String _iter171 : struct.visibilities)
            {
              oprot.writeString(_iter171);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBucket_argsTupleSchemeFactory implements SchemeFactory {
      public getBucket_argsTupleScheme getScheme() {
        return new getBucket_argsTupleScheme();
      }
    }

    private static class getBucket_argsTupleScheme extends TupleScheme<getBucket_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBucket_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        if (struct.isSetVisibilities()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetId()) {
          oprot.writeString(struct.id);
        }
        if (struct.isSetVisibilities()) {
          {
            oprot.writeI32(struct.visibilities.size());
            for (String _iter172 : struct.visibilities)
            {
              oprot.writeString(_iter172);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBucket_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.id = iprot.readString();
          struct.setIdIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TSet _set173 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.visibilities = new HashSet<String>(2*_set173.size);
            for (int _i174 = 0; _i174 < _set173.size; ++_i174)
            {
              String _elem175; // required
              _elem175 = iprot.readString();
              struct.visibilities.add(_elem175);
            }
          }
          struct.setVisibilitiesIsSet(true);
        }
      }
    }

  }

  public static class getBucket_result implements org.apache.thrift.TBase<getBucket_result, getBucket_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBucket_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBucket_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBucket_resultTupleSchemeFactory());
    }

    public com._42six.amino.common.thrift.TBucketMetadata success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com._42six.amino.common.thrift.TBucketMetadata.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBucket_result.class, metaDataMap);
    }

    public getBucket_result() {
    }

    public getBucket_result(
      com._42six.amino.common.thrift.TBucketMetadata success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBucket_result(getBucket_result other) {
      if (other.isSetSuccess()) {
        this.success = new com._42six.amino.common.thrift.TBucketMetadata(other.success);
      }
    }

    public getBucket_result deepCopy() {
      return new getBucket_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com._42six.amino.common.thrift.TBucketMetadata getSuccess() {
      return this.success;
    }

    public getBucket_result setSuccess(com._42six.amino.common.thrift.TBucketMetadata success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com._42six.amino.common.thrift.TBucketMetadata)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBucket_result)
        return this.equals((getBucket_result)that);
      return false;
    }

    public boolean equals(getBucket_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getBucket_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getBucket_result typedOther = (getBucket_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBucket_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBucket_resultStandardSchemeFactory implements SchemeFactory {
      public getBucket_resultStandardScheme getScheme() {
        return new getBucket_resultStandardScheme();
      }
    }

    private static class getBucket_resultStandardScheme extends StandardScheme<getBucket_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBucket_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com._42six.amino.common.thrift.TBucketMetadata();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBucket_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBucket_resultTupleSchemeFactory implements SchemeFactory {
      public getBucket_resultTupleScheme getScheme() {
        return new getBucket_resultTupleScheme();
      }
    }

    private static class getBucket_resultTupleScheme extends TupleScheme<getBucket_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBucket_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBucket_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com._42six.amino.common.thrift.TBucketMetadata();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getHypothesis_args implements org.apache.thrift.TBase<getHypothesis_args, getHypothesis_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getHypothesis_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField OWNER_FIELD_DESC = new org.apache.thrift.protocol.TField("owner", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField HYPOTHESIS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hypothesisId", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField VISIBILITIES_FIELD_DESC = new org.apache.thrift.protocol.TField("visibilities", org.apache.thrift.protocol.TType.SET, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getHypothesis_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getHypothesis_argsTupleSchemeFactory());
    }

    public String userId; // required
    public String owner; // required
    public String hypothesisId; // required
    public Set<String> visibilities; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId"),
      OWNER((short)2, "owner"),
      HYPOTHESIS_ID((short)3, "hypothesisId"),
      VISIBILITIES((short)4, "visibilities");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          case 2: // OWNER
            return OWNER;
          case 3: // HYPOTHESIS_ID
            return HYPOTHESIS_ID;
          case 4: // VISIBILITIES
            return VISIBILITIES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OWNER, new org.apache.thrift.meta_data.FieldMetaData("owner", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.HYPOTHESIS_ID, new org.apache.thrift.meta_data.FieldMetaData("hypothesisId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.VISIBILITIES, new org.apache.thrift.meta_data.FieldMetaData("visibilities", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getHypothesis_args.class, metaDataMap);
    }

    public getHypothesis_args() {
    }

    public getHypothesis_args(
      String userId,
      String owner,
      String hypothesisId,
      Set<String> visibilities)
    {
      this();
      this.userId = userId;
      this.owner = owner;
      this.hypothesisId = hypothesisId;
      this.visibilities = visibilities;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getHypothesis_args(getHypothesis_args other) {
      if (other.isSetUserId()) {
        this.userId = other.userId;
      }
      if (other.isSetOwner()) {
        this.owner = other.owner;
      }
      if (other.isSetHypothesisId()) {
        this.hypothesisId = other.hypothesisId;
      }
      if (other.isSetVisibilities()) {
        Set<String> __this__visibilities = new HashSet<String>();
        for (String other_element : other.visibilities) {
          __this__visibilities.add(other_element);
        }
        this.visibilities = __this__visibilities;
      }
    }

    public getHypothesis_args deepCopy() {
      return new getHypothesis_args(this);
    }

    @Override
    public void clear() {
      this.userId = null;
      this.owner = null;
      this.hypothesisId = null;
      this.visibilities = null;
    }

    public String getUserId() {
      return this.userId;
    }

    public getHypothesis_args setUserId(String userId) {
      this.userId = userId;
      return this;
    }

    public void unsetUserId() {
      this.userId = null;
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return this.userId != null;
    }

    public void setUserIdIsSet(boolean value) {
      if (!value) {
        this.userId = null;
      }
    }

    public String getOwner() {
      return this.owner;
    }

    public getHypothesis_args setOwner(String owner) {
      this.owner = owner;
      return this;
    }

    public void unsetOwner() {
      this.owner = null;
    }

    /** Returns true if field owner is set (has been assigned a value) and false otherwise */
    public boolean isSetOwner() {
      return this.owner != null;
    }

    public void setOwnerIsSet(boolean value) {
      if (!value) {
        this.owner = null;
      }
    }

    public String getHypothesisId() {
      return this.hypothesisId;
    }

    public getHypothesis_args setHypothesisId(String hypothesisId) {
      this.hypothesisId = hypothesisId;
      return this;
    }

    public void unsetHypothesisId() {
      this.hypothesisId = null;
    }

    /** Returns true if field hypothesisId is set (has been assigned a value) and false otherwise */
    public boolean isSetHypothesisId() {
      return this.hypothesisId != null;
    }

    public void setHypothesisIdIsSet(boolean value) {
      if (!value) {
        this.hypothesisId = null;
      }
    }

    public int getVisibilitiesSize() {
      return (this.visibilities == null) ? 0 : this.visibilities.size();
    }

    public java.util.Iterator<String> getVisibilitiesIterator() {
      return (this.visibilities == null) ? null : this.visibilities.iterator();
    }

    public void addToVisibilities(String elem) {
      if (this.visibilities == null) {
        this.visibilities = new HashSet<String>();
      }
      this.visibilities.add(elem);
    }

    public Set<String> getVisibilities() {
      return this.visibilities;
    }

    public getHypothesis_args setVisibilities(Set<String> visibilities) {
      this.visibilities = visibilities;
      return this;
    }

    public void unsetVisibilities() {
      this.visibilities = null;
    }

    /** Returns true if field visibilities is set (has been assigned a value) and false otherwise */
    public boolean isSetVisibilities() {
      return this.visibilities != null;
    }

    public void setVisibilitiesIsSet(boolean value) {
      if (!value) {
        this.visibilities = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((String)value);
        }
        break;

      case OWNER:
        if (value == null) {
          unsetOwner();
        } else {
          setOwner((String)value);
        }
        break;

      case HYPOTHESIS_ID:
        if (value == null) {
          unsetHypothesisId();
        } else {
          setHypothesisId((String)value);
        }
        break;

      case VISIBILITIES:
        if (value == null) {
          unsetVisibilities();
        } else {
          setVisibilities((Set<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return getUserId();

      case OWNER:
        return getOwner();

      case HYPOTHESIS_ID:
        return getHypothesisId();

      case VISIBILITIES:
        return getVisibilities();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUserId();
      case OWNER:
        return isSetOwner();
      case HYPOTHESIS_ID:
        return isSetHypothesisId();
      case VISIBILITIES:
        return isSetVisibilities();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getHypothesis_args)
        return this.equals((getHypothesis_args)that);
      return false;
    }

    public boolean equals(getHypothesis_args that) {
      if (that == null)
        return false;

      boolean this_present_userId = true && this.isSetUserId();
      boolean that_present_userId = true && that.isSetUserId();
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (!this.userId.equals(that.userId))
          return false;
      }

      boolean this_present_owner = true && this.isSetOwner();
      boolean that_present_owner = true && that.isSetOwner();
      if (this_present_owner || that_present_owner) {
        if (!(this_present_owner && that_present_owner))
          return false;
        if (!this.owner.equals(that.owner))
          return false;
      }

      boolean this_present_hypothesisId = true && this.isSetHypothesisId();
      boolean that_present_hypothesisId = true && that.isSetHypothesisId();
      if (this_present_hypothesisId || that_present_hypothesisId) {
        if (!(this_present_hypothesisId && that_present_hypothesisId))
          return false;
        if (!this.hypothesisId.equals(that.hypothesisId))
          return false;
      }

      boolean this_present_visibilities = true && this.isSetVisibilities();
      boolean that_present_visibilities = true && that.isSetVisibilities();
      if (this_present_visibilities || that_present_visibilities) {
        if (!(this_present_visibilities && that_present_visibilities))
          return false;
        if (!this.visibilities.equals(that.visibilities))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getHypothesis_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getHypothesis_args typedOther = (getHypothesis_args)other;

      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(typedOther.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, typedOther.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOwner()).compareTo(typedOther.isSetOwner());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOwner()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.owner, typedOther.owner);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHypothesisId()).compareTo(typedOther.isSetHypothesisId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHypothesisId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hypothesisId, typedOther.hypothesisId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVisibilities()).compareTo(typedOther.isSetVisibilities());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVisibilities()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.visibilities, typedOther.visibilities);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getHypothesis_args(");
      boolean first = true;

      sb.append("userId:");
      if (this.userId == null) {
        sb.append("null");
      } else {
        sb.append(this.userId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("owner:");
      if (this.owner == null) {
        sb.append("null");
      } else {
        sb.append(this.owner);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hypothesisId:");
      if (this.hypothesisId == null) {
        sb.append("null");
      } else {
        sb.append(this.hypothesisId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("visibilities:");
      if (this.visibilities == null) {
        sb.append("null");
      } else {
        sb.append(this.visibilities);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getHypothesis_argsStandardSchemeFactory implements SchemeFactory {
      public getHypothesis_argsStandardScheme getScheme() {
        return new getHypothesis_argsStandardScheme();
      }
    }

    private static class getHypothesis_argsStandardScheme extends StandardScheme<getHypothesis_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getHypothesis_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userId = iprot.readString();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OWNER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.owner = iprot.readString();
                struct.setOwnerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // HYPOTHESIS_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.hypothesisId = iprot.readString();
                struct.setHypothesisIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // VISIBILITIES
              if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                {
                  org.apache.thrift.protocol.TSet _set176 = iprot.readSetBegin();
                  struct.visibilities = new HashSet<String>(2*_set176.size);
                  for (int _i177 = 0; _i177 < _set176.size; ++_i177)
                  {
                    String _elem178; // required
                    _elem178 = iprot.readString();
                    struct.visibilities.add(_elem178);
                  }
                  iprot.readSetEnd();
                }
                struct.setVisibilitiesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getHypothesis_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userId != null) {
          oprot.writeFieldBegin(USER_ID_FIELD_DESC);
          oprot.writeString(struct.userId);
          oprot.writeFieldEnd();
        }
        if (struct.owner != null) {
          oprot.writeFieldBegin(OWNER_FIELD_DESC);
          oprot.writeString(struct.owner);
          oprot.writeFieldEnd();
        }
        if (struct.hypothesisId != null) {
          oprot.writeFieldBegin(HYPOTHESIS_ID_FIELD_DESC);
          oprot.writeString(struct.hypothesisId);
          oprot.writeFieldEnd();
        }
        if (struct.visibilities != null) {
          oprot.writeFieldBegin(VISIBILITIES_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.visibilities.size()));
            for (String _iter179 : struct.visibilities)
            {
              oprot.writeString(_iter179);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getHypothesis_argsTupleSchemeFactory implements SchemeFactory {
      public getHypothesis_argsTupleScheme getScheme() {
        return new getHypothesis_argsTupleScheme();
      }
    }

    private static class getHypothesis_argsTupleScheme extends TupleScheme<getHypothesis_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getHypothesis_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserId()) {
          optionals.set(0);
        }
        if (struct.isSetOwner()) {
          optionals.set(1);
        }
        if (struct.isSetHypothesisId()) {
          optionals.set(2);
        }
        if (struct.isSetVisibilities()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetUserId()) {
          oprot.writeString(struct.userId);
        }
        if (struct.isSetOwner()) {
          oprot.writeString(struct.owner);
        }
        if (struct.isSetHypothesisId()) {
          oprot.writeString(struct.hypothesisId);
        }
        if (struct.isSetVisibilities()) {
          {
            oprot.writeI32(struct.visibilities.size());
            for (String _iter180 : struct.visibilities)
            {
              oprot.writeString(_iter180);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getHypothesis_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.userId = iprot.readString();
          struct.setUserIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.owner = iprot.readString();
          struct.setOwnerIsSet(true);
        }
        if (incoming.get(2)) {
          struct.hypothesisId = iprot.readString();
          struct.setHypothesisIdIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TSet _set181 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.visibilities = new HashSet<String>(2*_set181.size);
            for (int _i182 = 0; _i182 < _set181.size; ++_i182)
            {
              String _elem183; // required
              _elem183 = iprot.readString();
              struct.visibilities.add(_elem183);
            }
          }
          struct.setVisibilitiesIsSet(true);
        }
      }
    }

  }

  public static class getHypothesis_result implements org.apache.thrift.TBase<getHypothesis_result, getHypothesis_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getHypothesis_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getHypothesis_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getHypothesis_resultTupleSchemeFactory());
    }

    public com._42six.amino.common.thrift.THypothesis success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com._42six.amino.common.thrift.THypothesis.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getHypothesis_result.class, metaDataMap);
    }

    public getHypothesis_result() {
    }

    public getHypothesis_result(
      com._42six.amino.common.thrift.THypothesis success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getHypothesis_result(getHypothesis_result other) {
      if (other.isSetSuccess()) {
        this.success = new com._42six.amino.common.thrift.THypothesis(other.success);
      }
    }

    public getHypothesis_result deepCopy() {
      return new getHypothesis_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com._42six.amino.common.thrift.THypothesis getSuccess() {
      return this.success;
    }

    public getHypothesis_result setSuccess(com._42six.amino.common.thrift.THypothesis success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com._42six.amino.common.thrift.THypothesis)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getHypothesis_result)
        return this.equals((getHypothesis_result)that);
      return false;
    }

    public boolean equals(getHypothesis_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getHypothesis_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getHypothesis_result typedOther = (getHypothesis_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getHypothesis_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getHypothesis_resultStandardSchemeFactory implements SchemeFactory {
      public getHypothesis_resultStandardScheme getScheme() {
        return new getHypothesis_resultStandardScheme();
      }
    }

    private static class getHypothesis_resultStandardScheme extends StandardScheme<getHypothesis_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getHypothesis_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com._42six.amino.common.thrift.THypothesis();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getHypothesis_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getHypothesis_resultTupleSchemeFactory implements SchemeFactory {
      public getHypothesis_resultTupleScheme getScheme() {
        return new getHypothesis_resultTupleScheme();
      }
    }

    private static class getHypothesis_resultTupleScheme extends TupleScheme<getHypothesis_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getHypothesis_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getHypothesis_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com._42six.amino.common.thrift.THypothesis();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class listHypotheses_args implements org.apache.thrift.TBase<listHypotheses_args, listHypotheses_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listHypotheses_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField VISIBILITIES_FIELD_DESC = new org.apache.thrift.protocol.TField("visibilities", org.apache.thrift.protocol.TType.SET, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listHypotheses_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listHypotheses_argsTupleSchemeFactory());
    }

    public String userId; // required
    public Set<String> visibilities; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId"),
      VISIBILITIES((short)2, "visibilities");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          case 2: // VISIBILITIES
            return VISIBILITIES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.VISIBILITIES, new org.apache.thrift.meta_data.FieldMetaData("visibilities", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listHypotheses_args.class, metaDataMap);
    }

    public listHypotheses_args() {
    }

    public listHypotheses_args(
      String userId,
      Set<String> visibilities)
    {
      this();
      this.userId = userId;
      this.visibilities = visibilities;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listHypotheses_args(listHypotheses_args other) {
      if (other.isSetUserId()) {
        this.userId = other.userId;
      }
      if (other.isSetVisibilities()) {
        Set<String> __this__visibilities = new HashSet<String>();
        for (String other_element : other.visibilities) {
          __this__visibilities.add(other_element);
        }
        this.visibilities = __this__visibilities;
      }
    }

    public listHypotheses_args deepCopy() {
      return new listHypotheses_args(this);
    }

    @Override
    public void clear() {
      this.userId = null;
      this.visibilities = null;
    }

    public String getUserId() {
      return this.userId;
    }

    public listHypotheses_args setUserId(String userId) {
      this.userId = userId;
      return this;
    }

    public void unsetUserId() {
      this.userId = null;
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return this.userId != null;
    }

    public void setUserIdIsSet(boolean value) {
      if (!value) {
        this.userId = null;
      }
    }

    public int getVisibilitiesSize() {
      return (this.visibilities == null) ? 0 : this.visibilities.size();
    }

    public java.util.Iterator<String> getVisibilitiesIterator() {
      return (this.visibilities == null) ? null : this.visibilities.iterator();
    }

    public void addToVisibilities(String elem) {
      if (this.visibilities == null) {
        this.visibilities = new HashSet<String>();
      }
      this.visibilities.add(elem);
    }

    public Set<String> getVisibilities() {
      return this.visibilities;
    }

    public listHypotheses_args setVisibilities(Set<String> visibilities) {
      this.visibilities = visibilities;
      return this;
    }

    public void unsetVisibilities() {
      this.visibilities = null;
    }

    /** Returns true if field visibilities is set (has been assigned a value) and false otherwise */
    public boolean isSetVisibilities() {
      return this.visibilities != null;
    }

    public void setVisibilitiesIsSet(boolean value) {
      if (!value) {
        this.visibilities = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((String)value);
        }
        break;

      case VISIBILITIES:
        if (value == null) {
          unsetVisibilities();
        } else {
          setVisibilities((Set<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return getUserId();

      case VISIBILITIES:
        return getVisibilities();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUserId();
      case VISIBILITIES:
        return isSetVisibilities();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listHypotheses_args)
        return this.equals((listHypotheses_args)that);
      return false;
    }

    public boolean equals(listHypotheses_args that) {
      if (that == null)
        return false;

      boolean this_present_userId = true && this.isSetUserId();
      boolean that_present_userId = true && that.isSetUserId();
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (!this.userId.equals(that.userId))
          return false;
      }

      boolean this_present_visibilities = true && this.isSetVisibilities();
      boolean that_present_visibilities = true && that.isSetVisibilities();
      if (this_present_visibilities || that_present_visibilities) {
        if (!(this_present_visibilities && that_present_visibilities))
          return false;
        if (!this.visibilities.equals(that.visibilities))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(listHypotheses_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      listHypotheses_args typedOther = (listHypotheses_args)other;

      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(typedOther.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, typedOther.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVisibilities()).compareTo(typedOther.isSetVisibilities());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVisibilities()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.visibilities, typedOther.visibilities);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listHypotheses_args(");
      boolean first = true;

      sb.append("userId:");
      if (this.userId == null) {
        sb.append("null");
      } else {
        sb.append(this.userId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("visibilities:");
      if (this.visibilities == null) {
        sb.append("null");
      } else {
        sb.append(this.visibilities);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listHypotheses_argsStandardSchemeFactory implements SchemeFactory {
      public listHypotheses_argsStandardScheme getScheme() {
        return new listHypotheses_argsStandardScheme();
      }
    }

    private static class listHypotheses_argsStandardScheme extends StandardScheme<listHypotheses_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listHypotheses_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userId = iprot.readString();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VISIBILITIES
              if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                {
                  org.apache.thrift.protocol.TSet _set184 = iprot.readSetBegin();
                  struct.visibilities = new HashSet<String>(2*_set184.size);
                  for (int _i185 = 0; _i185 < _set184.size; ++_i185)
                  {
                    String _elem186; // required
                    _elem186 = iprot.readString();
                    struct.visibilities.add(_elem186);
                  }
                  iprot.readSetEnd();
                }
                struct.setVisibilitiesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listHypotheses_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userId != null) {
          oprot.writeFieldBegin(USER_ID_FIELD_DESC);
          oprot.writeString(struct.userId);
          oprot.writeFieldEnd();
        }
        if (struct.visibilities != null) {
          oprot.writeFieldBegin(VISIBILITIES_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.visibilities.size()));
            for (String _iter187 : struct.visibilities)
            {
              oprot.writeString(_iter187);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listHypotheses_argsTupleSchemeFactory implements SchemeFactory {
      public listHypotheses_argsTupleScheme getScheme() {
        return new listHypotheses_argsTupleScheme();
      }
    }

    private static class listHypotheses_argsTupleScheme extends TupleScheme<listHypotheses_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listHypotheses_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserId()) {
          optionals.set(0);
        }
        if (struct.isSetVisibilities()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUserId()) {
          oprot.writeString(struct.userId);
        }
        if (struct.isSetVisibilities()) {
          {
            oprot.writeI32(struct.visibilities.size());
            for (String _iter188 : struct.visibilities)
            {
              oprot.writeString(_iter188);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listHypotheses_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.userId = iprot.readString();
          struct.setUserIdIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TSet _set189 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.visibilities = new HashSet<String>(2*_set189.size);
            for (int _i190 = 0; _i190 < _set189.size; ++_i190)
            {
              String _elem191; // required
              _elem191 = iprot.readString();
              struct.visibilities.add(_elem191);
            }
          }
          struct.setVisibilitiesIsSet(true);
        }
      }
    }

  }

  public static class listHypotheses_result implements org.apache.thrift.TBase<listHypotheses_result, listHypotheses_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listHypotheses_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listHypotheses_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listHypotheses_resultTupleSchemeFactory());
    }

    public List<com._42six.amino.common.thrift.THypothesis> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com._42six.amino.common.thrift.THypothesis.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listHypotheses_result.class, metaDataMap);
    }

    public listHypotheses_result() {
    }

    public listHypotheses_result(
      List<com._42six.amino.common.thrift.THypothesis> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listHypotheses_result(listHypotheses_result other) {
      if (other.isSetSuccess()) {
        List<com._42six.amino.common.thrift.THypothesis> __this__success = new ArrayList<com._42six.amino.common.thrift.THypothesis>();
        for (com._42six.amino.common.thrift.THypothesis other_element : other.success) {
          __this__success.add(new com._42six.amino.common.thrift.THypothesis(other_element));
        }
        this.success = __this__success;
      }
    }

    public listHypotheses_result deepCopy() {
      return new listHypotheses_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com._42six.amino.common.thrift.THypothesis> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com._42six.amino.common.thrift.THypothesis elem) {
      if (this.success == null) {
        this.success = new ArrayList<com._42six.amino.common.thrift.THypothesis>();
      }
      this.success.add(elem);
    }

    public List<com._42six.amino.common.thrift.THypothesis> getSuccess() {
      return this.success;
    }

    public listHypotheses_result setSuccess(List<com._42six.amino.common.thrift.THypothesis> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com._42six.amino.common.thrift.THypothesis>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listHypotheses_result)
        return this.equals((listHypotheses_result)that);
      return false;
    }

    public boolean equals(listHypotheses_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(listHypotheses_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      listHypotheses_result typedOther = (listHypotheses_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listHypotheses_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listHypotheses_resultStandardSchemeFactory implements SchemeFactory {
      public listHypotheses_resultStandardScheme getScheme() {
        return new listHypotheses_resultStandardScheme();
      }
    }

    private static class listHypotheses_resultStandardScheme extends StandardScheme<listHypotheses_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listHypotheses_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list192 = iprot.readListBegin();
                  struct.success = new ArrayList<com._42six.amino.common.thrift.THypothesis>(_list192.size);
                  for (int _i193 = 0; _i193 < _list192.size; ++_i193)
                  {
                    com._42six.amino.common.thrift.THypothesis _elem194; // required
                    _elem194 = new com._42six.amino.common.thrift.THypothesis();
                    _elem194.read(iprot);
                    struct.success.add(_elem194);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listHypotheses_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com._42six.amino.common.thrift.THypothesis _iter195 : struct.success)
            {
              _iter195.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listHypotheses_resultTupleSchemeFactory implements SchemeFactory {
      public listHypotheses_resultTupleScheme getScheme() {
        return new listHypotheses_resultTupleScheme();
      }
    }

    private static class listHypotheses_resultTupleScheme extends TupleScheme<listHypotheses_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listHypotheses_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com._42six.amino.common.thrift.THypothesis _iter196 : struct.success)
            {
              _iter196.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listHypotheses_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list197 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com._42six.amino.common.thrift.THypothesis>(_list197.size);
            for (int _i198 = 0; _i198 < _list197.size; ++_i198)
            {
              com._42six.amino.common.thrift.THypothesis _elem199; // required
              _elem199 = new com._42six.amino.common.thrift.THypothesis();
              _elem199.read(iprot);
              struct.success.add(_elem199);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class createHypothesis_args implements org.apache.thrift.TBase<createHypothesis_args, createHypothesis_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createHypothesis_args");

    private static final org.apache.thrift.protocol.TField HYPOTHESIS_FIELD_DESC = new org.apache.thrift.protocol.TField("hypothesis", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField VISIBILITIES_FIELD_DESC = new org.apache.thrift.protocol.TField("visibilities", org.apache.thrift.protocol.TType.SET, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createHypothesis_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createHypothesis_argsTupleSchemeFactory());
    }

    public com._42six.amino.common.thrift.THypothesis hypothesis; // required
    public String userId; // required
    public Set<String> visibilities; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HYPOTHESIS((short)1, "hypothesis"),
      USER_ID((short)2, "userId"),
      VISIBILITIES((short)3, "visibilities");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HYPOTHESIS
            return HYPOTHESIS;
          case 2: // USER_ID
            return USER_ID;
          case 3: // VISIBILITIES
            return VISIBILITIES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HYPOTHESIS, new org.apache.thrift.meta_data.FieldMetaData("hypothesis", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com._42six.amino.common.thrift.THypothesis.class)));
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.VISIBILITIES, new org.apache.thrift.meta_data.FieldMetaData("visibilities", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createHypothesis_args.class, metaDataMap);
    }

    public createHypothesis_args() {
    }

    public createHypothesis_args(
      com._42six.amino.common.thrift.THypothesis hypothesis,
      String userId,
      Set<String> visibilities)
    {
      this();
      this.hypothesis = hypothesis;
      this.userId = userId;
      this.visibilities = visibilities;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createHypothesis_args(createHypothesis_args other) {
      if (other.isSetHypothesis()) {
        this.hypothesis = new com._42six.amino.common.thrift.THypothesis(other.hypothesis);
      }
      if (other.isSetUserId()) {
        this.userId = other.userId;
      }
      if (other.isSetVisibilities()) {
        Set<String> __this__visibilities = new HashSet<String>();
        for (String other_element : other.visibilities) {
          __this__visibilities.add(other_element);
        }
        this.visibilities = __this__visibilities;
      }
    }

    public createHypothesis_args deepCopy() {
      return new createHypothesis_args(this);
    }

    @Override
    public void clear() {
      this.hypothesis = null;
      this.userId = null;
      this.visibilities = null;
    }

    public com._42six.amino.common.thrift.THypothesis getHypothesis() {
      return this.hypothesis;
    }

    public createHypothesis_args setHypothesis(com._42six.amino.common.thrift.THypothesis hypothesis) {
      this.hypothesis = hypothesis;
      return this;
    }

    public void unsetHypothesis() {
      this.hypothesis = null;
    }

    /** Returns true if field hypothesis is set (has been assigned a value) and false otherwise */
    public boolean isSetHypothesis() {
      return this.hypothesis != null;
    }

    public void setHypothesisIsSet(boolean value) {
      if (!value) {
        this.hypothesis = null;
      }
    }

    public String getUserId() {
      return this.userId;
    }

    public createHypothesis_args setUserId(String userId) {
      this.userId = userId;
      return this;
    }

    public void unsetUserId() {
      this.userId = null;
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return this.userId != null;
    }

    public void setUserIdIsSet(boolean value) {
      if (!value) {
        this.userId = null;
      }
    }

    public int getVisibilitiesSize() {
      return (this.visibilities == null) ? 0 : this.visibilities.size();
    }

    public java.util.Iterator<String> getVisibilitiesIterator() {
      return (this.visibilities == null) ? null : this.visibilities.iterator();
    }

    public void addToVisibilities(String elem) {
      if (this.visibilities == null) {
        this.visibilities = new HashSet<String>();
      }
      this.visibilities.add(elem);
    }

    public Set<String> getVisibilities() {
      return this.visibilities;
    }

    public createHypothesis_args setVisibilities(Set<String> visibilities) {
      this.visibilities = visibilities;
      return this;
    }

    public void unsetVisibilities() {
      this.visibilities = null;
    }

    /** Returns true if field visibilities is set (has been assigned a value) and false otherwise */
    public boolean isSetVisibilities() {
      return this.visibilities != null;
    }

    public void setVisibilitiesIsSet(boolean value) {
      if (!value) {
        this.visibilities = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case HYPOTHESIS:
        if (value == null) {
          unsetHypothesis();
        } else {
          setHypothesis((com._42six.amino.common.thrift.THypothesis)value);
        }
        break;

      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((String)value);
        }
        break;

      case VISIBILITIES:
        if (value == null) {
          unsetVisibilities();
        } else {
          setVisibilities((Set<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case HYPOTHESIS:
        return getHypothesis();

      case USER_ID:
        return getUserId();

      case VISIBILITIES:
        return getVisibilities();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case HYPOTHESIS:
        return isSetHypothesis();
      case USER_ID:
        return isSetUserId();
      case VISIBILITIES:
        return isSetVisibilities();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createHypothesis_args)
        return this.equals((createHypothesis_args)that);
      return false;
    }

    public boolean equals(createHypothesis_args that) {
      if (that == null)
        return false;

      boolean this_present_hypothesis = true && this.isSetHypothesis();
      boolean that_present_hypothesis = true && that.isSetHypothesis();
      if (this_present_hypothesis || that_present_hypothesis) {
        if (!(this_present_hypothesis && that_present_hypothesis))
          return false;
        if (!this.hypothesis.equals(that.hypothesis))
          return false;
      }

      boolean this_present_userId = true && this.isSetUserId();
      boolean that_present_userId = true && that.isSetUserId();
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (!this.userId.equals(that.userId))
          return false;
      }

      boolean this_present_visibilities = true && this.isSetVisibilities();
      boolean that_present_visibilities = true && that.isSetVisibilities();
      if (this_present_visibilities || that_present_visibilities) {
        if (!(this_present_visibilities && that_present_visibilities))
          return false;
        if (!this.visibilities.equals(that.visibilities))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(createHypothesis_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      createHypothesis_args typedOther = (createHypothesis_args)other;

      lastComparison = Boolean.valueOf(isSetHypothesis()).compareTo(typedOther.isSetHypothesis());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHypothesis()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hypothesis, typedOther.hypothesis);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(typedOther.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, typedOther.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVisibilities()).compareTo(typedOther.isSetVisibilities());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVisibilities()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.visibilities, typedOther.visibilities);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createHypothesis_args(");
      boolean first = true;

      sb.append("hypothesis:");
      if (this.hypothesis == null) {
        sb.append("null");
      } else {
        sb.append(this.hypothesis);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userId:");
      if (this.userId == null) {
        sb.append("null");
      } else {
        sb.append(this.userId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("visibilities:");
      if (this.visibilities == null) {
        sb.append("null");
      } else {
        sb.append(this.visibilities);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (hypothesis != null) {
        hypothesis.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createHypothesis_argsStandardSchemeFactory implements SchemeFactory {
      public createHypothesis_argsStandardScheme getScheme() {
        return new createHypothesis_argsStandardScheme();
      }
    }

    private static class createHypothesis_argsStandardScheme extends StandardScheme<createHypothesis_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createHypothesis_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HYPOTHESIS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.hypothesis = new com._42six.amino.common.thrift.THypothesis();
                struct.hypothesis.read(iprot);
                struct.setHypothesisIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userId = iprot.readString();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // VISIBILITIES
              if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                {
                  org.apache.thrift.protocol.TSet _set200 = iprot.readSetBegin();
                  struct.visibilities = new HashSet<String>(2*_set200.size);
                  for (int _i201 = 0; _i201 < _set200.size; ++_i201)
                  {
                    String _elem202; // required
                    _elem202 = iprot.readString();
                    struct.visibilities.add(_elem202);
                  }
                  iprot.readSetEnd();
                }
                struct.setVisibilitiesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createHypothesis_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.hypothesis != null) {
          oprot.writeFieldBegin(HYPOTHESIS_FIELD_DESC);
          struct.hypothesis.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.userId != null) {
          oprot.writeFieldBegin(USER_ID_FIELD_DESC);
          oprot.writeString(struct.userId);
          oprot.writeFieldEnd();
        }
        if (struct.visibilities != null) {
          oprot.writeFieldBegin(VISIBILITIES_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.visibilities.size()));
            for (String _iter203 : struct.visibilities)
            {
              oprot.writeString(_iter203);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createHypothesis_argsTupleSchemeFactory implements SchemeFactory {
      public createHypothesis_argsTupleScheme getScheme() {
        return new createHypothesis_argsTupleScheme();
      }
    }

    private static class createHypothesis_argsTupleScheme extends TupleScheme<createHypothesis_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createHypothesis_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetHypothesis()) {
          optionals.set(0);
        }
        if (struct.isSetUserId()) {
          optionals.set(1);
        }
        if (struct.isSetVisibilities()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetHypothesis()) {
          struct.hypothesis.write(oprot);
        }
        if (struct.isSetUserId()) {
          oprot.writeString(struct.userId);
        }
        if (struct.isSetVisibilities()) {
          {
            oprot.writeI32(struct.visibilities.size());
            for (String _iter204 : struct.visibilities)
            {
              oprot.writeString(_iter204);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createHypothesis_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.hypothesis = new com._42six.amino.common.thrift.THypothesis();
          struct.hypothesis.read(iprot);
          struct.setHypothesisIsSet(true);
        }
        if (incoming.get(1)) {
          struct.userId = iprot.readString();
          struct.setUserIdIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TSet _set205 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.visibilities = new HashSet<String>(2*_set205.size);
            for (int _i206 = 0; _i206 < _set205.size; ++_i206)
            {
              String _elem207; // required
              _elem207 = iprot.readString();
              struct.visibilities.add(_elem207);
            }
          }
          struct.setVisibilitiesIsSet(true);
        }
      }
    }

  }

  public static class createHypothesis_result implements org.apache.thrift.TBase<createHypothesis_result, createHypothesis_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createHypothesis_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createHypothesis_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createHypothesis_resultTupleSchemeFactory());
    }

    public com._42six.amino.common.thrift.THypothesis success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com._42six.amino.common.thrift.THypothesis.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createHypothesis_result.class, metaDataMap);
    }

    public createHypothesis_result() {
    }

    public createHypothesis_result(
      com._42six.amino.common.thrift.THypothesis success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createHypothesis_result(createHypothesis_result other) {
      if (other.isSetSuccess()) {
        this.success = new com._42six.amino.common.thrift.THypothesis(other.success);
      }
    }

    public createHypothesis_result deepCopy() {
      return new createHypothesis_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com._42six.amino.common.thrift.THypothesis getSuccess() {
      return this.success;
    }

    public createHypothesis_result setSuccess(com._42six.amino.common.thrift.THypothesis success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com._42six.amino.common.thrift.THypothesis)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createHypothesis_result)
        return this.equals((createHypothesis_result)that);
      return false;
    }

    public boolean equals(createHypothesis_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(createHypothesis_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      createHypothesis_result typedOther = (createHypothesis_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createHypothesis_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createHypothesis_resultStandardSchemeFactory implements SchemeFactory {
      public createHypothesis_resultStandardScheme getScheme() {
        return new createHypothesis_resultStandardScheme();
      }
    }

    private static class createHypothesis_resultStandardScheme extends StandardScheme<createHypothesis_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createHypothesis_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com._42six.amino.common.thrift.THypothesis();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createHypothesis_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createHypothesis_resultTupleSchemeFactory implements SchemeFactory {
      public createHypothesis_resultTupleScheme getScheme() {
        return new createHypothesis_resultTupleScheme();
      }
    }

    private static class createHypothesis_resultTupleScheme extends TupleScheme<createHypothesis_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createHypothesis_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createHypothesis_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com._42six.amino.common.thrift.THypothesis();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateHypothesis_args implements org.apache.thrift.TBase<updateHypothesis_args, updateHypothesis_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateHypothesis_args");

    private static final org.apache.thrift.protocol.TField HYPOTHESIS_FIELD_DESC = new org.apache.thrift.protocol.TField("hypothesis", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField REQUESTER_FIELD_DESC = new org.apache.thrift.protocol.TField("requester", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField VISIBILITIES_FIELD_DESC = new org.apache.thrift.protocol.TField("visibilities", org.apache.thrift.protocol.TType.SET, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateHypothesis_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateHypothesis_argsTupleSchemeFactory());
    }

    public com._42six.amino.common.thrift.THypothesis hypothesis; // required
    public String requester; // required
    public Set<String> visibilities; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HYPOTHESIS((short)1, "hypothesis"),
      REQUESTER((short)2, "requester"),
      VISIBILITIES((short)3, "visibilities");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HYPOTHESIS
            return HYPOTHESIS;
          case 2: // REQUESTER
            return REQUESTER;
          case 3: // VISIBILITIES
            return VISIBILITIES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HYPOTHESIS, new org.apache.thrift.meta_data.FieldMetaData("hypothesis", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com._42six.amino.common.thrift.THypothesis.class)));
      tmpMap.put(_Fields.REQUESTER, new org.apache.thrift.meta_data.FieldMetaData("requester", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.VISIBILITIES, new org.apache.thrift.meta_data.FieldMetaData("visibilities", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateHypothesis_args.class, metaDataMap);
    }

    public updateHypothesis_args() {
    }

    public updateHypothesis_args(
      com._42six.amino.common.thrift.THypothesis hypothesis,
      String requester,
      Set<String> visibilities)
    {
      this();
      this.hypothesis = hypothesis;
      this.requester = requester;
      this.visibilities = visibilities;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateHypothesis_args(updateHypothesis_args other) {
      if (other.isSetHypothesis()) {
        this.hypothesis = new com._42six.amino.common.thrift.THypothesis(other.hypothesis);
      }
      if (other.isSetRequester()) {
        this.requester = other.requester;
      }
      if (other.isSetVisibilities()) {
        Set<String> __this__visibilities = new HashSet<String>();
        for (String other_element : other.visibilities) {
          __this__visibilities.add(other_element);
        }
        this.visibilities = __this__visibilities;
      }
    }

    public updateHypothesis_args deepCopy() {
      return new updateHypothesis_args(this);
    }

    @Override
    public void clear() {
      this.hypothesis = null;
      this.requester = null;
      this.visibilities = null;
    }

    public com._42six.amino.common.thrift.THypothesis getHypothesis() {
      return this.hypothesis;
    }

    public updateHypothesis_args setHypothesis(com._42six.amino.common.thrift.THypothesis hypothesis) {
      this.hypothesis = hypothesis;
      return this;
    }

    public void unsetHypothesis() {
      this.hypothesis = null;
    }

    /** Returns true if field hypothesis is set (has been assigned a value) and false otherwise */
    public boolean isSetHypothesis() {
      return this.hypothesis != null;
    }

    public void setHypothesisIsSet(boolean value) {
      if (!value) {
        this.hypothesis = null;
      }
    }

    public String getRequester() {
      return this.requester;
    }

    public updateHypothesis_args setRequester(String requester) {
      this.requester = requester;
      return this;
    }

    public void unsetRequester() {
      this.requester = null;
    }

    /** Returns true if field requester is set (has been assigned a value) and false otherwise */
    public boolean isSetRequester() {
      return this.requester != null;
    }

    public void setRequesterIsSet(boolean value) {
      if (!value) {
        this.requester = null;
      }
    }

    public int getVisibilitiesSize() {
      return (this.visibilities == null) ? 0 : this.visibilities.size();
    }

    public java.util.Iterator<String> getVisibilitiesIterator() {
      return (this.visibilities == null) ? null : this.visibilities.iterator();
    }

    public void addToVisibilities(String elem) {
      if (this.visibilities == null) {
        this.visibilities = new HashSet<String>();
      }
      this.visibilities.add(elem);
    }

    public Set<String> getVisibilities() {
      return this.visibilities;
    }

    public updateHypothesis_args setVisibilities(Set<String> visibilities) {
      this.visibilities = visibilities;
      return this;
    }

    public void unsetVisibilities() {
      this.visibilities = null;
    }

    /** Returns true if field visibilities is set (has been assigned a value) and false otherwise */
    public boolean isSetVisibilities() {
      return this.visibilities != null;
    }

    public void setVisibilitiesIsSet(boolean value) {
      if (!value) {
        this.visibilities = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case HYPOTHESIS:
        if (value == null) {
          unsetHypothesis();
        } else {
          setHypothesis((com._42six.amino.common.thrift.THypothesis)value);
        }
        break;

      case REQUESTER:
        if (value == null) {
          unsetRequester();
        } else {
          setRequester((String)value);
        }
        break;

      case VISIBILITIES:
        if (value == null) {
          unsetVisibilities();
        } else {
          setVisibilities((Set<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case HYPOTHESIS:
        return getHypothesis();

      case REQUESTER:
        return getRequester();

      case VISIBILITIES:
        return getVisibilities();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case HYPOTHESIS:
        return isSetHypothesis();
      case REQUESTER:
        return isSetRequester();
      case VISIBILITIES:
        return isSetVisibilities();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateHypothesis_args)
        return this.equals((updateHypothesis_args)that);
      return false;
    }

    public boolean equals(updateHypothesis_args that) {
      if (that == null)
        return false;

      boolean this_present_hypothesis = true && this.isSetHypothesis();
      boolean that_present_hypothesis = true && that.isSetHypothesis();
      if (this_present_hypothesis || that_present_hypothesis) {
        if (!(this_present_hypothesis && that_present_hypothesis))
          return false;
        if (!this.hypothesis.equals(that.hypothesis))
          return false;
      }

      boolean this_present_requester = true && this.isSetRequester();
      boolean that_present_requester = true && that.isSetRequester();
      if (this_present_requester || that_present_requester) {
        if (!(this_present_requester && that_present_requester))
          return false;
        if (!this.requester.equals(that.requester))
          return false;
      }

      boolean this_present_visibilities = true && this.isSetVisibilities();
      boolean that_present_visibilities = true && that.isSetVisibilities();
      if (this_present_visibilities || that_present_visibilities) {
        if (!(this_present_visibilities && that_present_visibilities))
          return false;
        if (!this.visibilities.equals(that.visibilities))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateHypothesis_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateHypothesis_args typedOther = (updateHypothesis_args)other;

      lastComparison = Boolean.valueOf(isSetHypothesis()).compareTo(typedOther.isSetHypothesis());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHypothesis()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hypothesis, typedOther.hypothesis);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRequester()).compareTo(typedOther.isSetRequester());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequester()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requester, typedOther.requester);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVisibilities()).compareTo(typedOther.isSetVisibilities());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVisibilities()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.visibilities, typedOther.visibilities);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateHypothesis_args(");
      boolean first = true;

      sb.append("hypothesis:");
      if (this.hypothesis == null) {
        sb.append("null");
      } else {
        sb.append(this.hypothesis);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("requester:");
      if (this.requester == null) {
        sb.append("null");
      } else {
        sb.append(this.requester);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("visibilities:");
      if (this.visibilities == null) {
        sb.append("null");
      } else {
        sb.append(this.visibilities);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (hypothesis != null) {
        hypothesis.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateHypothesis_argsStandardSchemeFactory implements SchemeFactory {
      public updateHypothesis_argsStandardScheme getScheme() {
        return new updateHypothesis_argsStandardScheme();
      }
    }

    private static class updateHypothesis_argsStandardScheme extends StandardScheme<updateHypothesis_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateHypothesis_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HYPOTHESIS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.hypothesis = new com._42six.amino.common.thrift.THypothesis();
                struct.hypothesis.read(iprot);
                struct.setHypothesisIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REQUESTER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.requester = iprot.readString();
                struct.setRequesterIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // VISIBILITIES
              if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                {
                  org.apache.thrift.protocol.TSet _set208 = iprot.readSetBegin();
                  struct.visibilities = new HashSet<String>(2*_set208.size);
                  for (int _i209 = 0; _i209 < _set208.size; ++_i209)
                  {
                    String _elem210; // required
                    _elem210 = iprot.readString();
                    struct.visibilities.add(_elem210);
                  }
                  iprot.readSetEnd();
                }
                struct.setVisibilitiesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateHypothesis_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.hypothesis != null) {
          oprot.writeFieldBegin(HYPOTHESIS_FIELD_DESC);
          struct.hypothesis.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.requester != null) {
          oprot.writeFieldBegin(REQUESTER_FIELD_DESC);
          oprot.writeString(struct.requester);
          oprot.writeFieldEnd();
        }
        if (struct.visibilities != null) {
          oprot.writeFieldBegin(VISIBILITIES_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.visibilities.size()));
            for (String _iter211 : struct.visibilities)
            {
              oprot.writeString(_iter211);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateHypothesis_argsTupleSchemeFactory implements SchemeFactory {
      public updateHypothesis_argsTupleScheme getScheme() {
        return new updateHypothesis_argsTupleScheme();
      }
    }

    private static class updateHypothesis_argsTupleScheme extends TupleScheme<updateHypothesis_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateHypothesis_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetHypothesis()) {
          optionals.set(0);
        }
        if (struct.isSetRequester()) {
          optionals.set(1);
        }
        if (struct.isSetVisibilities()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetHypothesis()) {
          struct.hypothesis.write(oprot);
        }
        if (struct.isSetRequester()) {
          oprot.writeString(struct.requester);
        }
        if (struct.isSetVisibilities()) {
          {
            oprot.writeI32(struct.visibilities.size());
            for (String _iter212 : struct.visibilities)
            {
              oprot.writeString(_iter212);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateHypothesis_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.hypothesis = new com._42six.amino.common.thrift.THypothesis();
          struct.hypothesis.read(iprot);
          struct.setHypothesisIsSet(true);
        }
        if (incoming.get(1)) {
          struct.requester = iprot.readString();
          struct.setRequesterIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TSet _set213 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.visibilities = new HashSet<String>(2*_set213.size);
            for (int _i214 = 0; _i214 < _set213.size; ++_i214)
            {
              String _elem215; // required
              _elem215 = iprot.readString();
              struct.visibilities.add(_elem215);
            }
          }
          struct.setVisibilitiesIsSet(true);
        }
      }
    }

  }

  public static class updateHypothesis_result implements org.apache.thrift.TBase<updateHypothesis_result, updateHypothesis_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateHypothesis_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateHypothesis_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateHypothesis_resultTupleSchemeFactory());
    }

    public com._42six.amino.common.thrift.THypothesis success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com._42six.amino.common.thrift.THypothesis.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateHypothesis_result.class, metaDataMap);
    }

    public updateHypothesis_result() {
    }

    public updateHypothesis_result(
      com._42six.amino.common.thrift.THypothesis success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateHypothesis_result(updateHypothesis_result other) {
      if (other.isSetSuccess()) {
        this.success = new com._42six.amino.common.thrift.THypothesis(other.success);
      }
    }

    public updateHypothesis_result deepCopy() {
      return new updateHypothesis_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com._42six.amino.common.thrift.THypothesis getSuccess() {
      return this.success;
    }

    public updateHypothesis_result setSuccess(com._42six.amino.common.thrift.THypothesis success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com._42six.amino.common.thrift.THypothesis)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateHypothesis_result)
        return this.equals((updateHypothesis_result)that);
      return false;
    }

    public boolean equals(updateHypothesis_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateHypothesis_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateHypothesis_result typedOther = (updateHypothesis_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateHypothesis_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateHypothesis_resultStandardSchemeFactory implements SchemeFactory {
      public updateHypothesis_resultStandardScheme getScheme() {
        return new updateHypothesis_resultStandardScheme();
      }
    }

    private static class updateHypothesis_resultStandardScheme extends StandardScheme<updateHypothesis_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateHypothesis_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com._42six.amino.common.thrift.THypothesis();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateHypothesis_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateHypothesis_resultTupleSchemeFactory implements SchemeFactory {
      public updateHypothesis_resultTupleScheme getScheme() {
        return new updateHypothesis_resultTupleScheme();
      }
    }

    private static class updateHypothesis_resultTupleScheme extends TupleScheme<updateHypothesis_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateHypothesis_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateHypothesis_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com._42six.amino.common.thrift.THypothesis();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class deleteHypothesis_args implements org.apache.thrift.TBase<deleteHypothesis_args, deleteHypothesis_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteHypothesis_args");

    private static final org.apache.thrift.protocol.TField OWNER_FIELD_DESC = new org.apache.thrift.protocol.TField("owner", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField VISIBILITIES_FIELD_DESC = new org.apache.thrift.protocol.TField("visibilities", org.apache.thrift.protocol.TType.SET, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteHypothesis_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteHypothesis_argsTupleSchemeFactory());
    }

    public String owner; // required
    public String id; // required
    public Set<String> visibilities; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OWNER((short)1, "owner"),
      ID((short)2, "id"),
      VISIBILITIES((short)3, "visibilities");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OWNER
            return OWNER;
          case 2: // ID
            return ID;
          case 3: // VISIBILITIES
            return VISIBILITIES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OWNER, new org.apache.thrift.meta_data.FieldMetaData("owner", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.VISIBILITIES, new org.apache.thrift.meta_data.FieldMetaData("visibilities", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteHypothesis_args.class, metaDataMap);
    }

    public deleteHypothesis_args() {
    }

    public deleteHypothesis_args(
      String owner,
      String id,
      Set<String> visibilities)
    {
      this();
      this.owner = owner;
      this.id = id;
      this.visibilities = visibilities;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteHypothesis_args(deleteHypothesis_args other) {
      if (other.isSetOwner()) {
        this.owner = other.owner;
      }
      if (other.isSetId()) {
        this.id = other.id;
      }
      if (other.isSetVisibilities()) {
        Set<String> __this__visibilities = new HashSet<String>();
        for (String other_element : other.visibilities) {
          __this__visibilities.add(other_element);
        }
        this.visibilities = __this__visibilities;
      }
    }

    public deleteHypothesis_args deepCopy() {
      return new deleteHypothesis_args(this);
    }

    @Override
    public void clear() {
      this.owner = null;
      this.id = null;
      this.visibilities = null;
    }

    public String getOwner() {
      return this.owner;
    }

    public deleteHypothesis_args setOwner(String owner) {
      this.owner = owner;
      return this;
    }

    public void unsetOwner() {
      this.owner = null;
    }

    /** Returns true if field owner is set (has been assigned a value) and false otherwise */
    public boolean isSetOwner() {
      return this.owner != null;
    }

    public void setOwnerIsSet(boolean value) {
      if (!value) {
        this.owner = null;
      }
    }

    public String getId() {
      return this.id;
    }

    public deleteHypothesis_args setId(String id) {
      this.id = id;
      return this;
    }

    public void unsetId() {
      this.id = null;
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return this.id != null;
    }

    public void setIdIsSet(boolean value) {
      if (!value) {
        this.id = null;
      }
    }

    public int getVisibilitiesSize() {
      return (this.visibilities == null) ? 0 : this.visibilities.size();
    }

    public java.util.Iterator<String> getVisibilitiesIterator() {
      return (this.visibilities == null) ? null : this.visibilities.iterator();
    }

    public void addToVisibilities(String elem) {
      if (this.visibilities == null) {
        this.visibilities = new HashSet<String>();
      }
      this.visibilities.add(elem);
    }

    public Set<String> getVisibilities() {
      return this.visibilities;
    }

    public deleteHypothesis_args setVisibilities(Set<String> visibilities) {
      this.visibilities = visibilities;
      return this;
    }

    public void unsetVisibilities() {
      this.visibilities = null;
    }

    /** Returns true if field visibilities is set (has been assigned a value) and false otherwise */
    public boolean isSetVisibilities() {
      return this.visibilities != null;
    }

    public void setVisibilitiesIsSet(boolean value) {
      if (!value) {
        this.visibilities = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OWNER:
        if (value == null) {
          unsetOwner();
        } else {
          setOwner((String)value);
        }
        break;

      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((String)value);
        }
        break;

      case VISIBILITIES:
        if (value == null) {
          unsetVisibilities();
        } else {
          setVisibilities((Set<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OWNER:
        return getOwner();

      case ID:
        return getId();

      case VISIBILITIES:
        return getVisibilities();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OWNER:
        return isSetOwner();
      case ID:
        return isSetId();
      case VISIBILITIES:
        return isSetVisibilities();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteHypothesis_args)
        return this.equals((deleteHypothesis_args)that);
      return false;
    }

    public boolean equals(deleteHypothesis_args that) {
      if (that == null)
        return false;

      boolean this_present_owner = true && this.isSetOwner();
      boolean that_present_owner = true && that.isSetOwner();
      if (this_present_owner || that_present_owner) {
        if (!(this_present_owner && that_present_owner))
          return false;
        if (!this.owner.equals(that.owner))
          return false;
      }

      boolean this_present_id = true && this.isSetId();
      boolean that_present_id = true && that.isSetId();
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (!this.id.equals(that.id))
          return false;
      }

      boolean this_present_visibilities = true && this.isSetVisibilities();
      boolean that_present_visibilities = true && that.isSetVisibilities();
      if (this_present_visibilities || that_present_visibilities) {
        if (!(this_present_visibilities && that_present_visibilities))
          return false;
        if (!this.visibilities.equals(that.visibilities))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(deleteHypothesis_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deleteHypothesis_args typedOther = (deleteHypothesis_args)other;

      lastComparison = Boolean.valueOf(isSetOwner()).compareTo(typedOther.isSetOwner());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOwner()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.owner, typedOther.owner);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVisibilities()).compareTo(typedOther.isSetVisibilities());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVisibilities()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.visibilities, typedOther.visibilities);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteHypothesis_args(");
      boolean first = true;

      sb.append("owner:");
      if (this.owner == null) {
        sb.append("null");
      } else {
        sb.append(this.owner);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("visibilities:");
      if (this.visibilities == null) {
        sb.append("null");
      } else {
        sb.append(this.visibilities);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteHypothesis_argsStandardSchemeFactory implements SchemeFactory {
      public deleteHypothesis_argsStandardScheme getScheme() {
        return new deleteHypothesis_argsStandardScheme();
      }
    }

    private static class deleteHypothesis_argsStandardScheme extends StandardScheme<deleteHypothesis_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteHypothesis_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OWNER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.owner = iprot.readString();
                struct.setOwnerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.id = iprot.readString();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // VISIBILITIES
              if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                {
                  org.apache.thrift.protocol.TSet _set216 = iprot.readSetBegin();
                  struct.visibilities = new HashSet<String>(2*_set216.size);
                  for (int _i217 = 0; _i217 < _set216.size; ++_i217)
                  {
                    String _elem218; // required
                    _elem218 = iprot.readString();
                    struct.visibilities.add(_elem218);
                  }
                  iprot.readSetEnd();
                }
                struct.setVisibilitiesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteHypothesis_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.owner != null) {
          oprot.writeFieldBegin(OWNER_FIELD_DESC);
          oprot.writeString(struct.owner);
          oprot.writeFieldEnd();
        }
        if (struct.id != null) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          oprot.writeString(struct.id);
          oprot.writeFieldEnd();
        }
        if (struct.visibilities != null) {
          oprot.writeFieldBegin(VISIBILITIES_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.visibilities.size()));
            for (String _iter219 : struct.visibilities)
            {
              oprot.writeString(_iter219);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteHypothesis_argsTupleSchemeFactory implements SchemeFactory {
      public deleteHypothesis_argsTupleScheme getScheme() {
        return new deleteHypothesis_argsTupleScheme();
      }
    }

    private static class deleteHypothesis_argsTupleScheme extends TupleScheme<deleteHypothesis_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteHypothesis_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOwner()) {
          optionals.set(0);
        }
        if (struct.isSetId()) {
          optionals.set(1);
        }
        if (struct.isSetVisibilities()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetOwner()) {
          oprot.writeString(struct.owner);
        }
        if (struct.isSetId()) {
          oprot.writeString(struct.id);
        }
        if (struct.isSetVisibilities()) {
          {
            oprot.writeI32(struct.visibilities.size());
            for (String _iter220 : struct.visibilities)
            {
              oprot.writeString(_iter220);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteHypothesis_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.owner = iprot.readString();
          struct.setOwnerIsSet(true);
        }
        if (incoming.get(1)) {
          struct.id = iprot.readString();
          struct.setIdIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TSet _set221 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.visibilities = new HashSet<String>(2*_set221.size);
            for (int _i222 = 0; _i222 < _set221.size; ++_i222)
            {
              String _elem223; // required
              _elem223 = iprot.readString();
              struct.visibilities.add(_elem223);
            }
          }
          struct.setVisibilitiesIsSet(true);
        }
      }
    }

  }

  public static class deleteHypothesis_result implements org.apache.thrift.TBase<deleteHypothesis_result, deleteHypothesis_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteHypothesis_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteHypothesis_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteHypothesis_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteHypothesis_result.class, metaDataMap);
    }

    public deleteHypothesis_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteHypothesis_result(deleteHypothesis_result other) {
    }

    public deleteHypothesis_result deepCopy() {
      return new deleteHypothesis_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteHypothesis_result)
        return this.equals((deleteHypothesis_result)that);
      return false;
    }

    public boolean equals(deleteHypothesis_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(deleteHypothesis_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deleteHypothesis_result typedOther = (deleteHypothesis_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteHypothesis_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteHypothesis_resultStandardSchemeFactory implements SchemeFactory {
      public deleteHypothesis_resultStandardScheme getScheme() {
        return new deleteHypothesis_resultStandardScheme();
      }
    }

    private static class deleteHypothesis_resultStandardScheme extends StandardScheme<deleteHypothesis_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteHypothesis_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteHypothesis_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteHypothesis_resultTupleSchemeFactory implements SchemeFactory {
      public deleteHypothesis_resultTupleScheme getScheme() {
        return new deleteHypothesis_resultTupleScheme();
      }
    }

    private static class deleteHypothesis_resultTupleScheme extends TupleScheme<deleteHypothesis_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteHypothesis_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteHypothesis_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getShardCount_args implements org.apache.thrift.TBase<getShardCount_args, getShardCount_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getShardCount_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getShardCount_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getShardCount_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getShardCount_args.class, metaDataMap);
    }

    public getShardCount_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getShardCount_args(getShardCount_args other) {
    }

    public getShardCount_args deepCopy() {
      return new getShardCount_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getShardCount_args)
        return this.equals((getShardCount_args)that);
      return false;
    }

    public boolean equals(getShardCount_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getShardCount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getShardCount_args typedOther = (getShardCount_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getShardCount_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getShardCount_argsStandardSchemeFactory implements SchemeFactory {
      public getShardCount_argsStandardScheme getScheme() {
        return new getShardCount_argsStandardScheme();
      }
    }

    private static class getShardCount_argsStandardScheme extends StandardScheme<getShardCount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getShardCount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getShardCount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getShardCount_argsTupleSchemeFactory implements SchemeFactory {
      public getShardCount_argsTupleScheme getScheme() {
        return new getShardCount_argsTupleScheme();
      }
    }

    private static class getShardCount_argsTupleScheme extends TupleScheme<getShardCount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getShardCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getShardCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getShardCount_result implements org.apache.thrift.TBase<getShardCount_result, getShardCount_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getShardCount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getShardCount_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getShardCount_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getShardCount_result.class, metaDataMap);
    }

    public getShardCount_result() {
    }

    public getShardCount_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getShardCount_result(getShardCount_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getShardCount_result deepCopy() {
      return new getShardCount_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public getShardCount_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getShardCount_result)
        return this.equals((getShardCount_result)that);
      return false;
    }

    public boolean equals(getShardCount_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getShardCount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getShardCount_result typedOther = (getShardCount_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getShardCount_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getShardCount_resultStandardSchemeFactory implements SchemeFactory {
      public getShardCount_resultStandardScheme getScheme() {
        return new getShardCount_resultStandardScheme();
      }
    }

    private static class getShardCount_resultStandardScheme extends StandardScheme<getShardCount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getShardCount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getShardCount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getShardCount_resultTupleSchemeFactory implements SchemeFactory {
      public getShardCount_resultTupleScheme getScheme() {
        return new getShardCount_resultTupleScheme();
      }
    }

    private static class getShardCount_resultTupleScheme extends TupleScheme<getShardCount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getShardCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getShardCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getHashCount_args implements org.apache.thrift.TBase<getHashCount_args, getHashCount_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getHashCount_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getHashCount_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getHashCount_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getHashCount_args.class, metaDataMap);
    }

    public getHashCount_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getHashCount_args(getHashCount_args other) {
    }

    public getHashCount_args deepCopy() {
      return new getHashCount_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getHashCount_args)
        return this.equals((getHashCount_args)that);
      return false;
    }

    public boolean equals(getHashCount_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getHashCount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getHashCount_args typedOther = (getHashCount_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getHashCount_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getHashCount_argsStandardSchemeFactory implements SchemeFactory {
      public getHashCount_argsStandardScheme getScheme() {
        return new getHashCount_argsStandardScheme();
      }
    }

    private static class getHashCount_argsStandardScheme extends StandardScheme<getHashCount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getHashCount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getHashCount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getHashCount_argsTupleSchemeFactory implements SchemeFactory {
      public getHashCount_argsTupleScheme getScheme() {
        return new getHashCount_argsTupleScheme();
      }
    }

    private static class getHashCount_argsTupleScheme extends TupleScheme<getHashCount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getHashCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getHashCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getHashCount_result implements org.apache.thrift.TBase<getHashCount_result, getHashCount_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getHashCount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getHashCount_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getHashCount_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getHashCount_result.class, metaDataMap);
    }

    public getHashCount_result() {
    }

    public getHashCount_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getHashCount_result(getHashCount_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getHashCount_result deepCopy() {
      return new getHashCount_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public getHashCount_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getHashCount_result)
        return this.equals((getHashCount_result)that);
      return false;
    }

    public boolean equals(getHashCount_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getHashCount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getHashCount_result typedOther = (getHashCount_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getHashCount_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getHashCount_resultStandardSchemeFactory implements SchemeFactory {
      public getHashCount_resultStandardScheme getScheme() {
        return new getHashCount_resultStandardScheme();
      }
    }

    private static class getHashCount_resultStandardScheme extends StandardScheme<getHashCount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getHashCount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getHashCount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getHashCount_resultTupleSchemeFactory implements SchemeFactory {
      public getHashCount_resultTupleScheme getScheme() {
        return new getHashCount_resultTupleScheme();
      }
    }

    private static class getHashCount_resultTupleScheme extends TupleScheme<getHashCount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getHashCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getHashCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class listResults_args implements org.apache.thrift.TBase<listResults_args, listResults_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listResults_args");

    private static final org.apache.thrift.protocol.TField START_FIELD_DESC = new org.apache.thrift.protocol.TField("start", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField USERID_FIELD_DESC = new org.apache.thrift.protocol.TField("userid", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField VISIBILITIES_FIELD_DESC = new org.apache.thrift.protocol.TField("visibilities", org.apache.thrift.protocol.TType.SET, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listResults_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listResults_argsTupleSchemeFactory());
    }

    public long start; // required
    public long count; // required
    public String userid; // required
    public Set<String> visibilities; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      START((short)1, "start"),
      COUNT((short)2, "count"),
      USERID((short)3, "userid"),
      VISIBILITIES((short)4, "visibilities");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // START
            return START;
          case 2: // COUNT
            return COUNT;
          case 3: // USERID
            return USERID;
          case 4: // VISIBILITIES
            return VISIBILITIES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __START_ISSET_ID = 0;
    private static final int __COUNT_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.START, new org.apache.thrift.meta_data.FieldMetaData("start", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.USERID, new org.apache.thrift.meta_data.FieldMetaData("userid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.VISIBILITIES, new org.apache.thrift.meta_data.FieldMetaData("visibilities", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listResults_args.class, metaDataMap);
    }

    public listResults_args() {
    }

    public listResults_args(
      long start,
      long count,
      String userid,
      Set<String> visibilities)
    {
      this();
      this.start = start;
      setStartIsSet(true);
      this.count = count;
      setCountIsSet(true);
      this.userid = userid;
      this.visibilities = visibilities;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listResults_args(listResults_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.start = other.start;
      this.count = other.count;
      if (other.isSetUserid()) {
        this.userid = other.userid;
      }
      if (other.isSetVisibilities()) {
        Set<String> __this__visibilities = new HashSet<String>();
        for (String other_element : other.visibilities) {
          __this__visibilities.add(other_element);
        }
        this.visibilities = __this__visibilities;
      }
    }

    public listResults_args deepCopy() {
      return new listResults_args(this);
    }

    @Override
    public void clear() {
      setStartIsSet(false);
      this.start = 0;
      setCountIsSet(false);
      this.count = 0;
      this.userid = null;
      this.visibilities = null;
    }

    public long getStart() {
      return this.start;
    }

    public listResults_args setStart(long start) {
      this.start = start;
      setStartIsSet(true);
      return this;
    }

    public void unsetStart() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __START_ISSET_ID);
    }

    /** Returns true if field start is set (has been assigned a value) and false otherwise */
    public boolean isSetStart() {
      return EncodingUtils.testBit(__isset_bitfield, __START_ISSET_ID);
    }

    public void setStartIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __START_ISSET_ID, value);
    }

    public long getCount() {
      return this.count;
    }

    public listResults_args setCount(long count) {
      this.count = count;
      setCountIsSet(true);
      return this;
    }

    public void unsetCount() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COUNT_ISSET_ID);
    }

    /** Returns true if field count is set (has been assigned a value) and false otherwise */
    public boolean isSetCount() {
      return EncodingUtils.testBit(__isset_bitfield, __COUNT_ISSET_ID);
    }

    public void setCountIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COUNT_ISSET_ID, value);
    }

    public String getUserid() {
      return this.userid;
    }

    public listResults_args setUserid(String userid) {
      this.userid = userid;
      return this;
    }

    public void unsetUserid() {
      this.userid = null;
    }

    /** Returns true if field userid is set (has been assigned a value) and false otherwise */
    public boolean isSetUserid() {
      return this.userid != null;
    }

    public void setUseridIsSet(boolean value) {
      if (!value) {
        this.userid = null;
      }
    }

    public int getVisibilitiesSize() {
      return (this.visibilities == null) ? 0 : this.visibilities.size();
    }

    public java.util.Iterator<String> getVisibilitiesIterator() {
      return (this.visibilities == null) ? null : this.visibilities.iterator();
    }

    public void addToVisibilities(String elem) {
      if (this.visibilities == null) {
        this.visibilities = new HashSet<String>();
      }
      this.visibilities.add(elem);
    }

    public Set<String> getVisibilities() {
      return this.visibilities;
    }

    public listResults_args setVisibilities(Set<String> visibilities) {
      this.visibilities = visibilities;
      return this;
    }

    public void unsetVisibilities() {
      this.visibilities = null;
    }

    /** Returns true if field visibilities is set (has been assigned a value) and false otherwise */
    public boolean isSetVisibilities() {
      return this.visibilities != null;
    }

    public void setVisibilitiesIsSet(boolean value) {
      if (!value) {
        this.visibilities = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case START:
        if (value == null) {
          unsetStart();
        } else {
          setStart((Long)value);
        }
        break;

      case COUNT:
        if (value == null) {
          unsetCount();
        } else {
          setCount((Long)value);
        }
        break;

      case USERID:
        if (value == null) {
          unsetUserid();
        } else {
          setUserid((String)value);
        }
        break;

      case VISIBILITIES:
        if (value == null) {
          unsetVisibilities();
        } else {
          setVisibilities((Set<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case START:
        return Long.valueOf(getStart());

      case COUNT:
        return Long.valueOf(getCount());

      case USERID:
        return getUserid();

      case VISIBILITIES:
        return getVisibilities();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case START:
        return isSetStart();
      case COUNT:
        return isSetCount();
      case USERID:
        return isSetUserid();
      case VISIBILITIES:
        return isSetVisibilities();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listResults_args)
        return this.equals((listResults_args)that);
      return false;
    }

    public boolean equals(listResults_args that) {
      if (that == null)
        return false;

      boolean this_present_start = true;
      boolean that_present_start = true;
      if (this_present_start || that_present_start) {
        if (!(this_present_start && that_present_start))
          return false;
        if (this.start != that.start)
          return false;
      }

      boolean this_present_count = true;
      boolean that_present_count = true;
      if (this_present_count || that_present_count) {
        if (!(this_present_count && that_present_count))
          return false;
        if (this.count != that.count)
          return false;
      }

      boolean this_present_userid = true && this.isSetUserid();
      boolean that_present_userid = true && that.isSetUserid();
      if (this_present_userid || that_present_userid) {
        if (!(this_present_userid && that_present_userid))
          return false;
        if (!this.userid.equals(that.userid))
          return false;
      }

      boolean this_present_visibilities = true && this.isSetVisibilities();
      boolean that_present_visibilities = true && that.isSetVisibilities();
      if (this_present_visibilities || that_present_visibilities) {
        if (!(this_present_visibilities && that_present_visibilities))
          return false;
        if (!this.visibilities.equals(that.visibilities))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(listResults_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      listResults_args typedOther = (listResults_args)other;

      lastComparison = Boolean.valueOf(isSetStart()).compareTo(typedOther.isSetStart());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStart()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start, typedOther.start);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCount()).compareTo(typedOther.isSetCount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, typedOther.count);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserid()).compareTo(typedOther.isSetUserid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userid, typedOther.userid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVisibilities()).compareTo(typedOther.isSetVisibilities());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVisibilities()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.visibilities, typedOther.visibilities);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listResults_args(");
      boolean first = true;

      sb.append("start:");
      sb.append(this.start);
      first = false;
      if (!first) sb.append(", ");
      sb.append("count:");
      sb.append(this.count);
      first = false;
      if (!first) sb.append(", ");
      sb.append("userid:");
      if (this.userid == null) {
        sb.append("null");
      } else {
        sb.append(this.userid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("visibilities:");
      if (this.visibilities == null) {
        sb.append("null");
      } else {
        sb.append(this.visibilities);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listResults_argsStandardSchemeFactory implements SchemeFactory {
      public listResults_argsStandardScheme getScheme() {
        return new listResults_argsStandardScheme();
      }
    }

    private static class listResults_argsStandardScheme extends StandardScheme<listResults_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listResults_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // START
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.start = iprot.readI64();
                struct.setStartIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // COUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.count = iprot.readI64();
                struct.setCountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // USERID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userid = iprot.readString();
                struct.setUseridIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // VISIBILITIES
              if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                {
                  org.apache.thrift.protocol.TSet _set224 = iprot.readSetBegin();
                  struct.visibilities = new HashSet<String>(2*_set224.size);
                  for (int _i225 = 0; _i225 < _set224.size; ++_i225)
                  {
                    String _elem226; // required
                    _elem226 = iprot.readString();
                    struct.visibilities.add(_elem226);
                  }
                  iprot.readSetEnd();
                }
                struct.setVisibilitiesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listResults_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(START_FIELD_DESC);
        oprot.writeI64(struct.start);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(COUNT_FIELD_DESC);
        oprot.writeI64(struct.count);
        oprot.writeFieldEnd();
        if (struct.userid != null) {
          oprot.writeFieldBegin(USERID_FIELD_DESC);
          oprot.writeString(struct.userid);
          oprot.writeFieldEnd();
        }
        if (struct.visibilities != null) {
          oprot.writeFieldBegin(VISIBILITIES_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.visibilities.size()));
            for (String _iter227 : struct.visibilities)
            {
              oprot.writeString(_iter227);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listResults_argsTupleSchemeFactory implements SchemeFactory {
      public listResults_argsTupleScheme getScheme() {
        return new listResults_argsTupleScheme();
      }
    }

    private static class listResults_argsTupleScheme extends TupleScheme<listResults_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listResults_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStart()) {
          optionals.set(0);
        }
        if (struct.isSetCount()) {
          optionals.set(1);
        }
        if (struct.isSetUserid()) {
          optionals.set(2);
        }
        if (struct.isSetVisibilities()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetStart()) {
          oprot.writeI64(struct.start);
        }
        if (struct.isSetCount()) {
          oprot.writeI64(struct.count);
        }
        if (struct.isSetUserid()) {
          oprot.writeString(struct.userid);
        }
        if (struct.isSetVisibilities()) {
          {
            oprot.writeI32(struct.visibilities.size());
            for (String _iter228 : struct.visibilities)
            {
              oprot.writeString(_iter228);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listResults_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.start = iprot.readI64();
          struct.setStartIsSet(true);
        }
        if (incoming.get(1)) {
          struct.count = iprot.readI64();
          struct.setCountIsSet(true);
        }
        if (incoming.get(2)) {
          struct.userid = iprot.readString();
          struct.setUseridIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TSet _set229 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.visibilities = new HashSet<String>(2*_set229.size);
            for (int _i230 = 0; _i230 < _set229.size; ++_i230)
            {
              String _elem231; // required
              _elem231 = iprot.readString();
              struct.visibilities.add(_elem231);
            }
          }
          struct.setVisibilitiesIsSet(true);
        }
      }
    }

  }

  public static class listResults_result implements org.apache.thrift.TBase<listResults_result, listResults_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listResults_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listResults_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listResults_resultTupleSchemeFactory());
    }

    public List<com._42six.amino.common.thrift.TQueryResult> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com._42six.amino.common.thrift.TQueryResult.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listResults_result.class, metaDataMap);
    }

    public listResults_result() {
    }

    public listResults_result(
      List<com._42six.amino.common.thrift.TQueryResult> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listResults_result(listResults_result other) {
      if (other.isSetSuccess()) {
        List<com._42six.amino.common.thrift.TQueryResult> __this__success = new ArrayList<com._42six.amino.common.thrift.TQueryResult>();
        for (com._42six.amino.common.thrift.TQueryResult other_element : other.success) {
          __this__success.add(new com._42six.amino.common.thrift.TQueryResult(other_element));
        }
        this.success = __this__success;
      }
    }

    public listResults_result deepCopy() {
      return new listResults_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com._42six.amino.common.thrift.TQueryResult> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com._42six.amino.common.thrift.TQueryResult elem) {
      if (this.success == null) {
        this.success = new ArrayList<com._42six.amino.common.thrift.TQueryResult>();
      }
      this.success.add(elem);
    }

    public List<com._42six.amino.common.thrift.TQueryResult> getSuccess() {
      return this.success;
    }

    public listResults_result setSuccess(List<com._42six.amino.common.thrift.TQueryResult> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com._42six.amino.common.thrift.TQueryResult>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listResults_result)
        return this.equals((listResults_result)that);
      return false;
    }

    public boolean equals(listResults_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(listResults_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      listResults_result typedOther = (listResults_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listResults_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listResults_resultStandardSchemeFactory implements SchemeFactory {
      public listResults_resultStandardScheme getScheme() {
        return new listResults_resultStandardScheme();
      }
    }

    private static class listResults_resultStandardScheme extends StandardScheme<listResults_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listResults_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list232 = iprot.readListBegin();
                  struct.success = new ArrayList<com._42six.amino.common.thrift.TQueryResult>(_list232.size);
                  for (int _i233 = 0; _i233 < _list232.size; ++_i233)
                  {
                    com._42six.amino.common.thrift.TQueryResult _elem234; // required
                    _elem234 = new com._42six.amino.common.thrift.TQueryResult();
                    _elem234.read(iprot);
                    struct.success.add(_elem234);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listResults_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com._42six.amino.common.thrift.TQueryResult _iter235 : struct.success)
            {
              _iter235.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listResults_resultTupleSchemeFactory implements SchemeFactory {
      public listResults_resultTupleScheme getScheme() {
        return new listResults_resultTupleScheme();
      }
    }

    private static class listResults_resultTupleScheme extends TupleScheme<listResults_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listResults_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com._42six.amino.common.thrift.TQueryResult _iter236 : struct.success)
            {
              _iter236.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listResults_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list237 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com._42six.amino.common.thrift.TQueryResult>(_list237.size);
            for (int _i238 = 0; _i238 < _list237.size; ++_i238)
            {
              com._42six.amino.common.thrift.TQueryResult _elem239; // required
              _elem239 = new com._42six.amino.common.thrift.TQueryResult();
              _elem239.read(iprot);
              struct.success.add(_elem239);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getResult_args implements org.apache.thrift.TBase<getResult_args, getResult_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getResult_args");

    private static final org.apache.thrift.protocol.TField REQUESTER_FIELD_DESC = new org.apache.thrift.protocol.TField("requester", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField OWNER_FIELD_DESC = new org.apache.thrift.protocol.TField("owner", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField VISIBILITIES_FIELD_DESC = new org.apache.thrift.protocol.TField("visibilities", org.apache.thrift.protocol.TType.SET, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getResult_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getResult_argsTupleSchemeFactory());
    }

    public String requester; // required
    public String owner; // required
    public String id; // required
    public Set<String> visibilities; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUESTER((short)1, "requester"),
      OWNER((short)2, "owner"),
      ID((short)3, "id"),
      VISIBILITIES((short)4, "visibilities");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUESTER
            return REQUESTER;
          case 2: // OWNER
            return OWNER;
          case 3: // ID
            return ID;
          case 4: // VISIBILITIES
            return VISIBILITIES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUESTER, new org.apache.thrift.meta_data.FieldMetaData("requester", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OWNER, new org.apache.thrift.meta_data.FieldMetaData("owner", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.VISIBILITIES, new org.apache.thrift.meta_data.FieldMetaData("visibilities", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getResult_args.class, metaDataMap);
    }

    public getResult_args() {
    }

    public getResult_args(
      String requester,
      String owner,
      String id,
      Set<String> visibilities)
    {
      this();
      this.requester = requester;
      this.owner = owner;
      this.id = id;
      this.visibilities = visibilities;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getResult_args(getResult_args other) {
      if (other.isSetRequester()) {
        this.requester = other.requester;
      }
      if (other.isSetOwner()) {
        this.owner = other.owner;
      }
      if (other.isSetId()) {
        this.id = other.id;
      }
      if (other.isSetVisibilities()) {
        Set<String> __this__visibilities = new HashSet<String>();
        for (String other_element : other.visibilities) {
          __this__visibilities.add(other_element);
        }
        this.visibilities = __this__visibilities;
      }
    }

    public getResult_args deepCopy() {
      return new getResult_args(this);
    }

    @Override
    public void clear() {
      this.requester = null;
      this.owner = null;
      this.id = null;
      this.visibilities = null;
    }

    public String getRequester() {
      return this.requester;
    }

    public getResult_args setRequester(String requester) {
      this.requester = requester;
      return this;
    }

    public void unsetRequester() {
      this.requester = null;
    }

    /** Returns true if field requester is set (has been assigned a value) and false otherwise */
    public boolean isSetRequester() {
      return this.requester != null;
    }

    public void setRequesterIsSet(boolean value) {
      if (!value) {
        this.requester = null;
      }
    }

    public String getOwner() {
      return this.owner;
    }

    public getResult_args setOwner(String owner) {
      this.owner = owner;
      return this;
    }

    public void unsetOwner() {
      this.owner = null;
    }

    /** Returns true if field owner is set (has been assigned a value) and false otherwise */
    public boolean isSetOwner() {
      return this.owner != null;
    }

    public void setOwnerIsSet(boolean value) {
      if (!value) {
        this.owner = null;
      }
    }

    public String getId() {
      return this.id;
    }

    public getResult_args setId(String id) {
      this.id = id;
      return this;
    }

    public void unsetId() {
      this.id = null;
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return this.id != null;
    }

    public void setIdIsSet(boolean value) {
      if (!value) {
        this.id = null;
      }
    }

    public int getVisibilitiesSize() {
      return (this.visibilities == null) ? 0 : this.visibilities.size();
    }

    public java.util.Iterator<String> getVisibilitiesIterator() {
      return (this.visibilities == null) ? null : this.visibilities.iterator();
    }

    public void addToVisibilities(String elem) {
      if (this.visibilities == null) {
        this.visibilities = new HashSet<String>();
      }
      this.visibilities.add(elem);
    }

    public Set<String> getVisibilities() {
      return this.visibilities;
    }

    public getResult_args setVisibilities(Set<String> visibilities) {
      this.visibilities = visibilities;
      return this;
    }

    public void unsetVisibilities() {
      this.visibilities = null;
    }

    /** Returns true if field visibilities is set (has been assigned a value) and false otherwise */
    public boolean isSetVisibilities() {
      return this.visibilities != null;
    }

    public void setVisibilitiesIsSet(boolean value) {
      if (!value) {
        this.visibilities = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUESTER:
        if (value == null) {
          unsetRequester();
        } else {
          setRequester((String)value);
        }
        break;

      case OWNER:
        if (value == null) {
          unsetOwner();
        } else {
          setOwner((String)value);
        }
        break;

      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((String)value);
        }
        break;

      case VISIBILITIES:
        if (value == null) {
          unsetVisibilities();
        } else {
          setVisibilities((Set<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUESTER:
        return getRequester();

      case OWNER:
        return getOwner();

      case ID:
        return getId();

      case VISIBILITIES:
        return getVisibilities();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUESTER:
        return isSetRequester();
      case OWNER:
        return isSetOwner();
      case ID:
        return isSetId();
      case VISIBILITIES:
        return isSetVisibilities();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getResult_args)
        return this.equals((getResult_args)that);
      return false;
    }

    public boolean equals(getResult_args that) {
      if (that == null)
        return false;

      boolean this_present_requester = true && this.isSetRequester();
      boolean that_present_requester = true && that.isSetRequester();
      if (this_present_requester || that_present_requester) {
        if (!(this_present_requester && that_present_requester))
          return false;
        if (!this.requester.equals(that.requester))
          return false;
      }

      boolean this_present_owner = true && this.isSetOwner();
      boolean that_present_owner = true && that.isSetOwner();
      if (this_present_owner || that_present_owner) {
        if (!(this_present_owner && that_present_owner))
          return false;
        if (!this.owner.equals(that.owner))
          return false;
      }

      boolean this_present_id = true && this.isSetId();
      boolean that_present_id = true && that.isSetId();
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (!this.id.equals(that.id))
          return false;
      }

      boolean this_present_visibilities = true && this.isSetVisibilities();
      boolean that_present_visibilities = true && that.isSetVisibilities();
      if (this_present_visibilities || that_present_visibilities) {
        if (!(this_present_visibilities && that_present_visibilities))
          return false;
        if (!this.visibilities.equals(that.visibilities))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getResult_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getResult_args typedOther = (getResult_args)other;

      lastComparison = Boolean.valueOf(isSetRequester()).compareTo(typedOther.isSetRequester());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequester()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requester, typedOther.requester);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOwner()).compareTo(typedOther.isSetOwner());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOwner()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.owner, typedOther.owner);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVisibilities()).compareTo(typedOther.isSetVisibilities());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVisibilities()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.visibilities, typedOther.visibilities);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getResult_args(");
      boolean first = true;

      sb.append("requester:");
      if (this.requester == null) {
        sb.append("null");
      } else {
        sb.append(this.requester);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("owner:");
      if (this.owner == null) {
        sb.append("null");
      } else {
        sb.append(this.owner);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("visibilities:");
      if (this.visibilities == null) {
        sb.append("null");
      } else {
        sb.append(this.visibilities);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getResult_argsStandardSchemeFactory implements SchemeFactory {
      public getResult_argsStandardScheme getScheme() {
        return new getResult_argsStandardScheme();
      }
    }

    private static class getResult_argsStandardScheme extends StandardScheme<getResult_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getResult_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUESTER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.requester = iprot.readString();
                struct.setRequesterIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OWNER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.owner = iprot.readString();
                struct.setOwnerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.id = iprot.readString();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // VISIBILITIES
              if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                {
                  org.apache.thrift.protocol.TSet _set240 = iprot.readSetBegin();
                  struct.visibilities = new HashSet<String>(2*_set240.size);
                  for (int _i241 = 0; _i241 < _set240.size; ++_i241)
                  {
                    String _elem242; // required
                    _elem242 = iprot.readString();
                    struct.visibilities.add(_elem242);
                  }
                  iprot.readSetEnd();
                }
                struct.setVisibilitiesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getResult_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.requester != null) {
          oprot.writeFieldBegin(REQUESTER_FIELD_DESC);
          oprot.writeString(struct.requester);
          oprot.writeFieldEnd();
        }
        if (struct.owner != null) {
          oprot.writeFieldBegin(OWNER_FIELD_DESC);
          oprot.writeString(struct.owner);
          oprot.writeFieldEnd();
        }
        if (struct.id != null) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          oprot.writeString(struct.id);
          oprot.writeFieldEnd();
        }
        if (struct.visibilities != null) {
          oprot.writeFieldBegin(VISIBILITIES_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.visibilities.size()));
            for (String _iter243 : struct.visibilities)
            {
              oprot.writeString(_iter243);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getResult_argsTupleSchemeFactory implements SchemeFactory {
      public getResult_argsTupleScheme getScheme() {
        return new getResult_argsTupleScheme();
      }
    }

    private static class getResult_argsTupleScheme extends TupleScheme<getResult_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getResult_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequester()) {
          optionals.set(0);
        }
        if (struct.isSetOwner()) {
          optionals.set(1);
        }
        if (struct.isSetId()) {
          optionals.set(2);
        }
        if (struct.isSetVisibilities()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetRequester()) {
          oprot.writeString(struct.requester);
        }
        if (struct.isSetOwner()) {
          oprot.writeString(struct.owner);
        }
        if (struct.isSetId()) {
          oprot.writeString(struct.id);
        }
        if (struct.isSetVisibilities()) {
          {
            oprot.writeI32(struct.visibilities.size());
            for (String _iter244 : struct.visibilities)
            {
              oprot.writeString(_iter244);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getResult_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.requester = iprot.readString();
          struct.setRequesterIsSet(true);
        }
        if (incoming.get(1)) {
          struct.owner = iprot.readString();
          struct.setOwnerIsSet(true);
        }
        if (incoming.get(2)) {
          struct.id = iprot.readString();
          struct.setIdIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TSet _set245 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.visibilities = new HashSet<String>(2*_set245.size);
            for (int _i246 = 0; _i246 < _set245.size; ++_i246)
            {
              String _elem247; // required
              _elem247 = iprot.readString();
              struct.visibilities.add(_elem247);
            }
          }
          struct.setVisibilitiesIsSet(true);
        }
      }
    }

  }

  public static class getResult_result implements org.apache.thrift.TBase<getResult_result, getResult_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getResult_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getResult_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getResult_resultTupleSchemeFactory());
    }

    public com._42six.amino.common.thrift.TQueryResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com._42six.amino.common.thrift.TQueryResult.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getResult_result.class, metaDataMap);
    }

    public getResult_result() {
    }

    public getResult_result(
      com._42six.amino.common.thrift.TQueryResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getResult_result(getResult_result other) {
      if (other.isSetSuccess()) {
        this.success = new com._42six.amino.common.thrift.TQueryResult(other.success);
      }
    }

    public getResult_result deepCopy() {
      return new getResult_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com._42six.amino.common.thrift.TQueryResult getSuccess() {
      return this.success;
    }

    public getResult_result setSuccess(com._42six.amino.common.thrift.TQueryResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com._42six.amino.common.thrift.TQueryResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getResult_result)
        return this.equals((getResult_result)that);
      return false;
    }

    public boolean equals(getResult_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getResult_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getResult_result typedOther = (getResult_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getResult_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getResult_resultStandardSchemeFactory implements SchemeFactory {
      public getResult_resultStandardScheme getScheme() {
        return new getResult_resultStandardScheme();
      }
    }

    private static class getResult_resultStandardScheme extends StandardScheme<getResult_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getResult_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com._42six.amino.common.thrift.TQueryResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getResult_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getResult_resultTupleSchemeFactory implements SchemeFactory {
      public getResult_resultTupleScheme getScheme() {
        return new getResult_resultTupleScheme();
      }
    }

    private static class getResult_resultTupleScheme extends TupleScheme<getResult_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getResult_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getResult_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com._42six.amino.common.thrift.TQueryResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class createResult_args implements org.apache.thrift.TBase<createResult_args, createResult_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createResult_args");

    private static final org.apache.thrift.protocol.TField OWNER_FIELD_DESC = new org.apache.thrift.protocol.TField("owner", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField HYPOTHESIS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hypothesisId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField MAX_RESULTS_FIELD_DESC = new org.apache.thrift.protocol.TField("maxResults", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField JUSTIFICATION_FIELD_DESC = new org.apache.thrift.protocol.TField("justification", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField USERID_FIELD_DESC = new org.apache.thrift.protocol.TField("userid", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField VISIBILITIES_FIELD_DESC = new org.apache.thrift.protocol.TField("visibilities", org.apache.thrift.protocol.TType.SET, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createResult_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createResult_argsTupleSchemeFactory());
    }

    public String owner; // required
    public String hypothesisId; // required
    public int maxResults; // required
    public String justification; // required
    public String userid; // required
    public Set<String> visibilities; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OWNER((short)1, "owner"),
      HYPOTHESIS_ID((short)2, "hypothesisId"),
      MAX_RESULTS((short)3, "maxResults"),
      JUSTIFICATION((short)4, "justification"),
      USERID((short)5, "userid"),
      VISIBILITIES((short)6, "visibilities");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OWNER
            return OWNER;
          case 2: // HYPOTHESIS_ID
            return HYPOTHESIS_ID;
          case 3: // MAX_RESULTS
            return MAX_RESULTS;
          case 4: // JUSTIFICATION
            return JUSTIFICATION;
          case 5: // USERID
            return USERID;
          case 6: // VISIBILITIES
            return VISIBILITIES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MAXRESULTS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OWNER, new org.apache.thrift.meta_data.FieldMetaData("owner", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.HYPOTHESIS_ID, new org.apache.thrift.meta_data.FieldMetaData("hypothesisId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MAX_RESULTS, new org.apache.thrift.meta_data.FieldMetaData("maxResults", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.JUSTIFICATION, new org.apache.thrift.meta_data.FieldMetaData("justification", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USERID, new org.apache.thrift.meta_data.FieldMetaData("userid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.VISIBILITIES, new org.apache.thrift.meta_data.FieldMetaData("visibilities", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createResult_args.class, metaDataMap);
    }

    public createResult_args() {
    }

    public createResult_args(
      String owner,
      String hypothesisId,
      int maxResults,
      String justification,
      String userid,
      Set<String> visibilities)
    {
      this();
      this.owner = owner;
      this.hypothesisId = hypothesisId;
      this.maxResults = maxResults;
      setMaxResultsIsSet(true);
      this.justification = justification;
      this.userid = userid;
      this.visibilities = visibilities;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createResult_args(createResult_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetOwner()) {
        this.owner = other.owner;
      }
      if (other.isSetHypothesisId()) {
        this.hypothesisId = other.hypothesisId;
      }
      this.maxResults = other.maxResults;
      if (other.isSetJustification()) {
        this.justification = other.justification;
      }
      if (other.isSetUserid()) {
        this.userid = other.userid;
      }
      if (other.isSetVisibilities()) {
        Set<String> __this__visibilities = new HashSet<String>();
        for (String other_element : other.visibilities) {
          __this__visibilities.add(other_element);
        }
        this.visibilities = __this__visibilities;
      }
    }

    public createResult_args deepCopy() {
      return new createResult_args(this);
    }

    @Override
    public void clear() {
      this.owner = null;
      this.hypothesisId = null;
      setMaxResultsIsSet(false);
      this.maxResults = 0;
      this.justification = null;
      this.userid = null;
      this.visibilities = null;
    }

    public String getOwner() {
      return this.owner;
    }

    public createResult_args setOwner(String owner) {
      this.owner = owner;
      return this;
    }

    public void unsetOwner() {
      this.owner = null;
    }

    /** Returns true if field owner is set (has been assigned a value) and false otherwise */
    public boolean isSetOwner() {
      return this.owner != null;
    }

    public void setOwnerIsSet(boolean value) {
      if (!value) {
        this.owner = null;
      }
    }

    public String getHypothesisId() {
      return this.hypothesisId;
    }

    public createResult_args setHypothesisId(String hypothesisId) {
      this.hypothesisId = hypothesisId;
      return this;
    }

    public void unsetHypothesisId() {
      this.hypothesisId = null;
    }

    /** Returns true if field hypothesisId is set (has been assigned a value) and false otherwise */
    public boolean isSetHypothesisId() {
      return this.hypothesisId != null;
    }

    public void setHypothesisIdIsSet(boolean value) {
      if (!value) {
        this.hypothesisId = null;
      }
    }

    public int getMaxResults() {
      return this.maxResults;
    }

    public createResult_args setMaxResults(int maxResults) {
      this.maxResults = maxResults;
      setMaxResultsIsSet(true);
      return this;
    }

    public void unsetMaxResults() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAXRESULTS_ISSET_ID);
    }

    /** Returns true if field maxResults is set (has been assigned a value) and false otherwise */
    public boolean isSetMaxResults() {
      return EncodingUtils.testBit(__isset_bitfield, __MAXRESULTS_ISSET_ID);
    }

    public void setMaxResultsIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAXRESULTS_ISSET_ID, value);
    }

    public String getJustification() {
      return this.justification;
    }

    public createResult_args setJustification(String justification) {
      this.justification = justification;
      return this;
    }

    public void unsetJustification() {
      this.justification = null;
    }

    /** Returns true if field justification is set (has been assigned a value) and false otherwise */
    public boolean isSetJustification() {
      return this.justification != null;
    }

    public void setJustificationIsSet(boolean value) {
      if (!value) {
        this.justification = null;
      }
    }

    public String getUserid() {
      return this.userid;
    }

    public createResult_args setUserid(String userid) {
      this.userid = userid;
      return this;
    }

    public void unsetUserid() {
      this.userid = null;
    }

    /** Returns true if field userid is set (has been assigned a value) and false otherwise */
    public boolean isSetUserid() {
      return this.userid != null;
    }

    public void setUseridIsSet(boolean value) {
      if (!value) {
        this.userid = null;
      }
    }

    public int getVisibilitiesSize() {
      return (this.visibilities == null) ? 0 : this.visibilities.size();
    }

    public java.util.Iterator<String> getVisibilitiesIterator() {
      return (this.visibilities == null) ? null : this.visibilities.iterator();
    }

    public void addToVisibilities(String elem) {
      if (this.visibilities == null) {
        this.visibilities = new HashSet<String>();
      }
      this.visibilities.add(elem);
    }

    public Set<String> getVisibilities() {
      return this.visibilities;
    }

    public createResult_args setVisibilities(Set<String> visibilities) {
      this.visibilities = visibilities;
      return this;
    }

    public void unsetVisibilities() {
      this.visibilities = null;
    }

    /** Returns true if field visibilities is set (has been assigned a value) and false otherwise */
    public boolean isSetVisibilities() {
      return this.visibilities != null;
    }

    public void setVisibilitiesIsSet(boolean value) {
      if (!value) {
        this.visibilities = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OWNER:
        if (value == null) {
          unsetOwner();
        } else {
          setOwner((String)value);
        }
        break;

      case HYPOTHESIS_ID:
        if (value == null) {
          unsetHypothesisId();
        } else {
          setHypothesisId((String)value);
        }
        break;

      case MAX_RESULTS:
        if (value == null) {
          unsetMaxResults();
        } else {
          setMaxResults((Integer)value);
        }
        break;

      case JUSTIFICATION:
        if (value == null) {
          unsetJustification();
        } else {
          setJustification((String)value);
        }
        break;

      case USERID:
        if (value == null) {
          unsetUserid();
        } else {
          setUserid((String)value);
        }
        break;

      case VISIBILITIES:
        if (value == null) {
          unsetVisibilities();
        } else {
          setVisibilities((Set<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OWNER:
        return getOwner();

      case HYPOTHESIS_ID:
        return getHypothesisId();

      case MAX_RESULTS:
        return Integer.valueOf(getMaxResults());

      case JUSTIFICATION:
        return getJustification();

      case USERID:
        return getUserid();

      case VISIBILITIES:
        return getVisibilities();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OWNER:
        return isSetOwner();
      case HYPOTHESIS_ID:
        return isSetHypothesisId();
      case MAX_RESULTS:
        return isSetMaxResults();
      case JUSTIFICATION:
        return isSetJustification();
      case USERID:
        return isSetUserid();
      case VISIBILITIES:
        return isSetVisibilities();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createResult_args)
        return this.equals((createResult_args)that);
      return false;
    }

    public boolean equals(createResult_args that) {
      if (that == null)
        return false;

      boolean this_present_owner = true && this.isSetOwner();
      boolean that_present_owner = true && that.isSetOwner();
      if (this_present_owner || that_present_owner) {
        if (!(this_present_owner && that_present_owner))
          return false;
        if (!this.owner.equals(that.owner))
          return false;
      }

      boolean this_present_hypothesisId = true && this.isSetHypothesisId();
      boolean that_present_hypothesisId = true && that.isSetHypothesisId();
      if (this_present_hypothesisId || that_present_hypothesisId) {
        if (!(this_present_hypothesisId && that_present_hypothesisId))
          return false;
        if (!this.hypothesisId.equals(that.hypothesisId))
          return false;
      }

      boolean this_present_maxResults = true;
      boolean that_present_maxResults = true;
      if (this_present_maxResults || that_present_maxResults) {
        if (!(this_present_maxResults && that_present_maxResults))
          return false;
        if (this.maxResults != that.maxResults)
          return false;
      }

      boolean this_present_justification = true && this.isSetJustification();
      boolean that_present_justification = true && that.isSetJustification();
      if (this_present_justification || that_present_justification) {
        if (!(this_present_justification && that_present_justification))
          return false;
        if (!this.justification.equals(that.justification))
          return false;
      }

      boolean this_present_userid = true && this.isSetUserid();
      boolean that_present_userid = true && that.isSetUserid();
      if (this_present_userid || that_present_userid) {
        if (!(this_present_userid && that_present_userid))
          return false;
        if (!this.userid.equals(that.userid))
          return false;
      }

      boolean this_present_visibilities = true && this.isSetVisibilities();
      boolean that_present_visibilities = true && that.isSetVisibilities();
      if (this_present_visibilities || that_present_visibilities) {
        if (!(this_present_visibilities && that_present_visibilities))
          return false;
        if (!this.visibilities.equals(that.visibilities))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(createResult_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      createResult_args typedOther = (createResult_args)other;

      lastComparison = Boolean.valueOf(isSetOwner()).compareTo(typedOther.isSetOwner());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOwner()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.owner, typedOther.owner);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHypothesisId()).compareTo(typedOther.isSetHypothesisId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHypothesisId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hypothesisId, typedOther.hypothesisId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMaxResults()).compareTo(typedOther.isSetMaxResults());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMaxResults()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxResults, typedOther.maxResults);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetJustification()).compareTo(typedOther.isSetJustification());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJustification()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.justification, typedOther.justification);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserid()).compareTo(typedOther.isSetUserid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userid, typedOther.userid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVisibilities()).compareTo(typedOther.isSetVisibilities());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVisibilities()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.visibilities, typedOther.visibilities);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createResult_args(");
      boolean first = true;

      sb.append("owner:");
      if (this.owner == null) {
        sb.append("null");
      } else {
        sb.append(this.owner);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hypothesisId:");
      if (this.hypothesisId == null) {
        sb.append("null");
      } else {
        sb.append(this.hypothesisId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("maxResults:");
      sb.append(this.maxResults);
      first = false;
      if (!first) sb.append(", ");
      sb.append("justification:");
      if (this.justification == null) {
        sb.append("null");
      } else {
        sb.append(this.justification);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userid:");
      if (this.userid == null) {
        sb.append("null");
      } else {
        sb.append(this.userid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("visibilities:");
      if (this.visibilities == null) {
        sb.append("null");
      } else {
        sb.append(this.visibilities);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createResult_argsStandardSchemeFactory implements SchemeFactory {
      public createResult_argsStandardScheme getScheme() {
        return new createResult_argsStandardScheme();
      }
    }

    private static class createResult_argsStandardScheme extends StandardScheme<createResult_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createResult_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OWNER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.owner = iprot.readString();
                struct.setOwnerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // HYPOTHESIS_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.hypothesisId = iprot.readString();
                struct.setHypothesisIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MAX_RESULTS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.maxResults = iprot.readI32();
                struct.setMaxResultsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // JUSTIFICATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.justification = iprot.readString();
                struct.setJustificationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // USERID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userid = iprot.readString();
                struct.setUseridIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // VISIBILITIES
              if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                {
                  org.apache.thrift.protocol.TSet _set248 = iprot.readSetBegin();
                  struct.visibilities = new HashSet<String>(2*_set248.size);
                  for (int _i249 = 0; _i249 < _set248.size; ++_i249)
                  {
                    String _elem250; // required
                    _elem250 = iprot.readString();
                    struct.visibilities.add(_elem250);
                  }
                  iprot.readSetEnd();
                }
                struct.setVisibilitiesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createResult_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.owner != null) {
          oprot.writeFieldBegin(OWNER_FIELD_DESC);
          oprot.writeString(struct.owner);
          oprot.writeFieldEnd();
        }
        if (struct.hypothesisId != null) {
          oprot.writeFieldBegin(HYPOTHESIS_ID_FIELD_DESC);
          oprot.writeString(struct.hypothesisId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(MAX_RESULTS_FIELD_DESC);
        oprot.writeI32(struct.maxResults);
        oprot.writeFieldEnd();
        if (struct.justification != null) {
          oprot.writeFieldBegin(JUSTIFICATION_FIELD_DESC);
          oprot.writeString(struct.justification);
          oprot.writeFieldEnd();
        }
        if (struct.userid != null) {
          oprot.writeFieldBegin(USERID_FIELD_DESC);
          oprot.writeString(struct.userid);
          oprot.writeFieldEnd();
        }
        if (struct.visibilities != null) {
          oprot.writeFieldBegin(VISIBILITIES_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.visibilities.size()));
            for (String _iter251 : struct.visibilities)
            {
              oprot.writeString(_iter251);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createResult_argsTupleSchemeFactory implements SchemeFactory {
      public createResult_argsTupleScheme getScheme() {
        return new createResult_argsTupleScheme();
      }
    }

    private static class createResult_argsTupleScheme extends TupleScheme<createResult_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createResult_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOwner()) {
          optionals.set(0);
        }
        if (struct.isSetHypothesisId()) {
          optionals.set(1);
        }
        if (struct.isSetMaxResults()) {
          optionals.set(2);
        }
        if (struct.isSetJustification()) {
          optionals.set(3);
        }
        if (struct.isSetUserid()) {
          optionals.set(4);
        }
        if (struct.isSetVisibilities()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetOwner()) {
          oprot.writeString(struct.owner);
        }
        if (struct.isSetHypothesisId()) {
          oprot.writeString(struct.hypothesisId);
        }
        if (struct.isSetMaxResults()) {
          oprot.writeI32(struct.maxResults);
        }
        if (struct.isSetJustification()) {
          oprot.writeString(struct.justification);
        }
        if (struct.isSetUserid()) {
          oprot.writeString(struct.userid);
        }
        if (struct.isSetVisibilities()) {
          {
            oprot.writeI32(struct.visibilities.size());
            for (String _iter252 : struct.visibilities)
            {
              oprot.writeString(_iter252);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createResult_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.owner = iprot.readString();
          struct.setOwnerIsSet(true);
        }
        if (incoming.get(1)) {
          struct.hypothesisId = iprot.readString();
          struct.setHypothesisIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.maxResults = iprot.readI32();
          struct.setMaxResultsIsSet(true);
        }
        if (incoming.get(3)) {
          struct.justification = iprot.readString();
          struct.setJustificationIsSet(true);
        }
        if (incoming.get(4)) {
          struct.userid = iprot.readString();
          struct.setUseridIsSet(true);
        }
        if (incoming.get(5)) {
          {
            org.apache.thrift.protocol.TSet _set253 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.visibilities = new HashSet<String>(2*_set253.size);
            for (int _i254 = 0; _i254 < _set253.size; ++_i254)
            {
              String _elem255; // required
              _elem255 = iprot.readString();
              struct.visibilities.add(_elem255);
            }
          }
          struct.setVisibilitiesIsSet(true);
        }
      }
    }

  }

  public static class createResult_result implements org.apache.thrift.TBase<createResult_result, createResult_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createResult_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createResult_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createResult_resultTupleSchemeFactory());
    }

    public com._42six.amino.common.thrift.TQueryResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com._42six.amino.common.thrift.TQueryResult.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createResult_result.class, metaDataMap);
    }

    public createResult_result() {
    }

    public createResult_result(
      com._42six.amino.common.thrift.TQueryResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createResult_result(createResult_result other) {
      if (other.isSetSuccess()) {
        this.success = new com._42six.amino.common.thrift.TQueryResult(other.success);
      }
    }

    public createResult_result deepCopy() {
      return new createResult_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com._42six.amino.common.thrift.TQueryResult getSuccess() {
      return this.success;
    }

    public createResult_result setSuccess(com._42six.amino.common.thrift.TQueryResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com._42six.amino.common.thrift.TQueryResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createResult_result)
        return this.equals((createResult_result)that);
      return false;
    }

    public boolean equals(createResult_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(createResult_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      createResult_result typedOther = (createResult_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createResult_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createResult_resultStandardSchemeFactory implements SchemeFactory {
      public createResult_resultStandardScheme getScheme() {
        return new createResult_resultStandardScheme();
      }
    }

    private static class createResult_resultStandardScheme extends StandardScheme<createResult_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createResult_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com._42six.amino.common.thrift.TQueryResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createResult_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createResult_resultTupleSchemeFactory implements SchemeFactory {
      public createResult_resultTupleScheme getScheme() {
        return new createResult_resultTupleScheme();
      }
    }

    private static class createResult_resultTupleScheme extends TupleScheme<createResult_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createResult_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createResult_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com._42six.amino.common.thrift.TQueryResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class deleteResult_args implements org.apache.thrift.TBase<deleteResult_args, deleteResult_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteResult_args");

    private static final org.apache.thrift.protocol.TField OWNER_FIELD_DESC = new org.apache.thrift.protocol.TField("owner", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField VISIBILITIES_FIELD_DESC = new org.apache.thrift.protocol.TField("visibilities", org.apache.thrift.protocol.TType.SET, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteResult_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteResult_argsTupleSchemeFactory());
    }

    public String owner; // required
    public String id; // required
    public Set<String> visibilities; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OWNER((short)1, "owner"),
      ID((short)2, "id"),
      VISIBILITIES((short)3, "visibilities");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OWNER
            return OWNER;
          case 2: // ID
            return ID;
          case 3: // VISIBILITIES
            return VISIBILITIES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OWNER, new org.apache.thrift.meta_data.FieldMetaData("owner", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.VISIBILITIES, new org.apache.thrift.meta_data.FieldMetaData("visibilities", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteResult_args.class, metaDataMap);
    }

    public deleteResult_args() {
    }

    public deleteResult_args(
      String owner,
      String id,
      Set<String> visibilities)
    {
      this();
      this.owner = owner;
      this.id = id;
      this.visibilities = visibilities;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteResult_args(deleteResult_args other) {
      if (other.isSetOwner()) {
        this.owner = other.owner;
      }
      if (other.isSetId()) {
        this.id = other.id;
      }
      if (other.isSetVisibilities()) {
        Set<String> __this__visibilities = new HashSet<String>();
        for (String other_element : other.visibilities) {
          __this__visibilities.add(other_element);
        }
        this.visibilities = __this__visibilities;
      }
    }

    public deleteResult_args deepCopy() {
      return new deleteResult_args(this);
    }

    @Override
    public void clear() {
      this.owner = null;
      this.id = null;
      this.visibilities = null;
    }

    public String getOwner() {
      return this.owner;
    }

    public deleteResult_args setOwner(String owner) {
      this.owner = owner;
      return this;
    }

    public void unsetOwner() {
      this.owner = null;
    }

    /** Returns true if field owner is set (has been assigned a value) and false otherwise */
    public boolean isSetOwner() {
      return this.owner != null;
    }

    public void setOwnerIsSet(boolean value) {
      if (!value) {
        this.owner = null;
      }
    }

    public String getId() {
      return this.id;
    }

    public deleteResult_args setId(String id) {
      this.id = id;
      return this;
    }

    public void unsetId() {
      this.id = null;
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return this.id != null;
    }

    public void setIdIsSet(boolean value) {
      if (!value) {
        this.id = null;
      }
    }

    public int getVisibilitiesSize() {
      return (this.visibilities == null) ? 0 : this.visibilities.size();
    }

    public java.util.Iterator<String> getVisibilitiesIterator() {
      return (this.visibilities == null) ? null : this.visibilities.iterator();
    }

    public void addToVisibilities(String elem) {
      if (this.visibilities == null) {
        this.visibilities = new HashSet<String>();
      }
      this.visibilities.add(elem);
    }

    public Set<String> getVisibilities() {
      return this.visibilities;
    }

    public deleteResult_args setVisibilities(Set<String> visibilities) {
      this.visibilities = visibilities;
      return this;
    }

    public void unsetVisibilities() {
      this.visibilities = null;
    }

    /** Returns true if field visibilities is set (has been assigned a value) and false otherwise */
    public boolean isSetVisibilities() {
      return this.visibilities != null;
    }

    public void setVisibilitiesIsSet(boolean value) {
      if (!value) {
        this.visibilities = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OWNER:
        if (value == null) {
          unsetOwner();
        } else {
          setOwner((String)value);
        }
        break;

      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((String)value);
        }
        break;

      case VISIBILITIES:
        if (value == null) {
          unsetVisibilities();
        } else {
          setVisibilities((Set<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OWNER:
        return getOwner();

      case ID:
        return getId();

      case VISIBILITIES:
        return getVisibilities();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OWNER:
        return isSetOwner();
      case ID:
        return isSetId();
      case VISIBILITIES:
        return isSetVisibilities();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteResult_args)
        return this.equals((deleteResult_args)that);
      return false;
    }

    public boolean equals(deleteResult_args that) {
      if (that == null)
        return false;

      boolean this_present_owner = true && this.isSetOwner();
      boolean that_present_owner = true && that.isSetOwner();
      if (this_present_owner || that_present_owner) {
        if (!(this_present_owner && that_present_owner))
          return false;
        if (!this.owner.equals(that.owner))
          return false;
      }

      boolean this_present_id = true && this.isSetId();
      boolean that_present_id = true && that.isSetId();
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (!this.id.equals(that.id))
          return false;
      }

      boolean this_present_visibilities = true && this.isSetVisibilities();
      boolean that_present_visibilities = true && that.isSetVisibilities();
      if (this_present_visibilities || that_present_visibilities) {
        if (!(this_present_visibilities && that_present_visibilities))
          return false;
        if (!this.visibilities.equals(that.visibilities))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(deleteResult_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deleteResult_args typedOther = (deleteResult_args)other;

      lastComparison = Boolean.valueOf(isSetOwner()).compareTo(typedOther.isSetOwner());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOwner()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.owner, typedOther.owner);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVisibilities()).compareTo(typedOther.isSetVisibilities());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVisibilities()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.visibilities, typedOther.visibilities);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteResult_args(");
      boolean first = true;

      sb.append("owner:");
      if (this.owner == null) {
        sb.append("null");
      } else {
        sb.append(this.owner);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("visibilities:");
      if (this.visibilities == null) {
        sb.append("null");
      } else {
        sb.append(this.visibilities);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteResult_argsStandardSchemeFactory implements SchemeFactory {
      public deleteResult_argsStandardScheme getScheme() {
        return new deleteResult_argsStandardScheme();
      }
    }

    private static class deleteResult_argsStandardScheme extends StandardScheme<deleteResult_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteResult_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OWNER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.owner = iprot.readString();
                struct.setOwnerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.id = iprot.readString();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // VISIBILITIES
              if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                {
                  org.apache.thrift.protocol.TSet _set256 = iprot.readSetBegin();
                  struct.visibilities = new HashSet<String>(2*_set256.size);
                  for (int _i257 = 0; _i257 < _set256.size; ++_i257)
                  {
                    String _elem258; // required
                    _elem258 = iprot.readString();
                    struct.visibilities.add(_elem258);
                  }
                  iprot.readSetEnd();
                }
                struct.setVisibilitiesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteResult_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.owner != null) {
          oprot.writeFieldBegin(OWNER_FIELD_DESC);
          oprot.writeString(struct.owner);
          oprot.writeFieldEnd();
        }
        if (struct.id != null) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          oprot.writeString(struct.id);
          oprot.writeFieldEnd();
        }
        if (struct.visibilities != null) {
          oprot.writeFieldBegin(VISIBILITIES_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.visibilities.size()));
            for (String _iter259 : struct.visibilities)
            {
              oprot.writeString(_iter259);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteResult_argsTupleSchemeFactory implements SchemeFactory {
      public deleteResult_argsTupleScheme getScheme() {
        return new deleteResult_argsTupleScheme();
      }
    }

    private static class deleteResult_argsTupleScheme extends TupleScheme<deleteResult_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteResult_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOwner()) {
          optionals.set(0);
        }
        if (struct.isSetId()) {
          optionals.set(1);
        }
        if (struct.isSetVisibilities()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetOwner()) {
          oprot.writeString(struct.owner);
        }
        if (struct.isSetId()) {
          oprot.writeString(struct.id);
        }
        if (struct.isSetVisibilities()) {
          {
            oprot.writeI32(struct.visibilities.size());
            for (String _iter260 : struct.visibilities)
            {
              oprot.writeString(_iter260);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteResult_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.owner = iprot.readString();
          struct.setOwnerIsSet(true);
        }
        if (incoming.get(1)) {
          struct.id = iprot.readString();
          struct.setIdIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TSet _set261 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.visibilities = new HashSet<String>(2*_set261.size);
            for (int _i262 = 0; _i262 < _set261.size; ++_i262)
            {
              String _elem263; // required
              _elem263 = iprot.readString();
              struct.visibilities.add(_elem263);
            }
          }
          struct.setVisibilitiesIsSet(true);
        }
      }
    }

  }

  public static class deleteResult_result implements org.apache.thrift.TBase<deleteResult_result, deleteResult_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteResult_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteResult_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteResult_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteResult_result.class, metaDataMap);
    }

    public deleteResult_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteResult_result(deleteResult_result other) {
    }

    public deleteResult_result deepCopy() {
      return new deleteResult_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteResult_result)
        return this.equals((deleteResult_result)that);
      return false;
    }

    public boolean equals(deleteResult_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(deleteResult_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deleteResult_result typedOther = (deleteResult_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteResult_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteResult_resultStandardSchemeFactory implements SchemeFactory {
      public deleteResult_resultStandardScheme getScheme() {
        return new deleteResult_resultStandardScheme();
      }
    }

    private static class deleteResult_resultStandardScheme extends StandardScheme<deleteResult_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteResult_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteResult_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteResult_resultTupleSchemeFactory implements SchemeFactory {
      public deleteResult_resultTupleScheme getScheme() {
        return new deleteResult_resultTupleScheme();
      }
    }

    private static class deleteResult_resultTupleScheme extends TupleScheme<deleteResult_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteResult_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteResult_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getCountForHypothesisFeature_args implements org.apache.thrift.TBase<getCountForHypothesisFeature_args, getCountForHypothesisFeature_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCountForHypothesisFeature_args");

    private static final org.apache.thrift.protocol.TField FEATURE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("featureId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField BUCKET_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("bucketName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField BEGIN_RANGE_FIELD_DESC = new org.apache.thrift.protocol.TField("beginRange", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField END_RANGE_FIELD_DESC = new org.apache.thrift.protocol.TField("endRange", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField VISIBILITIES_FIELD_DESC = new org.apache.thrift.protocol.TField("visibilities", org.apache.thrift.protocol.TType.SET, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCountForHypothesisFeature_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCountForHypothesisFeature_argsTupleSchemeFactory());
    }

    public String featureId; // required
    public String bucketName; // required
    public String beginRange; // required
    public String endRange; // required
    public Set<String> visibilities; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FEATURE_ID((short)1, "featureId"),
      BUCKET_NAME((short)2, "bucketName"),
      BEGIN_RANGE((short)3, "beginRange"),
      END_RANGE((short)4, "endRange"),
      VISIBILITIES((short)5, "visibilities");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FEATURE_ID
            return FEATURE_ID;
          case 2: // BUCKET_NAME
            return BUCKET_NAME;
          case 3: // BEGIN_RANGE
            return BEGIN_RANGE;
          case 4: // END_RANGE
            return END_RANGE;
          case 5: // VISIBILITIES
            return VISIBILITIES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FEATURE_ID, new org.apache.thrift.meta_data.FieldMetaData("featureId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BUCKET_NAME, new org.apache.thrift.meta_data.FieldMetaData("bucketName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BEGIN_RANGE, new org.apache.thrift.meta_data.FieldMetaData("beginRange", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.END_RANGE, new org.apache.thrift.meta_data.FieldMetaData("endRange", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.VISIBILITIES, new org.apache.thrift.meta_data.FieldMetaData("visibilities", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCountForHypothesisFeature_args.class, metaDataMap);
    }

    public getCountForHypothesisFeature_args() {
    }

    public getCountForHypothesisFeature_args(
      String featureId,
      String bucketName,
      String beginRange,
      String endRange,
      Set<String> visibilities)
    {
      this();
      this.featureId = featureId;
      this.bucketName = bucketName;
      this.beginRange = beginRange;
      this.endRange = endRange;
      this.visibilities = visibilities;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCountForHypothesisFeature_args(getCountForHypothesisFeature_args other) {
      if (other.isSetFeatureId()) {
        this.featureId = other.featureId;
      }
      if (other.isSetBucketName()) {
        this.bucketName = other.bucketName;
      }
      if (other.isSetBeginRange()) {
        this.beginRange = other.beginRange;
      }
      if (other.isSetEndRange()) {
        this.endRange = other.endRange;
      }
      if (other.isSetVisibilities()) {
        Set<String> __this__visibilities = new HashSet<String>();
        for (String other_element : other.visibilities) {
          __this__visibilities.add(other_element);
        }
        this.visibilities = __this__visibilities;
      }
    }

    public getCountForHypothesisFeature_args deepCopy() {
      return new getCountForHypothesisFeature_args(this);
    }

    @Override
    public void clear() {
      this.featureId = null;
      this.bucketName = null;
      this.beginRange = null;
      this.endRange = null;
      this.visibilities = null;
    }

    public String getFeatureId() {
      return this.featureId;
    }

    public getCountForHypothesisFeature_args setFeatureId(String featureId) {
      this.featureId = featureId;
      return this;
    }

    public void unsetFeatureId() {
      this.featureId = null;
    }

    /** Returns true if field featureId is set (has been assigned a value) and false otherwise */
    public boolean isSetFeatureId() {
      return this.featureId != null;
    }

    public void setFeatureIdIsSet(boolean value) {
      if (!value) {
        this.featureId = null;
      }
    }

    public String getBucketName() {
      return this.bucketName;
    }

    public getCountForHypothesisFeature_args setBucketName(String bucketName) {
      this.bucketName = bucketName;
      return this;
    }

    public void unsetBucketName() {
      this.bucketName = null;
    }

    /** Returns true if field bucketName is set (has been assigned a value) and false otherwise */
    public boolean isSetBucketName() {
      return this.bucketName != null;
    }

    public void setBucketNameIsSet(boolean value) {
      if (!value) {
        this.bucketName = null;
      }
    }

    public String getBeginRange() {
      return this.beginRange;
    }

    public getCountForHypothesisFeature_args setBeginRange(String beginRange) {
      this.beginRange = beginRange;
      return this;
    }

    public void unsetBeginRange() {
      this.beginRange = null;
    }

    /** Returns true if field beginRange is set (has been assigned a value) and false otherwise */
    public boolean isSetBeginRange() {
      return this.beginRange != null;
    }

    public void setBeginRangeIsSet(boolean value) {
      if (!value) {
        this.beginRange = null;
      }
    }

    public String getEndRange() {
      return this.endRange;
    }

    public getCountForHypothesisFeature_args setEndRange(String endRange) {
      this.endRange = endRange;
      return this;
    }

    public void unsetEndRange() {
      this.endRange = null;
    }

    /** Returns true if field endRange is set (has been assigned a value) and false otherwise */
    public boolean isSetEndRange() {
      return this.endRange != null;
    }

    public void setEndRangeIsSet(boolean value) {
      if (!value) {
        this.endRange = null;
      }
    }

    public int getVisibilitiesSize() {
      return (this.visibilities == null) ? 0 : this.visibilities.size();
    }

    public java.util.Iterator<String> getVisibilitiesIterator() {
      return (this.visibilities == null) ? null : this.visibilities.iterator();
    }

    public void addToVisibilities(String elem) {
      if (this.visibilities == null) {
        this.visibilities = new HashSet<String>();
      }
      this.visibilities.add(elem);
    }

    public Set<String> getVisibilities() {
      return this.visibilities;
    }

    public getCountForHypothesisFeature_args setVisibilities(Set<String> visibilities) {
      this.visibilities = visibilities;
      return this;
    }

    public void unsetVisibilities() {
      this.visibilities = null;
    }

    /** Returns true if field visibilities is set (has been assigned a value) and false otherwise */
    public boolean isSetVisibilities() {
      return this.visibilities != null;
    }

    public void setVisibilitiesIsSet(boolean value) {
      if (!value) {
        this.visibilities = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FEATURE_ID:
        if (value == null) {
          unsetFeatureId();
        } else {
          setFeatureId((String)value);
        }
        break;

      case BUCKET_NAME:
        if (value == null) {
          unsetBucketName();
        } else {
          setBucketName((String)value);
        }
        break;

      case BEGIN_RANGE:
        if (value == null) {
          unsetBeginRange();
        } else {
          setBeginRange((String)value);
        }
        break;

      case END_RANGE:
        if (value == null) {
          unsetEndRange();
        } else {
          setEndRange((String)value);
        }
        break;

      case VISIBILITIES:
        if (value == null) {
          unsetVisibilities();
        } else {
          setVisibilities((Set<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FEATURE_ID:
        return getFeatureId();

      case BUCKET_NAME:
        return getBucketName();

      case BEGIN_RANGE:
        return getBeginRange();

      case END_RANGE:
        return getEndRange();

      case VISIBILITIES:
        return getVisibilities();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FEATURE_ID:
        return isSetFeatureId();
      case BUCKET_NAME:
        return isSetBucketName();
      case BEGIN_RANGE:
        return isSetBeginRange();
      case END_RANGE:
        return isSetEndRange();
      case VISIBILITIES:
        return isSetVisibilities();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCountForHypothesisFeature_args)
        return this.equals((getCountForHypothesisFeature_args)that);
      return false;
    }

    public boolean equals(getCountForHypothesisFeature_args that) {
      if (that == null)
        return false;

      boolean this_present_featureId = true && this.isSetFeatureId();
      boolean that_present_featureId = true && that.isSetFeatureId();
      if (this_present_featureId || that_present_featureId) {
        if (!(this_present_featureId && that_present_featureId))
          return false;
        if (!this.featureId.equals(that.featureId))
          return false;
      }

      boolean this_present_bucketName = true && this.isSetBucketName();
      boolean that_present_bucketName = true && that.isSetBucketName();
      if (this_present_bucketName || that_present_bucketName) {
        if (!(this_present_bucketName && that_present_bucketName))
          return false;
        if (!this.bucketName.equals(that.bucketName))
          return false;
      }

      boolean this_present_beginRange = true && this.isSetBeginRange();
      boolean that_present_beginRange = true && that.isSetBeginRange();
      if (this_present_beginRange || that_present_beginRange) {
        if (!(this_present_beginRange && that_present_beginRange))
          return false;
        if (!this.beginRange.equals(that.beginRange))
          return false;
      }

      boolean this_present_endRange = true && this.isSetEndRange();
      boolean that_present_endRange = true && that.isSetEndRange();
      if (this_present_endRange || that_present_endRange) {
        if (!(this_present_endRange && that_present_endRange))
          return false;
        if (!this.endRange.equals(that.endRange))
          return false;
      }

      boolean this_present_visibilities = true && this.isSetVisibilities();
      boolean that_present_visibilities = true && that.isSetVisibilities();
      if (this_present_visibilities || that_present_visibilities) {
        if (!(this_present_visibilities && that_present_visibilities))
          return false;
        if (!this.visibilities.equals(that.visibilities))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getCountForHypothesisFeature_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getCountForHypothesisFeature_args typedOther = (getCountForHypothesisFeature_args)other;

      lastComparison = Boolean.valueOf(isSetFeatureId()).compareTo(typedOther.isSetFeatureId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFeatureId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.featureId, typedOther.featureId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBucketName()).compareTo(typedOther.isSetBucketName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBucketName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bucketName, typedOther.bucketName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBeginRange()).compareTo(typedOther.isSetBeginRange());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBeginRange()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.beginRange, typedOther.beginRange);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEndRange()).compareTo(typedOther.isSetEndRange());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndRange()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endRange, typedOther.endRange);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVisibilities()).compareTo(typedOther.isSetVisibilities());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVisibilities()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.visibilities, typedOther.visibilities);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCountForHypothesisFeature_args(");
      boolean first = true;

      sb.append("featureId:");
      if (this.featureId == null) {
        sb.append("null");
      } else {
        sb.append(this.featureId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bucketName:");
      if (this.bucketName == null) {
        sb.append("null");
      } else {
        sb.append(this.bucketName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("beginRange:");
      if (this.beginRange == null) {
        sb.append("null");
      } else {
        sb.append(this.beginRange);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("endRange:");
      if (this.endRange == null) {
        sb.append("null");
      } else {
        sb.append(this.endRange);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("visibilities:");
      if (this.visibilities == null) {
        sb.append("null");
      } else {
        sb.append(this.visibilities);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCountForHypothesisFeature_argsStandardSchemeFactory implements SchemeFactory {
      public getCountForHypothesisFeature_argsStandardScheme getScheme() {
        return new getCountForHypothesisFeature_argsStandardScheme();
      }
    }

    private static class getCountForHypothesisFeature_argsStandardScheme extends StandardScheme<getCountForHypothesisFeature_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCountForHypothesisFeature_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FEATURE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.featureId = iprot.readString();
                struct.setFeatureIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BUCKET_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.bucketName = iprot.readString();
                struct.setBucketNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // BEGIN_RANGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.beginRange = iprot.readString();
                struct.setBeginRangeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // END_RANGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.endRange = iprot.readString();
                struct.setEndRangeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // VISIBILITIES
              if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                {
                  org.apache.thrift.protocol.TSet _set264 = iprot.readSetBegin();
                  struct.visibilities = new HashSet<String>(2*_set264.size);
                  for (int _i265 = 0; _i265 < _set264.size; ++_i265)
                  {
                    String _elem266; // required
                    _elem266 = iprot.readString();
                    struct.visibilities.add(_elem266);
                  }
                  iprot.readSetEnd();
                }
                struct.setVisibilitiesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCountForHypothesisFeature_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.featureId != null) {
          oprot.writeFieldBegin(FEATURE_ID_FIELD_DESC);
          oprot.writeString(struct.featureId);
          oprot.writeFieldEnd();
        }
        if (struct.bucketName != null) {
          oprot.writeFieldBegin(BUCKET_NAME_FIELD_DESC);
          oprot.writeString(struct.bucketName);
          oprot.writeFieldEnd();
        }
        if (struct.beginRange != null) {
          oprot.writeFieldBegin(BEGIN_RANGE_FIELD_DESC);
          oprot.writeString(struct.beginRange);
          oprot.writeFieldEnd();
        }
        if (struct.endRange != null) {
          oprot.writeFieldBegin(END_RANGE_FIELD_DESC);
          oprot.writeString(struct.endRange);
          oprot.writeFieldEnd();
        }
        if (struct.visibilities != null) {
          oprot.writeFieldBegin(VISIBILITIES_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.visibilities.size()));
            for (String _iter267 : struct.visibilities)
            {
              oprot.writeString(_iter267);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCountForHypothesisFeature_argsTupleSchemeFactory implements SchemeFactory {
      public getCountForHypothesisFeature_argsTupleScheme getScheme() {
        return new getCountForHypothesisFeature_argsTupleScheme();
      }
    }

    private static class getCountForHypothesisFeature_argsTupleScheme extends TupleScheme<getCountForHypothesisFeature_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCountForHypothesisFeature_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFeatureId()) {
          optionals.set(0);
        }
        if (struct.isSetBucketName()) {
          optionals.set(1);
        }
        if (struct.isSetBeginRange()) {
          optionals.set(2);
        }
        if (struct.isSetEndRange()) {
          optionals.set(3);
        }
        if (struct.isSetVisibilities()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetFeatureId()) {
          oprot.writeString(struct.featureId);
        }
        if (struct.isSetBucketName()) {
          oprot.writeString(struct.bucketName);
        }
        if (struct.isSetBeginRange()) {
          oprot.writeString(struct.beginRange);
        }
        if (struct.isSetEndRange()) {
          oprot.writeString(struct.endRange);
        }
        if (struct.isSetVisibilities()) {
          {
            oprot.writeI32(struct.visibilities.size());
            for (String _iter268 : struct.visibilities)
            {
              oprot.writeString(_iter268);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCountForHypothesisFeature_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.featureId = iprot.readString();
          struct.setFeatureIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.bucketName = iprot.readString();
          struct.setBucketNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.beginRange = iprot.readString();
          struct.setBeginRangeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.endRange = iprot.readString();
          struct.setEndRangeIsSet(true);
        }
        if (incoming.get(4)) {
          {
            org.apache.thrift.protocol.TSet _set269 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.visibilities = new HashSet<String>(2*_set269.size);
            for (int _i270 = 0; _i270 < _set269.size; ++_i270)
            {
              String _elem271; // required
              _elem271 = iprot.readString();
              struct.visibilities.add(_elem271);
            }
          }
          struct.setVisibilitiesIsSet(true);
        }
      }
    }

  }

  public static class getCountForHypothesisFeature_result implements org.apache.thrift.TBase<getCountForHypothesisFeature_result, getCountForHypothesisFeature_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCountForHypothesisFeature_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCountForHypothesisFeature_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCountForHypothesisFeature_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCountForHypothesisFeature_result.class, metaDataMap);
    }

    public getCountForHypothesisFeature_result() {
    }

    public getCountForHypothesisFeature_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCountForHypothesisFeature_result(getCountForHypothesisFeature_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getCountForHypothesisFeature_result deepCopy() {
      return new getCountForHypothesisFeature_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public getCountForHypothesisFeature_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCountForHypothesisFeature_result)
        return this.equals((getCountForHypothesisFeature_result)that);
      return false;
    }

    public boolean equals(getCountForHypothesisFeature_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getCountForHypothesisFeature_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getCountForHypothesisFeature_result typedOther = (getCountForHypothesisFeature_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCountForHypothesisFeature_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCountForHypothesisFeature_resultStandardSchemeFactory implements SchemeFactory {
      public getCountForHypothesisFeature_resultStandardScheme getScheme() {
        return new getCountForHypothesisFeature_resultStandardScheme();
      }
    }

    private static class getCountForHypothesisFeature_resultStandardScheme extends StandardScheme<getCountForHypothesisFeature_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCountForHypothesisFeature_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCountForHypothesisFeature_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCountForHypothesisFeature_resultTupleSchemeFactory implements SchemeFactory {
      public getCountForHypothesisFeature_resultTupleScheme getScheme() {
        return new getCountForHypothesisFeature_resultTupleScheme();
      }
    }

    private static class getCountForHypothesisFeature_resultTupleScheme extends TupleScheme<getCountForHypothesisFeature_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCountForHypothesisFeature_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCountForHypothesisFeature_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class createNonPersistedHypothesisListForBucketValue_args implements org.apache.thrift.TBase<createNonPersistedHypothesisListForBucketValue_args, createNonPersistedHypothesisListForBucketValue_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createNonPersistedHypothesisListForBucketValue_args");

    private static final org.apache.thrift.protocol.TField DATASOURCEID_FIELD_DESC = new org.apache.thrift.protocol.TField("datasourceid", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField BUCKETID_FIELD_DESC = new org.apache.thrift.protocol.TField("bucketid", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField BUCKET_VALUES_FIELD_DESC = new org.apache.thrift.protocol.TField("bucketValues", org.apache.thrift.protocol.TType.LIST, (short)3);
    private static final org.apache.thrift.protocol.TField VISIBILITIES_FIELD_DESC = new org.apache.thrift.protocol.TField("visibilities", org.apache.thrift.protocol.TType.SET, (short)4);
    private static final org.apache.thrift.protocol.TField USERID_FIELD_DESC = new org.apache.thrift.protocol.TField("userid", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField JUSTIFICATION_FIELD_DESC = new org.apache.thrift.protocol.TField("justification", org.apache.thrift.protocol.TType.STRING, (short)6);
    private static final org.apache.thrift.protocol.TField FEATURE_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("featureIds", org.apache.thrift.protocol.TType.LIST, (short)7);
    private static final org.apache.thrift.protocol.TField TIMEOUT_FIELD_DESC = new org.apache.thrift.protocol.TField("timeout", org.apache.thrift.protocol.TType.I64, (short)8);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createNonPersistedHypothesisListForBucketValue_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createNonPersistedHypothesisListForBucketValue_argsTupleSchemeFactory());
    }

    public String datasourceid; // required
    public String bucketid; // required
    public List<String> bucketValues; // required
    public Set<String> visibilities; // required
    public String userid; // required
    public String justification; // required
    public List<String> featureIds; // required
    public long timeout; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATASOURCEID((short)1, "datasourceid"),
      BUCKETID((short)2, "bucketid"),
      BUCKET_VALUES((short)3, "bucketValues"),
      VISIBILITIES((short)4, "visibilities"),
      USERID((short)5, "userid"),
      JUSTIFICATION((short)6, "justification"),
      FEATURE_IDS((short)7, "featureIds"),
      TIMEOUT((short)8, "timeout");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATASOURCEID
            return DATASOURCEID;
          case 2: // BUCKETID
            return BUCKETID;
          case 3: // BUCKET_VALUES
            return BUCKET_VALUES;
          case 4: // VISIBILITIES
            return VISIBILITIES;
          case 5: // USERID
            return USERID;
          case 6: // JUSTIFICATION
            return JUSTIFICATION;
          case 7: // FEATURE_IDS
            return FEATURE_IDS;
          case 8: // TIMEOUT
            return TIMEOUT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TIMEOUT_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATASOURCEID, new org.apache.thrift.meta_data.FieldMetaData("datasourceid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BUCKETID, new org.apache.thrift.meta_data.FieldMetaData("bucketid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BUCKET_VALUES, new org.apache.thrift.meta_data.FieldMetaData("bucketValues", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.VISIBILITIES, new org.apache.thrift.meta_data.FieldMetaData("visibilities", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.USERID, new org.apache.thrift.meta_data.FieldMetaData("userid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.JUSTIFICATION, new org.apache.thrift.meta_data.FieldMetaData("justification", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FEATURE_IDS, new org.apache.thrift.meta_data.FieldMetaData("featureIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.TIMEOUT, new org.apache.thrift.meta_data.FieldMetaData("timeout", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createNonPersistedHypothesisListForBucketValue_args.class, metaDataMap);
    }

    public createNonPersistedHypothesisListForBucketValue_args() {
    }

    public createNonPersistedHypothesisListForBucketValue_args(
      String datasourceid,
      String bucketid,
      List<String> bucketValues,
      Set<String> visibilities,
      String userid,
      String justification,
      List<String> featureIds,
      long timeout)
    {
      this();
      this.datasourceid = datasourceid;
      this.bucketid = bucketid;
      this.bucketValues = bucketValues;
      this.visibilities = visibilities;
      this.userid = userid;
      this.justification = justification;
      this.featureIds = featureIds;
      this.timeout = timeout;
      setTimeoutIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createNonPersistedHypothesisListForBucketValue_args(createNonPersistedHypothesisListForBucketValue_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetDatasourceid()) {
        this.datasourceid = other.datasourceid;
      }
      if (other.isSetBucketid()) {
        this.bucketid = other.bucketid;
      }
      if (other.isSetBucketValues()) {
        List<String> __this__bucketValues = new ArrayList<String>();
        for (String other_element : other.bucketValues) {
          __this__bucketValues.add(other_element);
        }
        this.bucketValues = __this__bucketValues;
      }
      if (other.isSetVisibilities()) {
        Set<String> __this__visibilities = new HashSet<String>();
        for (String other_element : other.visibilities) {
          __this__visibilities.add(other_element);
        }
        this.visibilities = __this__visibilities;
      }
      if (other.isSetUserid()) {
        this.userid = other.userid;
      }
      if (other.isSetJustification()) {
        this.justification = other.justification;
      }
      if (other.isSetFeatureIds()) {
        List<String> __this__featureIds = new ArrayList<String>();
        for (String other_element : other.featureIds) {
          __this__featureIds.add(other_element);
        }
        this.featureIds = __this__featureIds;
      }
      this.timeout = other.timeout;
    }

    public createNonPersistedHypothesisListForBucketValue_args deepCopy() {
      return new createNonPersistedHypothesisListForBucketValue_args(this);
    }

    @Override
    public void clear() {
      this.datasourceid = null;
      this.bucketid = null;
      this.bucketValues = null;
      this.visibilities = null;
      this.userid = null;
      this.justification = null;
      this.featureIds = null;
      setTimeoutIsSet(false);
      this.timeout = 0;
    }

    public String getDatasourceid() {
      return this.datasourceid;
    }

    public createNonPersistedHypothesisListForBucketValue_args setDatasourceid(String datasourceid) {
      this.datasourceid = datasourceid;
      return this;
    }

    public void unsetDatasourceid() {
      this.datasourceid = null;
    }

    /** Returns true if field datasourceid is set (has been assigned a value) and false otherwise */
    public boolean isSetDatasourceid() {
      return this.datasourceid != null;
    }

    public void setDatasourceidIsSet(boolean value) {
      if (!value) {
        this.datasourceid = null;
      }
    }

    public String getBucketid() {
      return this.bucketid;
    }

    public createNonPersistedHypothesisListForBucketValue_args setBucketid(String bucketid) {
      this.bucketid = bucketid;
      return this;
    }

    public void unsetBucketid() {
      this.bucketid = null;
    }

    /** Returns true if field bucketid is set (has been assigned a value) and false otherwise */
    public boolean isSetBucketid() {
      return this.bucketid != null;
    }

    public void setBucketidIsSet(boolean value) {
      if (!value) {
        this.bucketid = null;
      }
    }

    public int getBucketValuesSize() {
      return (this.bucketValues == null) ? 0 : this.bucketValues.size();
    }

    public java.util.Iterator<String> getBucketValuesIterator() {
      return (this.bucketValues == null) ? null : this.bucketValues.iterator();
    }

    public void addToBucketValues(String elem) {
      if (this.bucketValues == null) {
        this.bucketValues = new ArrayList<String>();
      }
      this.bucketValues.add(elem);
    }

    public List<String> getBucketValues() {
      return this.bucketValues;
    }

    public createNonPersistedHypothesisListForBucketValue_args setBucketValues(List<String> bucketValues) {
      this.bucketValues = bucketValues;
      return this;
    }

    public void unsetBucketValues() {
      this.bucketValues = null;
    }

    /** Returns true if field bucketValues is set (has been assigned a value) and false otherwise */
    public boolean isSetBucketValues() {
      return this.bucketValues != null;
    }

    public void setBucketValuesIsSet(boolean value) {
      if (!value) {
        this.bucketValues = null;
      }
    }

    public int getVisibilitiesSize() {
      return (this.visibilities == null) ? 0 : this.visibilities.size();
    }

    public java.util.Iterator<String> getVisibilitiesIterator() {
      return (this.visibilities == null) ? null : this.visibilities.iterator();
    }

    public void addToVisibilities(String elem) {
      if (this.visibilities == null) {
        this.visibilities = new HashSet<String>();
      }
      this.visibilities.add(elem);
    }

    public Set<String> getVisibilities() {
      return this.visibilities;
    }

    public createNonPersistedHypothesisListForBucketValue_args setVisibilities(Set<String> visibilities) {
      this.visibilities = visibilities;
      return this;
    }

    public void unsetVisibilities() {
      this.visibilities = null;
    }

    /** Returns true if field visibilities is set (has been assigned a value) and false otherwise */
    public boolean isSetVisibilities() {
      return this.visibilities != null;
    }

    public void setVisibilitiesIsSet(boolean value) {
      if (!value) {
        this.visibilities = null;
      }
    }

    public String getUserid() {
      return this.userid;
    }

    public createNonPersistedHypothesisListForBucketValue_args setUserid(String userid) {
      this.userid = userid;
      return this;
    }

    public void unsetUserid() {
      this.userid = null;
    }

    /** Returns true if field userid is set (has been assigned a value) and false otherwise */
    public boolean isSetUserid() {
      return this.userid != null;
    }

    public void setUseridIsSet(boolean value) {
      if (!value) {
        this.userid = null;
      }
    }

    public String getJustification() {
      return this.justification;
    }

    public createNonPersistedHypothesisListForBucketValue_args setJustification(String justification) {
      this.justification = justification;
      return this;
    }

    public void unsetJustification() {
      this.justification = null;
    }

    /** Returns true if field justification is set (has been assigned a value) and false otherwise */
    public boolean isSetJustification() {
      return this.justification != null;
    }

    public void setJustificationIsSet(boolean value) {
      if (!value) {
        this.justification = null;
      }
    }

    public int getFeatureIdsSize() {
      return (this.featureIds == null) ? 0 : this.featureIds.size();
    }

    public java.util.Iterator<String> getFeatureIdsIterator() {
      return (this.featureIds == null) ? null : this.featureIds.iterator();
    }

    public void addToFeatureIds(String elem) {
      if (this.featureIds == null) {
        this.featureIds = new ArrayList<String>();
      }
      this.featureIds.add(elem);
    }

    public List<String> getFeatureIds() {
      return this.featureIds;
    }

    public createNonPersistedHypothesisListForBucketValue_args setFeatureIds(List<String> featureIds) {
      this.featureIds = featureIds;
      return this;
    }

    public void unsetFeatureIds() {
      this.featureIds = null;
    }

    /** Returns true if field featureIds is set (has been assigned a value) and false otherwise */
    public boolean isSetFeatureIds() {
      return this.featureIds != null;
    }

    public void setFeatureIdsIsSet(boolean value) {
      if (!value) {
        this.featureIds = null;
      }
    }

    public long getTimeout() {
      return this.timeout;
    }

    public createNonPersistedHypothesisListForBucketValue_args setTimeout(long timeout) {
      this.timeout = timeout;
      setTimeoutIsSet(true);
      return this;
    }

    public void unsetTimeout() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMEOUT_ISSET_ID);
    }

    /** Returns true if field timeout is set (has been assigned a value) and false otherwise */
    public boolean isSetTimeout() {
      return EncodingUtils.testBit(__isset_bitfield, __TIMEOUT_ISSET_ID);
    }

    public void setTimeoutIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMEOUT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATASOURCEID:
        if (value == null) {
          unsetDatasourceid();
        } else {
          setDatasourceid((String)value);
        }
        break;

      case BUCKETID:
        if (value == null) {
          unsetBucketid();
        } else {
          setBucketid((String)value);
        }
        break;

      case BUCKET_VALUES:
        if (value == null) {
          unsetBucketValues();
        } else {
          setBucketValues((List<String>)value);
        }
        break;

      case VISIBILITIES:
        if (value == null) {
          unsetVisibilities();
        } else {
          setVisibilities((Set<String>)value);
        }
        break;

      case USERID:
        if (value == null) {
          unsetUserid();
        } else {
          setUserid((String)value);
        }
        break;

      case JUSTIFICATION:
        if (value == null) {
          unsetJustification();
        } else {
          setJustification((String)value);
        }
        break;

      case FEATURE_IDS:
        if (value == null) {
          unsetFeatureIds();
        } else {
          setFeatureIds((List<String>)value);
        }
        break;

      case TIMEOUT:
        if (value == null) {
          unsetTimeout();
        } else {
          setTimeout((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATASOURCEID:
        return getDatasourceid();

      case BUCKETID:
        return getBucketid();

      case BUCKET_VALUES:
        return getBucketValues();

      case VISIBILITIES:
        return getVisibilities();

      case USERID:
        return getUserid();

      case JUSTIFICATION:
        return getJustification();

      case FEATURE_IDS:
        return getFeatureIds();

      case TIMEOUT:
        return Long.valueOf(getTimeout());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATASOURCEID:
        return isSetDatasourceid();
      case BUCKETID:
        return isSetBucketid();
      case BUCKET_VALUES:
        return isSetBucketValues();
      case VISIBILITIES:
        return isSetVisibilities();
      case USERID:
        return isSetUserid();
      case JUSTIFICATION:
        return isSetJustification();
      case FEATURE_IDS:
        return isSetFeatureIds();
      case TIMEOUT:
        return isSetTimeout();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createNonPersistedHypothesisListForBucketValue_args)
        return this.equals((createNonPersistedHypothesisListForBucketValue_args)that);
      return false;
    }

    public boolean equals(createNonPersistedHypothesisListForBucketValue_args that) {
      if (that == null)
        return false;

      boolean this_present_datasourceid = true && this.isSetDatasourceid();
      boolean that_present_datasourceid = true && that.isSetDatasourceid();
      if (this_present_datasourceid || that_present_datasourceid) {
        if (!(this_present_datasourceid && that_present_datasourceid))
          return false;
        if (!this.datasourceid.equals(that.datasourceid))
          return false;
      }

      boolean this_present_bucketid = true && this.isSetBucketid();
      boolean that_present_bucketid = true && that.isSetBucketid();
      if (this_present_bucketid || that_present_bucketid) {
        if (!(this_present_bucketid && that_present_bucketid))
          return false;
        if (!this.bucketid.equals(that.bucketid))
          return false;
      }

      boolean this_present_bucketValues = true && this.isSetBucketValues();
      boolean that_present_bucketValues = true && that.isSetBucketValues();
      if (this_present_bucketValues || that_present_bucketValues) {
        if (!(this_present_bucketValues && that_present_bucketValues))
          return false;
        if (!this.bucketValues.equals(that.bucketValues))
          return false;
      }

      boolean this_present_visibilities = true && this.isSetVisibilities();
      boolean that_present_visibilities = true && that.isSetVisibilities();
      if (this_present_visibilities || that_present_visibilities) {
        if (!(this_present_visibilities && that_present_visibilities))
          return false;
        if (!this.visibilities.equals(that.visibilities))
          return false;
      }

      boolean this_present_userid = true && this.isSetUserid();
      boolean that_present_userid = true && that.isSetUserid();
      if (this_present_userid || that_present_userid) {
        if (!(this_present_userid && that_present_userid))
          return false;
        if (!this.userid.equals(that.userid))
          return false;
      }

      boolean this_present_justification = true && this.isSetJustification();
      boolean that_present_justification = true && that.isSetJustification();
      if (this_present_justification || that_present_justification) {
        if (!(this_present_justification && that_present_justification))
          return false;
        if (!this.justification.equals(that.justification))
          return false;
      }

      boolean this_present_featureIds = true && this.isSetFeatureIds();
      boolean that_present_featureIds = true && that.isSetFeatureIds();
      if (this_present_featureIds || that_present_featureIds) {
        if (!(this_present_featureIds && that_present_featureIds))
          return false;
        if (!this.featureIds.equals(that.featureIds))
          return false;
      }

      boolean this_present_timeout = true;
      boolean that_present_timeout = true;
      if (this_present_timeout || that_present_timeout) {
        if (!(this_present_timeout && that_present_timeout))
          return false;
        if (this.timeout != that.timeout)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(createNonPersistedHypothesisListForBucketValue_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      createNonPersistedHypothesisListForBucketValue_args typedOther = (createNonPersistedHypothesisListForBucketValue_args)other;

      lastComparison = Boolean.valueOf(isSetDatasourceid()).compareTo(typedOther.isSetDatasourceid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDatasourceid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datasourceid, typedOther.datasourceid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBucketid()).compareTo(typedOther.isSetBucketid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBucketid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bucketid, typedOther.bucketid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBucketValues()).compareTo(typedOther.isSetBucketValues());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBucketValues()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bucketValues, typedOther.bucketValues);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVisibilities()).compareTo(typedOther.isSetVisibilities());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVisibilities()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.visibilities, typedOther.visibilities);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserid()).compareTo(typedOther.isSetUserid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userid, typedOther.userid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetJustification()).compareTo(typedOther.isSetJustification());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJustification()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.justification, typedOther.justification);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFeatureIds()).compareTo(typedOther.isSetFeatureIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFeatureIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.featureIds, typedOther.featureIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTimeout()).compareTo(typedOther.isSetTimeout());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTimeout()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeout, typedOther.timeout);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createNonPersistedHypothesisListForBucketValue_args(");
      boolean first = true;

      sb.append("datasourceid:");
      if (this.datasourceid == null) {
        sb.append("null");
      } else {
        sb.append(this.datasourceid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bucketid:");
      if (this.bucketid == null) {
        sb.append("null");
      } else {
        sb.append(this.bucketid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bucketValues:");
      if (this.bucketValues == null) {
        sb.append("null");
      } else {
        sb.append(this.bucketValues);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("visibilities:");
      if (this.visibilities == null) {
        sb.append("null");
      } else {
        sb.append(this.visibilities);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userid:");
      if (this.userid == null) {
        sb.append("null");
      } else {
        sb.append(this.userid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("justification:");
      if (this.justification == null) {
        sb.append("null");
      } else {
        sb.append(this.justification);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("featureIds:");
      if (this.featureIds == null) {
        sb.append("null");
      } else {
        sb.append(this.featureIds);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("timeout:");
      sb.append(this.timeout);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createNonPersistedHypothesisListForBucketValue_argsStandardSchemeFactory implements SchemeFactory {
      public createNonPersistedHypothesisListForBucketValue_argsStandardScheme getScheme() {
        return new createNonPersistedHypothesisListForBucketValue_argsStandardScheme();
      }
    }

    private static class createNonPersistedHypothesisListForBucketValue_argsStandardScheme extends StandardScheme<createNonPersistedHypothesisListForBucketValue_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createNonPersistedHypothesisListForBucketValue_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATASOURCEID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.datasourceid = iprot.readString();
                struct.setDatasourceidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BUCKETID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.bucketid = iprot.readString();
                struct.setBucketidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // BUCKET_VALUES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list272 = iprot.readListBegin();
                  struct.bucketValues = new ArrayList<String>(_list272.size);
                  for (int _i273 = 0; _i273 < _list272.size; ++_i273)
                  {
                    String _elem274; // required
                    _elem274 = iprot.readString();
                    struct.bucketValues.add(_elem274);
                  }
                  iprot.readListEnd();
                }
                struct.setBucketValuesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // VISIBILITIES
              if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                {
                  org.apache.thrift.protocol.TSet _set275 = iprot.readSetBegin();
                  struct.visibilities = new HashSet<String>(2*_set275.size);
                  for (int _i276 = 0; _i276 < _set275.size; ++_i276)
                  {
                    String _elem277; // required
                    _elem277 = iprot.readString();
                    struct.visibilities.add(_elem277);
                  }
                  iprot.readSetEnd();
                }
                struct.setVisibilitiesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // USERID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userid = iprot.readString();
                struct.setUseridIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // JUSTIFICATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.justification = iprot.readString();
                struct.setJustificationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // FEATURE_IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list278 = iprot.readListBegin();
                  struct.featureIds = new ArrayList<String>(_list278.size);
                  for (int _i279 = 0; _i279 < _list278.size; ++_i279)
                  {
                    String _elem280; // required
                    _elem280 = iprot.readString();
                    struct.featureIds.add(_elem280);
                  }
                  iprot.readListEnd();
                }
                struct.setFeatureIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // TIMEOUT
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.timeout = iprot.readI64();
                struct.setTimeoutIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createNonPersistedHypothesisListForBucketValue_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.datasourceid != null) {
          oprot.writeFieldBegin(DATASOURCEID_FIELD_DESC);
          oprot.writeString(struct.datasourceid);
          oprot.writeFieldEnd();
        }
        if (struct.bucketid != null) {
          oprot.writeFieldBegin(BUCKETID_FIELD_DESC);
          oprot.writeString(struct.bucketid);
          oprot.writeFieldEnd();
        }
        if (struct.bucketValues != null) {
          oprot.writeFieldBegin(BUCKET_VALUES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.bucketValues.size()));
            for (String _iter281 : struct.bucketValues)
            {
              oprot.writeString(_iter281);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.visibilities != null) {
          oprot.writeFieldBegin(VISIBILITIES_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.visibilities.size()));
            for (String _iter282 : struct.visibilities)
            {
              oprot.writeString(_iter282);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.userid != null) {
          oprot.writeFieldBegin(USERID_FIELD_DESC);
          oprot.writeString(struct.userid);
          oprot.writeFieldEnd();
        }
        if (struct.justification != null) {
          oprot.writeFieldBegin(JUSTIFICATION_FIELD_DESC);
          oprot.writeString(struct.justification);
          oprot.writeFieldEnd();
        }
        if (struct.featureIds != null) {
          oprot.writeFieldBegin(FEATURE_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.featureIds.size()));
            for (String _iter283 : struct.featureIds)
            {
              oprot.writeString(_iter283);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TIMEOUT_FIELD_DESC);
        oprot.writeI64(struct.timeout);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createNonPersistedHypothesisListForBucketValue_argsTupleSchemeFactory implements SchemeFactory {
      public createNonPersistedHypothesisListForBucketValue_argsTupleScheme getScheme() {
        return new createNonPersistedHypothesisListForBucketValue_argsTupleScheme();
      }
    }

    private static class createNonPersistedHypothesisListForBucketValue_argsTupleScheme extends TupleScheme<createNonPersistedHypothesisListForBucketValue_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createNonPersistedHypothesisListForBucketValue_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDatasourceid()) {
          optionals.set(0);
        }
        if (struct.isSetBucketid()) {
          optionals.set(1);
        }
        if (struct.isSetBucketValues()) {
          optionals.set(2);
        }
        if (struct.isSetVisibilities()) {
          optionals.set(3);
        }
        if (struct.isSetUserid()) {
          optionals.set(4);
        }
        if (struct.isSetJustification()) {
          optionals.set(5);
        }
        if (struct.isSetFeatureIds()) {
          optionals.set(6);
        }
        if (struct.isSetTimeout()) {
          optionals.set(7);
        }
        oprot.writeBitSet(optionals, 8);
        if (struct.isSetDatasourceid()) {
          oprot.writeString(struct.datasourceid);
        }
        if (struct.isSetBucketid()) {
          oprot.writeString(struct.bucketid);
        }
        if (struct.isSetBucketValues()) {
          {
            oprot.writeI32(struct.bucketValues.size());
            for (String _iter284 : struct.bucketValues)
            {
              oprot.writeString(_iter284);
            }
          }
        }
        if (struct.isSetVisibilities()) {
          {
            oprot.writeI32(struct.visibilities.size());
            for (String _iter285 : struct.visibilities)
            {
              oprot.writeString(_iter285);
            }
          }
        }
        if (struct.isSetUserid()) {
          oprot.writeString(struct.userid);
        }
        if (struct.isSetJustification()) {
          oprot.writeString(struct.justification);
        }
        if (struct.isSetFeatureIds()) {
          {
            oprot.writeI32(struct.featureIds.size());
            for (String _iter286 : struct.featureIds)
            {
              oprot.writeString(_iter286);
            }
          }
        }
        if (struct.isSetTimeout()) {
          oprot.writeI64(struct.timeout);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createNonPersistedHypothesisListForBucketValue_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(8);
        if (incoming.get(0)) {
          struct.datasourceid = iprot.readString();
          struct.setDatasourceidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.bucketid = iprot.readString();
          struct.setBucketidIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list287 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.bucketValues = new ArrayList<String>(_list287.size);
            for (int _i288 = 0; _i288 < _list287.size; ++_i288)
            {
              String _elem289; // required
              _elem289 = iprot.readString();
              struct.bucketValues.add(_elem289);
            }
          }
          struct.setBucketValuesIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TSet _set290 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.visibilities = new HashSet<String>(2*_set290.size);
            for (int _i291 = 0; _i291 < _set290.size; ++_i291)
            {
              String _elem292; // required
              _elem292 = iprot.readString();
              struct.visibilities.add(_elem292);
            }
          }
          struct.setVisibilitiesIsSet(true);
        }
        if (incoming.get(4)) {
          struct.userid = iprot.readString();
          struct.setUseridIsSet(true);
        }
        if (incoming.get(5)) {
          struct.justification = iprot.readString();
          struct.setJustificationIsSet(true);
        }
        if (incoming.get(6)) {
          {
            org.apache.thrift.protocol.TList _list293 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.featureIds = new ArrayList<String>(_list293.size);
            for (int _i294 = 0; _i294 < _list293.size; ++_i294)
            {
              String _elem295; // required
              _elem295 = iprot.readString();
              struct.featureIds.add(_elem295);
            }
          }
          struct.setFeatureIdsIsSet(true);
        }
        if (incoming.get(7)) {
          struct.timeout = iprot.readI64();
          struct.setTimeoutIsSet(true);
        }
      }
    }

  }

  public static class createNonPersistedHypothesisListForBucketValue_result implements org.apache.thrift.TBase<createNonPersistedHypothesisListForBucketValue_result, createNonPersistedHypothesisListForBucketValue_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createNonPersistedHypothesisListForBucketValue_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createNonPersistedHypothesisListForBucketValue_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createNonPersistedHypothesisListForBucketValue_resultTupleSchemeFactory());
    }

    public List<com._42six.amino.common.thrift.THypothesis> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com._42six.amino.common.thrift.THypothesis.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createNonPersistedHypothesisListForBucketValue_result.class, metaDataMap);
    }

    public createNonPersistedHypothesisListForBucketValue_result() {
    }

    public createNonPersistedHypothesisListForBucketValue_result(
      List<com._42six.amino.common.thrift.THypothesis> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createNonPersistedHypothesisListForBucketValue_result(createNonPersistedHypothesisListForBucketValue_result other) {
      if (other.isSetSuccess()) {
        List<com._42six.amino.common.thrift.THypothesis> __this__success = new ArrayList<com._42six.amino.common.thrift.THypothesis>();
        for (com._42six.amino.common.thrift.THypothesis other_element : other.success) {
          __this__success.add(new com._42six.amino.common.thrift.THypothesis(other_element));
        }
        this.success = __this__success;
      }
    }

    public createNonPersistedHypothesisListForBucketValue_result deepCopy() {
      return new createNonPersistedHypothesisListForBucketValue_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com._42six.amino.common.thrift.THypothesis> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com._42six.amino.common.thrift.THypothesis elem) {
      if (this.success == null) {
        this.success = new ArrayList<com._42six.amino.common.thrift.THypothesis>();
      }
      this.success.add(elem);
    }

    public List<com._42six.amino.common.thrift.THypothesis> getSuccess() {
      return this.success;
    }

    public createNonPersistedHypothesisListForBucketValue_result setSuccess(List<com._42six.amino.common.thrift.THypothesis> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com._42six.amino.common.thrift.THypothesis>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createNonPersistedHypothesisListForBucketValue_result)
        return this.equals((createNonPersistedHypothesisListForBucketValue_result)that);
      return false;
    }

    public boolean equals(createNonPersistedHypothesisListForBucketValue_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(createNonPersistedHypothesisListForBucketValue_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      createNonPersistedHypothesisListForBucketValue_result typedOther = (createNonPersistedHypothesisListForBucketValue_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createNonPersistedHypothesisListForBucketValue_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createNonPersistedHypothesisListForBucketValue_resultStandardSchemeFactory implements SchemeFactory {
      public createNonPersistedHypothesisListForBucketValue_resultStandardScheme getScheme() {
        return new createNonPersistedHypothesisListForBucketValue_resultStandardScheme();
      }
    }

    private static class createNonPersistedHypothesisListForBucketValue_resultStandardScheme extends StandardScheme<createNonPersistedHypothesisListForBucketValue_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createNonPersistedHypothesisListForBucketValue_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list296 = iprot.readListBegin();
                  struct.success = new ArrayList<com._42six.amino.common.thrift.THypothesis>(_list296.size);
                  for (int _i297 = 0; _i297 < _list296.size; ++_i297)
                  {
                    com._42six.amino.common.thrift.THypothesis _elem298; // required
                    _elem298 = new com._42six.amino.common.thrift.THypothesis();
                    _elem298.read(iprot);
                    struct.success.add(_elem298);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createNonPersistedHypothesisListForBucketValue_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com._42six.amino.common.thrift.THypothesis _iter299 : struct.success)
            {
              _iter299.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createNonPersistedHypothesisListForBucketValue_resultTupleSchemeFactory implements SchemeFactory {
      public createNonPersistedHypothesisListForBucketValue_resultTupleScheme getScheme() {
        return new createNonPersistedHypothesisListForBucketValue_resultTupleScheme();
      }
    }

    private static class createNonPersistedHypothesisListForBucketValue_resultTupleScheme extends TupleScheme<createNonPersistedHypothesisListForBucketValue_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createNonPersistedHypothesisListForBucketValue_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com._42six.amino.common.thrift.THypothesis _iter300 : struct.success)
            {
              _iter300.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createNonPersistedHypothesisListForBucketValue_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list301 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com._42six.amino.common.thrift.THypothesis>(_list301.size);
            for (int _i302 = 0; _i302 < _list301.size; ++_i302)
            {
              com._42six.amino.common.thrift.THypothesis _elem303; // required
              _elem303 = new com._42six.amino.common.thrift.THypothesis();
              _elem303.read(iprot);
              struct.success.add(_elem303);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getHypothesesByBucketValues_args implements org.apache.thrift.TBase<getHypothesesByBucketValues_args, getHypothesesByBucketValues_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getHypothesesByBucketValues_args");

    private static final org.apache.thrift.protocol.TField BV_REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("bvRequest", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getHypothesesByBucketValues_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getHypothesesByBucketValues_argsTupleSchemeFactory());
    }

    public com._42six.amino.common.thrift.TByValuesRequest bvRequest; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BV_REQUEST((short)1, "bvRequest");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BV_REQUEST
            return BV_REQUEST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BV_REQUEST, new org.apache.thrift.meta_data.FieldMetaData("bvRequest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com._42six.amino.common.thrift.TByValuesRequest.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getHypothesesByBucketValues_args.class, metaDataMap);
    }

    public getHypothesesByBucketValues_args() {
    }

    public getHypothesesByBucketValues_args(
      com._42six.amino.common.thrift.TByValuesRequest bvRequest)
    {
      this();
      this.bvRequest = bvRequest;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getHypothesesByBucketValues_args(getHypothesesByBucketValues_args other) {
      if (other.isSetBvRequest()) {
        this.bvRequest = new com._42six.amino.common.thrift.TByValuesRequest(other.bvRequest);
      }
    }

    public getHypothesesByBucketValues_args deepCopy() {
      return new getHypothesesByBucketValues_args(this);
    }

    @Override
    public void clear() {
      this.bvRequest = null;
    }

    public com._42six.amino.common.thrift.TByValuesRequest getBvRequest() {
      return this.bvRequest;
    }

    public getHypothesesByBucketValues_args setBvRequest(com._42six.amino.common.thrift.TByValuesRequest bvRequest) {
      this.bvRequest = bvRequest;
      return this;
    }

    public void unsetBvRequest() {
      this.bvRequest = null;
    }

    /** Returns true if field bvRequest is set (has been assigned a value) and false otherwise */
    public boolean isSetBvRequest() {
      return this.bvRequest != null;
    }

    public void setBvRequestIsSet(boolean value) {
      if (!value) {
        this.bvRequest = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BV_REQUEST:
        if (value == null) {
          unsetBvRequest();
        } else {
          setBvRequest((com._42six.amino.common.thrift.TByValuesRequest)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BV_REQUEST:
        return getBvRequest();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BV_REQUEST:
        return isSetBvRequest();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getHypothesesByBucketValues_args)
        return this.equals((getHypothesesByBucketValues_args)that);
      return false;
    }

    public boolean equals(getHypothesesByBucketValues_args that) {
      if (that == null)
        return false;

      boolean this_present_bvRequest = true && this.isSetBvRequest();
      boolean that_present_bvRequest = true && that.isSetBvRequest();
      if (this_present_bvRequest || that_present_bvRequest) {
        if (!(this_present_bvRequest && that_present_bvRequest))
          return false;
        if (!this.bvRequest.equals(that.bvRequest))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getHypothesesByBucketValues_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getHypothesesByBucketValues_args typedOther = (getHypothesesByBucketValues_args)other;

      lastComparison = Boolean.valueOf(isSetBvRequest()).compareTo(typedOther.isSetBvRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBvRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bvRequest, typedOther.bvRequest);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getHypothesesByBucketValues_args(");
      boolean first = true;

      sb.append("bvRequest:");
      if (this.bvRequest == null) {
        sb.append("null");
      } else {
        sb.append(this.bvRequest);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (bvRequest != null) {
        bvRequest.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getHypothesesByBucketValues_argsStandardSchemeFactory implements SchemeFactory {
      public getHypothesesByBucketValues_argsStandardScheme getScheme() {
        return new getHypothesesByBucketValues_argsStandardScheme();
      }
    }

    private static class getHypothesesByBucketValues_argsStandardScheme extends StandardScheme<getHypothesesByBucketValues_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getHypothesesByBucketValues_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BV_REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.bvRequest = new com._42six.amino.common.thrift.TByValuesRequest();
                struct.bvRequest.read(iprot);
                struct.setBvRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getHypothesesByBucketValues_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.bvRequest != null) {
          oprot.writeFieldBegin(BV_REQUEST_FIELD_DESC);
          struct.bvRequest.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getHypothesesByBucketValues_argsTupleSchemeFactory implements SchemeFactory {
      public getHypothesesByBucketValues_argsTupleScheme getScheme() {
        return new getHypothesesByBucketValues_argsTupleScheme();
      }
    }

    private static class getHypothesesByBucketValues_argsTupleScheme extends TupleScheme<getHypothesesByBucketValues_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getHypothesesByBucketValues_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBvRequest()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBvRequest()) {
          struct.bvRequest.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getHypothesesByBucketValues_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.bvRequest = new com._42six.amino.common.thrift.TByValuesRequest();
          struct.bvRequest.read(iprot);
          struct.setBvRequestIsSet(true);
        }
      }
    }

  }

  public static class getHypothesesByBucketValues_result implements org.apache.thrift.TBase<getHypothesesByBucketValues_result, getHypothesesByBucketValues_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getHypothesesByBucketValues_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getHypothesesByBucketValues_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getHypothesesByBucketValues_resultTupleSchemeFactory());
    }

    public List<com._42six.amino.common.thrift.THypothesis> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com._42six.amino.common.thrift.THypothesis.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getHypothesesByBucketValues_result.class, metaDataMap);
    }

    public getHypothesesByBucketValues_result() {
    }

    public getHypothesesByBucketValues_result(
      List<com._42six.amino.common.thrift.THypothesis> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getHypothesesByBucketValues_result(getHypothesesByBucketValues_result other) {
      if (other.isSetSuccess()) {
        List<com._42six.amino.common.thrift.THypothesis> __this__success = new ArrayList<com._42six.amino.common.thrift.THypothesis>();
        for (com._42six.amino.common.thrift.THypothesis other_element : other.success) {
          __this__success.add(new com._42six.amino.common.thrift.THypothesis(other_element));
        }
        this.success = __this__success;
      }
    }

    public getHypothesesByBucketValues_result deepCopy() {
      return new getHypothesesByBucketValues_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com._42six.amino.common.thrift.THypothesis> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com._42six.amino.common.thrift.THypothesis elem) {
      if (this.success == null) {
        this.success = new ArrayList<com._42six.amino.common.thrift.THypothesis>();
      }
      this.success.add(elem);
    }

    public List<com._42six.amino.common.thrift.THypothesis> getSuccess() {
      return this.success;
    }

    public getHypothesesByBucketValues_result setSuccess(List<com._42six.amino.common.thrift.THypothesis> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com._42six.amino.common.thrift.THypothesis>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getHypothesesByBucketValues_result)
        return this.equals((getHypothesesByBucketValues_result)that);
      return false;
    }

    public boolean equals(getHypothesesByBucketValues_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getHypothesesByBucketValues_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getHypothesesByBucketValues_result typedOther = (getHypothesesByBucketValues_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getHypothesesByBucketValues_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getHypothesesByBucketValues_resultStandardSchemeFactory implements SchemeFactory {
      public getHypothesesByBucketValues_resultStandardScheme getScheme() {
        return new getHypothesesByBucketValues_resultStandardScheme();
      }
    }

    private static class getHypothesesByBucketValues_resultStandardScheme extends StandardScheme<getHypothesesByBucketValues_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getHypothesesByBucketValues_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list304 = iprot.readListBegin();
                  struct.success = new ArrayList<com._42six.amino.common.thrift.THypothesis>(_list304.size);
                  for (int _i305 = 0; _i305 < _list304.size; ++_i305)
                  {
                    com._42six.amino.common.thrift.THypothesis _elem306; // required
                    _elem306 = new com._42six.amino.common.thrift.THypothesis();
                    _elem306.read(iprot);
                    struct.success.add(_elem306);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getHypothesesByBucketValues_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com._42six.amino.common.thrift.THypothesis _iter307 : struct.success)
            {
              _iter307.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getHypothesesByBucketValues_resultTupleSchemeFactory implements SchemeFactory {
      public getHypothesesByBucketValues_resultTupleScheme getScheme() {
        return new getHypothesesByBucketValues_resultTupleScheme();
      }
    }

    private static class getHypothesesByBucketValues_resultTupleScheme extends TupleScheme<getHypothesesByBucketValues_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getHypothesesByBucketValues_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com._42six.amino.common.thrift.THypothesis _iter308 : struct.success)
            {
              _iter308.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getHypothesesByBucketValues_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list309 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com._42six.amino.common.thrift.THypothesis>(_list309.size);
            for (int _i310 = 0; _i310 < _list309.size; ++_i310)
            {
              com._42six.amino.common.thrift.THypothesis _elem311; // required
              _elem311 = new com._42six.amino.common.thrift.THypothesis();
              _elem311.read(iprot);
              struct.success.add(_elem311);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getUniqueness_args implements org.apache.thrift.TBase<getUniqueness_args, getUniqueness_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUniqueness_args");

    private static final org.apache.thrift.protocol.TField FEATURE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("featureId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField BUCKET_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("bucketName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField VISIBILITIES_FIELD_DESC = new org.apache.thrift.protocol.TField("visibilities", org.apache.thrift.protocol.TType.SET, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getUniqueness_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getUniqueness_argsTupleSchemeFactory());
    }

    public String featureId; // required
    public String bucketName; // required
    public int count; // required
    public Set<String> visibilities; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FEATURE_ID((short)1, "featureId"),
      BUCKET_NAME((short)2, "bucketName"),
      COUNT((short)3, "count"),
      VISIBILITIES((short)4, "visibilities");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FEATURE_ID
            return FEATURE_ID;
          case 2: // BUCKET_NAME
            return BUCKET_NAME;
          case 3: // COUNT
            return COUNT;
          case 4: // VISIBILITIES
            return VISIBILITIES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __COUNT_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FEATURE_ID, new org.apache.thrift.meta_data.FieldMetaData("featureId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BUCKET_NAME, new org.apache.thrift.meta_data.FieldMetaData("bucketName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.VISIBILITIES, new org.apache.thrift.meta_data.FieldMetaData("visibilities", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUniqueness_args.class, metaDataMap);
    }

    public getUniqueness_args() {
    }

    public getUniqueness_args(
      String featureId,
      String bucketName,
      int count,
      Set<String> visibilities)
    {
      this();
      this.featureId = featureId;
      this.bucketName = bucketName;
      this.count = count;
      setCountIsSet(true);
      this.visibilities = visibilities;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUniqueness_args(getUniqueness_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetFeatureId()) {
        this.featureId = other.featureId;
      }
      if (other.isSetBucketName()) {
        this.bucketName = other.bucketName;
      }
      this.count = other.count;
      if (other.isSetVisibilities()) {
        Set<String> __this__visibilities = new HashSet<String>();
        for (String other_element : other.visibilities) {
          __this__visibilities.add(other_element);
        }
        this.visibilities = __this__visibilities;
      }
    }

    public getUniqueness_args deepCopy() {
      return new getUniqueness_args(this);
    }

    @Override
    public void clear() {
      this.featureId = null;
      this.bucketName = null;
      setCountIsSet(false);
      this.count = 0;
      this.visibilities = null;
    }

    public String getFeatureId() {
      return this.featureId;
    }

    public getUniqueness_args setFeatureId(String featureId) {
      this.featureId = featureId;
      return this;
    }

    public void unsetFeatureId() {
      this.featureId = null;
    }

    /** Returns true if field featureId is set (has been assigned a value) and false otherwise */
    public boolean isSetFeatureId() {
      return this.featureId != null;
    }

    public void setFeatureIdIsSet(boolean value) {
      if (!value) {
        this.featureId = null;
      }
    }

    public String getBucketName() {
      return this.bucketName;
    }

    public getUniqueness_args setBucketName(String bucketName) {
      this.bucketName = bucketName;
      return this;
    }

    public void unsetBucketName() {
      this.bucketName = null;
    }

    /** Returns true if field bucketName is set (has been assigned a value) and false otherwise */
    public boolean isSetBucketName() {
      return this.bucketName != null;
    }

    public void setBucketNameIsSet(boolean value) {
      if (!value) {
        this.bucketName = null;
      }
    }

    public int getCount() {
      return this.count;
    }

    public getUniqueness_args setCount(int count) {
      this.count = count;
      setCountIsSet(true);
      return this;
    }

    public void unsetCount() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COUNT_ISSET_ID);
    }

    /** Returns true if field count is set (has been assigned a value) and false otherwise */
    public boolean isSetCount() {
      return EncodingUtils.testBit(__isset_bitfield, __COUNT_ISSET_ID);
    }

    public void setCountIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COUNT_ISSET_ID, value);
    }

    public int getVisibilitiesSize() {
      return (this.visibilities == null) ? 0 : this.visibilities.size();
    }

    public java.util.Iterator<String> getVisibilitiesIterator() {
      return (this.visibilities == null) ? null : this.visibilities.iterator();
    }

    public void addToVisibilities(String elem) {
      if (this.visibilities == null) {
        this.visibilities = new HashSet<String>();
      }
      this.visibilities.add(elem);
    }

    public Set<String> getVisibilities() {
      return this.visibilities;
    }

    public getUniqueness_args setVisibilities(Set<String> visibilities) {
      this.visibilities = visibilities;
      return this;
    }

    public void unsetVisibilities() {
      this.visibilities = null;
    }

    /** Returns true if field visibilities is set (has been assigned a value) and false otherwise */
    public boolean isSetVisibilities() {
      return this.visibilities != null;
    }

    public void setVisibilitiesIsSet(boolean value) {
      if (!value) {
        this.visibilities = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FEATURE_ID:
        if (value == null) {
          unsetFeatureId();
        } else {
          setFeatureId((String)value);
        }
        break;

      case BUCKET_NAME:
        if (value == null) {
          unsetBucketName();
        } else {
          setBucketName((String)value);
        }
        break;

      case COUNT:
        if (value == null) {
          unsetCount();
        } else {
          setCount((Integer)value);
        }
        break;

      case VISIBILITIES:
        if (value == null) {
          unsetVisibilities();
        } else {
          setVisibilities((Set<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FEATURE_ID:
        return getFeatureId();

      case BUCKET_NAME:
        return getBucketName();

      case COUNT:
        return Integer.valueOf(getCount());

      case VISIBILITIES:
        return getVisibilities();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FEATURE_ID:
        return isSetFeatureId();
      case BUCKET_NAME:
        return isSetBucketName();
      case COUNT:
        return isSetCount();
      case VISIBILITIES:
        return isSetVisibilities();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUniqueness_args)
        return this.equals((getUniqueness_args)that);
      return false;
    }

    public boolean equals(getUniqueness_args that) {
      if (that == null)
        return false;

      boolean this_present_featureId = true && this.isSetFeatureId();
      boolean that_present_featureId = true && that.isSetFeatureId();
      if (this_present_featureId || that_present_featureId) {
        if (!(this_present_featureId && that_present_featureId))
          return false;
        if (!this.featureId.equals(that.featureId))
          return false;
      }

      boolean this_present_bucketName = true && this.isSetBucketName();
      boolean that_present_bucketName = true && that.isSetBucketName();
      if (this_present_bucketName || that_present_bucketName) {
        if (!(this_present_bucketName && that_present_bucketName))
          return false;
        if (!this.bucketName.equals(that.bucketName))
          return false;
      }

      boolean this_present_count = true;
      boolean that_present_count = true;
      if (this_present_count || that_present_count) {
        if (!(this_present_count && that_present_count))
          return false;
        if (this.count != that.count)
          return false;
      }

      boolean this_present_visibilities = true && this.isSetVisibilities();
      boolean that_present_visibilities = true && that.isSetVisibilities();
      if (this_present_visibilities || that_present_visibilities) {
        if (!(this_present_visibilities && that_present_visibilities))
          return false;
        if (!this.visibilities.equals(that.visibilities))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getUniqueness_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getUniqueness_args typedOther = (getUniqueness_args)other;

      lastComparison = Boolean.valueOf(isSetFeatureId()).compareTo(typedOther.isSetFeatureId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFeatureId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.featureId, typedOther.featureId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBucketName()).compareTo(typedOther.isSetBucketName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBucketName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bucketName, typedOther.bucketName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCount()).compareTo(typedOther.isSetCount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, typedOther.count);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVisibilities()).compareTo(typedOther.isSetVisibilities());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVisibilities()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.visibilities, typedOther.visibilities);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUniqueness_args(");
      boolean first = true;

      sb.append("featureId:");
      if (this.featureId == null) {
        sb.append("null");
      } else {
        sb.append(this.featureId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bucketName:");
      if (this.bucketName == null) {
        sb.append("null");
      } else {
        sb.append(this.bucketName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("count:");
      sb.append(this.count);
      first = false;
      if (!first) sb.append(", ");
      sb.append("visibilities:");
      if (this.visibilities == null) {
        sb.append("null");
      } else {
        sb.append(this.visibilities);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUniqueness_argsStandardSchemeFactory implements SchemeFactory {
      public getUniqueness_argsStandardScheme getScheme() {
        return new getUniqueness_argsStandardScheme();
      }
    }

    private static class getUniqueness_argsStandardScheme extends StandardScheme<getUniqueness_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUniqueness_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FEATURE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.featureId = iprot.readString();
                struct.setFeatureIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BUCKET_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.bucketName = iprot.readString();
                struct.setBucketNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // COUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.count = iprot.readI32();
                struct.setCountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // VISIBILITIES
              if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                {
                  org.apache.thrift.protocol.TSet _set312 = iprot.readSetBegin();
                  struct.visibilities = new HashSet<String>(2*_set312.size);
                  for (int _i313 = 0; _i313 < _set312.size; ++_i313)
                  {
                    String _elem314; // required
                    _elem314 = iprot.readString();
                    struct.visibilities.add(_elem314);
                  }
                  iprot.readSetEnd();
                }
                struct.setVisibilitiesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUniqueness_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.featureId != null) {
          oprot.writeFieldBegin(FEATURE_ID_FIELD_DESC);
          oprot.writeString(struct.featureId);
          oprot.writeFieldEnd();
        }
        if (struct.bucketName != null) {
          oprot.writeFieldBegin(BUCKET_NAME_FIELD_DESC);
          oprot.writeString(struct.bucketName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(COUNT_FIELD_DESC);
        oprot.writeI32(struct.count);
        oprot.writeFieldEnd();
        if (struct.visibilities != null) {
          oprot.writeFieldBegin(VISIBILITIES_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.visibilities.size()));
            for (String _iter315 : struct.visibilities)
            {
              oprot.writeString(_iter315);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUniqueness_argsTupleSchemeFactory implements SchemeFactory {
      public getUniqueness_argsTupleScheme getScheme() {
        return new getUniqueness_argsTupleScheme();
      }
    }

    private static class getUniqueness_argsTupleScheme extends TupleScheme<getUniqueness_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUniqueness_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFeatureId()) {
          optionals.set(0);
        }
        if (struct.isSetBucketName()) {
          optionals.set(1);
        }
        if (struct.isSetCount()) {
          optionals.set(2);
        }
        if (struct.isSetVisibilities()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetFeatureId()) {
          oprot.writeString(struct.featureId);
        }
        if (struct.isSetBucketName()) {
          oprot.writeString(struct.bucketName);
        }
        if (struct.isSetCount()) {
          oprot.writeI32(struct.count);
        }
        if (struct.isSetVisibilities()) {
          {
            oprot.writeI32(struct.visibilities.size());
            for (String _iter316 : struct.visibilities)
            {
              oprot.writeString(_iter316);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUniqueness_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.featureId = iprot.readString();
          struct.setFeatureIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.bucketName = iprot.readString();
          struct.setBucketNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.count = iprot.readI32();
          struct.setCountIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TSet _set317 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.visibilities = new HashSet<String>(2*_set317.size);
            for (int _i318 = 0; _i318 < _set317.size; ++_i318)
            {
              String _elem319; // required
              _elem319 = iprot.readString();
              struct.visibilities.add(_elem319);
            }
          }
          struct.setVisibilitiesIsSet(true);
        }
      }
    }

  }

  public static class getUniqueness_result implements org.apache.thrift.TBase<getUniqueness_result, getUniqueness_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUniqueness_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.DOUBLE, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getUniqueness_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getUniqueness_resultTupleSchemeFactory());
    }

    public double success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUniqueness_result.class, metaDataMap);
    }

    public getUniqueness_result() {
    }

    public getUniqueness_result(
      double success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUniqueness_result(getUniqueness_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getUniqueness_result deepCopy() {
      return new getUniqueness_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0.0;
    }

    public double getSuccess() {
      return this.success;
    }

    public getUniqueness_result setSuccess(double success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Double)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Double.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUniqueness_result)
        return this.equals((getUniqueness_result)that);
      return false;
    }

    public boolean equals(getUniqueness_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getUniqueness_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getUniqueness_result typedOther = (getUniqueness_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUniqueness_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUniqueness_resultStandardSchemeFactory implements SchemeFactory {
      public getUniqueness_resultStandardScheme getScheme() {
        return new getUniqueness_resultStandardScheme();
      }
    }

    private static class getUniqueness_resultStandardScheme extends StandardScheme<getUniqueness_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUniqueness_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.success = iprot.readDouble();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUniqueness_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeDouble(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUniqueness_resultTupleSchemeFactory implements SchemeFactory {
      public getUniqueness_resultTupleScheme getScheme() {
        return new getUniqueness_resultTupleScheme();
      }
    }

    private static class getUniqueness_resultTupleScheme extends TupleScheme<getUniqueness_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUniqueness_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeDouble(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUniqueness_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readDouble();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
